
MQQT_with_ubidots_using_WIFI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005be8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000005d2  00800060  00005be8  00005c7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  00800632  00800632  0000624e  2**0
                  ALLOC
  3 .stab         000050ac  00000000  00000000  00006250  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016bf  00000000  00000000  0000b2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c9bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000cb5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000cd4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000f158  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000104de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000116b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00011874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00011b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000124d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	16 e0       	ldi	r17, 0x06	; 6
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	fb e5       	ldi	r31, 0x5B	; 91
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 33       	cpi	r26, 0x32	; 50
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a2 e3       	ldi	r26, 0x32	; 50
      7a:	b6 e0       	ldi	r27, 0x06	; 6
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 2b 	call	0x5710	; 0x5710 <main>
      8a:	0c 94 f2 2d 	jmp	0x5be4	; 0x5be4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 52 2d 	jmp	0x5aa4	; 0x5aa4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e2       	ldi	r26, 0x29	; 41
     128:	b5 e0       	ldi	r27, 0x05	; 5
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6e 2d 	jmp	0x5adc	; 0x5adc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5e 2d 	jmp	0x5abc	; 0x5abc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7a 2d 	jmp	0x5af4	; 0x5af4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5e 2d 	jmp	0x5abc	; 0x5abc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7a 2d 	jmp	0x5af4	; 0x5af4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 52 2d 	jmp	0x5aa4	; 0x5aa4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e2       	ldi	r24, 0x29	; 41
     496:	95 e0       	ldi	r25, 0x05	; 5
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6e 2d 	jmp	0x5adc	; 0x5adc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5a 2d 	jmp	0x5ab4	; 0x5ab4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e2       	ldi	r22, 0x29	; 41
     69c:	75 e0       	ldi	r23, 0x05	; 5
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5e 2d 	jmp	0x5abc	; 0x5abc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7a 2d 	jmp	0x5af4	; 0x5af4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5e 2d 	jmp	0x5abc	; 0x5abc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7a 2d 	jmp	0x5af4	; 0x5af4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5e 2d 	jmp	0x5abc	; 0x5abc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7a 2d 	jmp	0x5af4	; 0x5af4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 62 2d 	jmp	0x5ac4	; 0x5ac4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7e 2d 	jmp	0x5afc	; 0x5afc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 5a 2d 	jmp	0x5ab4	; 0x5ab4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ef 5c       	subi	r30, 0xCF	; 207
     aca:	fa 4f       	sbci	r31, 0xFA	; 250
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:




void ADC_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

	ADMUX=0b01000000;     // vcc refrence - ADLAR=0/CH0
     e36:	e7 e2       	ldi	r30, 0x27	; 39
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 e4       	ldi	r24, 0x40	; 64
     e3c:	80 83       	st	Z, r24
	ADCSRA=0b10000111;    //Enable ADC - Prescaler "/128"
     e3e:	e6 e2       	ldi	r30, 0x26	; 38
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	87 e8       	ldi	r24, 0x87	; 135
     e44:	80 83       	st	Z, r24

}
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <ADC_Get_reading_mv>:



unsigned int ADC_Get_reading_mv(char ch)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	0f 92       	push	r0
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	89 83       	std	Y+1, r24	; 0x01

ADMUX =(ADMUX&0xF8)|ch;
     e58:	a7 e2       	ldi	r26, 0x27	; 39
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e7 e2       	ldi	r30, 0x27	; 39
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	98 2f       	mov	r25, r24
     e64:	98 7f       	andi	r25, 0xF8	; 248
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	89 2b       	or	r24, r25
     e6a:	8c 93       	st	X, r24
	ADCSRA |=(1<<ADSC);  // start conversion
     e6c:	a6 e2       	ldi	r26, 0x26	; 38
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e6 e2       	ldi	r30, 0x26	; 38
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	80 64       	ori	r24, 0x40	; 64
     e78:	8c 93       	st	X, r24
	while(!(ADCSRA&(1<<ADIF)));
     e7a:	e6 e2       	ldi	r30, 0x26	; 38
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	80 71       	andi	r24, 0x10	; 16
     e86:	90 70       	andi	r25, 0x00	; 0
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	b9 f3       	breq	.-18     	; 0xe7a <ADC_Get_reading_mv+0x2e>

	return ADC;
     e8c:	e4 e2       	ldi	r30, 0x24	; 36
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01


}
     e94:	0f 90       	pop	r0
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <ADC_Get_Temp_reading>:

char ADC_Get_Temp_reading(char ch)
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <ADC_Get_Temp_reading+0x6>
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <ADC_Get_Temp_reading+0x8>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <ADC_Get_Temp_reading+0xa>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	8e 83       	std	Y+6, r24	; 0x06
	char temp=0;
     eac:	1d 82       	std	Y+5, r1	; 0x05
	unsigned int ADC_Value=0,Reading_MV=0;
     eae:	1c 82       	std	Y+4, r1	; 0x04
     eb0:	1b 82       	std	Y+3, r1	; 0x03
     eb2:	1a 82       	std	Y+2, r1	; 0x02
     eb4:	19 82       	std	Y+1, r1	; 0x01
	ADC_Value=ADC_Get_reading_mv(ch);
     eb6:	8e 81       	ldd	r24, Y+6	; 0x06
     eb8:	0e 94 26 07 	call	0xe4c	; 0xe4c <ADC_Get_reading_mv>
     ebc:	9c 83       	std	Y+4, r25	; 0x04
     ebe:	8b 83       	std	Y+3, r24	; 0x03

	Reading_MV=ADC_Value*4.88;
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	cc 01       	movw	r24, r24
     ec6:	a0 e0       	ldi	r26, 0x00	; 0
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	bc 01       	movw	r22, r24
     ecc:	cd 01       	movw	r24, r26
     ece:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	bc 01       	movw	r22, r24
     ed8:	cd 01       	movw	r24, r26
     eda:	26 ef       	ldi	r18, 0xF6	; 246
     edc:	38 e2       	ldi	r19, 0x28	; 40
     ede:	4c e9       	ldi	r20, 0x9C	; 156
     ee0:	50 e4       	ldi	r21, 0x40	; 64
     ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	bc 01       	movw	r22, r24
     eec:	cd 01       	movw	r24, r26
     eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
	temp=Reading_MV/10;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	2a e0       	ldi	r18, 0x0A	; 10
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	b9 01       	movw	r22, r18
     f04:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__udivmodhi4>
     f08:	cb 01       	movw	r24, r22
     f0a:	8d 83       	std	Y+5, r24	; 0x05



return temp;
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f0e:	26 96       	adiw	r28, 0x06	; 6
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <init_UART>:




void init_UART(void)
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62

//	    UCSRA= (1<<U2X);
		UCSRB = (1 << RXEN) | (1 << TXEN)|(1<<RXCIE);
     f28:	ea e2       	ldi	r30, 0x2A	; 42
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	88 e9       	ldi	r24, 0x98	; 152
     f2e:	80 83       	st	Z, r24
       UCSRC = (1 << URSEL) | (3 << UCSZ0);
     f30:	e0 e4       	ldi	r30, 0x40	; 64
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	86 e8       	ldi	r24, 0x86	; 134
     f36:	80 83       	st	Z, r24
				UBRRL = 51;
     f38:	e9 e2       	ldi	r30, 0x29	; 41
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	83 e3       	ldi	r24, 0x33	; 51
     f3e:	80 83       	st	Z, r24
				UBRRH =0;
     f40:	e0 e4       	ldi	r30, 0x40	; 64
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	10 82       	st	Z, r1
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <UART_SendChar>:


void UART_SendChar(char data)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	89 83       	std	Y+1, r24	; 0x01
	while (!( UCSRA & (1<<UDRE))) ;  /* Wait for empty transmit buffer */
     f58:	eb e2       	ldi	r30, 0x2B	; 43
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	80 72       	andi	r24, 0x20	; 32
     f64:	90 70       	andi	r25, 0x00	; 0
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	b9 f3       	breq	.-18     	; 0xf58 <UART_SendChar+0xc>

	UDR = data;                     /* Put data into buffer, sends the data */
     f6a:	ec e2       	ldi	r30, 0x2C	; 44
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	80 83       	st	Z, r24
}
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <UART_getChar>:


char UART_getChar(void)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA & (1<<RXC)));   /* Wait until reveived flag set */
     f82:	eb e2       	ldi	r30, 0x2B	; 43
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	88 23       	and	r24, r24
     f8a:	dc f7       	brge	.-10     	; 0xf82 <UART_getChar+0x8>

	return UDR;                   /* Return data in received buffer */
     f8c:	ec e2       	ldi	r30, 0x2C	; 44
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
}
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <UART_SEND_string>:


void UART_SEND_string(char *array)
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <UART_SEND_string+0x6>
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <UART_SEND_string+0x8>
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	9c 83       	std	Y+4, r25	; 0x04
     fa6:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
     fa8:	1a 82       	std	Y+2, r1	; 0x02
     faa:	19 82       	std	Y+1, r1	; 0x01
     fac:	0f c0       	rjmp	.+30     	; 0xfcc <UART_SEND_string+0x34>
    while(array[i]!='\0')
    {

    	UART_SendChar(array[i]);
     fae:	29 81       	ldd	r18, Y+1	; 0x01
     fb0:	3a 81       	ldd	r19, Y+2	; 0x02
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	fc 01       	movw	r30, r24
     fb8:	e2 0f       	add	r30, r18
     fba:	f3 1f       	adc	r31, r19
     fbc:	80 81       	ld	r24, Z
     fbe:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
    	i++;
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	89 83       	std	Y+1, r24	; 0x01


void UART_SEND_string(char *array)
{
	int i=0;
    while(array[i]!='\0')
     fcc:	29 81       	ldd	r18, Y+1	; 0x01
     fce:	3a 81       	ldd	r19, Y+2	; 0x02
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04
     fd4:	fc 01       	movw	r30, r24
     fd6:	e2 0f       	add	r30, r18
     fd8:	f3 1f       	adc	r31, r19
     fda:	80 81       	ld	r24, Z
     fdc:	88 23       	and	r24, r24
     fde:	39 f7       	brne	.-50     	; 0xfae <UART_SEND_string+0x16>

    	UART_SendChar(array[i]);
    	i++;
    }

}
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <UART_SEND_number>:



void UART_SEND_number(unsigned int number)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	66 97       	sbiw	r28, 0x16	; 22
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	9e 8b       	std	Y+22, r25	; 0x16
    1004:	8d 8b       	std	Y+21, r24	; 0x15
   char buffer[20];

   itoa(number,buffer,10);
    1006:	8d 89       	ldd	r24, Y+21	; 0x15
    1008:	9e 89       	ldd	r25, Y+22	; 0x16
    100a:	9e 01       	movw	r18, r28
    100c:	2f 5f       	subi	r18, 0xFF	; 255
    100e:	3f 4f       	sbci	r19, 0xFF	; 255
    1010:	b9 01       	movw	r22, r18
    1012:	4a e0       	ldi	r20, 0x0A	; 10
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <itoa>
   UART_SEND_string(buffer);
    101a:	ce 01       	movw	r24, r28
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>


}
    1022:	66 96       	adiw	r28, 0x16	; 22
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <EF_void_LCD_init>:
 * PARAMETERS  : Void.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_init()
{
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	c4 55       	subi	r28, 0x54	; 84
    1042:	d0 40       	sbci	r29, 0x00	; 0
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
	/* Init Control PIN as Output */
	LCD_EN_DDR |=  (1 << LCD_ENABLE_PIN);
    104e:	a4 e3       	ldi	r26, 0x34	; 52
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e4 e3       	ldi	r30, 0x34	; 52
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	80 68       	ori	r24, 0x80	; 128
    105a:	8c 93       	st	X, r24
	LCD_RS_DDR |=	(1 << LCD_RS_PIN) ;
    105c:	a4 e3       	ldi	r26, 0x34	; 52
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e4 e3       	ldi	r30, 0x34	; 52
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	80 64       	ori	r24, 0x40	; 64
    1068:	8c 93       	st	X, r24

	/* Init Data PIN as Output 0,1,2,3 */
//	LCD_DATA_DDR  |= 0x0F;

//	LCD_DATA_DDR  |= 0xF0;
	LCD_DATA_DDR  |= ((1 << LCD_DATA0_PIN) | (1 << LCD_DATA1_PIN) | (1 << LCD_DATA2_PIN) | (1 << LCD_DATA3_PIN));
    106a:	a7 e3       	ldi	r26, 0x37	; 55
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e7 e3       	ldi	r30, 0x37	; 55
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	80 6f       	ori	r24, 0xF0	; 240
    1076:	8c 93       	st	X, r24

	LCD_DATA_PORT |= 0x00;
    1078:	a8 e3       	ldi	r26, 0x38	; 56
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e8 e3       	ldi	r30, 0x38	; 56
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8c 93       	st	X, r24
	/* after power up , delay 10ms should be existed */
	LCD_4BIT_Write_Init(0x30);
    1084:	80 e3       	ldi	r24, 0x30	; 48
    1086:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_4BIT_Write_Init>
    108a:	fe 01       	movw	r30, r28
    108c:	ef 5a       	subi	r30, 0xAF	; 175
    108e:	ff 4f       	sbci	r31, 0xFF	; 255
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a0 e2       	ldi	r26, 0x20	; 32
    1096:	b1 e4       	ldi	r27, 0x41	; 65
    1098:	80 83       	st	Z, r24
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	a2 83       	std	Z+2, r26	; 0x02
    109e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a0:	8e 01       	movw	r16, r28
    10a2:	03 5b       	subi	r16, 0xB3	; 179
    10a4:	1f 4f       	sbci	r17, 0xFF	; 255
    10a6:	fe 01       	movw	r30, r28
    10a8:	ef 5a       	subi	r30, 0xAF	; 175
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	60 81       	ld	r22, Z
    10ae:	71 81       	ldd	r23, Z+1	; 0x01
    10b0:	82 81       	ldd	r24, Z+2	; 0x02
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	4a ef       	ldi	r20, 0xFA	; 250
    10ba:	54 e4       	ldi	r21, 0x44	; 68
    10bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	f8 01       	movw	r30, r16
    10c6:	80 83       	st	Z, r24
    10c8:	91 83       	std	Z+1, r25	; 0x01
    10ca:	a2 83       	std	Z+2, r26	; 0x02
    10cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10ce:	fe 01       	movw	r30, r28
    10d0:	e3 5b       	subi	r30, 0xB3	; 179
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	60 81       	ld	r22, Z
    10d6:	71 81       	ldd	r23, Z+1	; 0x01
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	93 81       	ldd	r25, Z+3	; 0x03
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	40 e8       	ldi	r20, 0x80	; 128
    10e2:	5f e3       	ldi	r21, 0x3F	; 63
    10e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10e8:	88 23       	and	r24, r24
    10ea:	44 f4       	brge	.+16     	; 0x10fc <EF_void_LCD_init+0xc8>
		__ticks = 1;
    10ec:	fe 01       	movw	r30, r28
    10ee:	e5 5b       	subi	r30, 0xB5	; 181
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	80 83       	st	Z, r24
    10fa:	64 c0       	rjmp	.+200    	; 0x11c4 <EF_void_LCD_init+0x190>
	else if (__tmp > 65535)
    10fc:	fe 01       	movw	r30, r28
    10fe:	e3 5b       	subi	r30, 0xB3	; 179
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	60 81       	ld	r22, Z
    1104:	71 81       	ldd	r23, Z+1	; 0x01
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	93 81       	ldd	r25, Z+3	; 0x03
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	3f ef       	ldi	r19, 0xFF	; 255
    110e:	4f e7       	ldi	r20, 0x7F	; 127
    1110:	57 e4       	ldi	r21, 0x47	; 71
    1112:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1116:	18 16       	cp	r1, r24
    1118:	0c f0       	brlt	.+2      	; 0x111c <EF_void_LCD_init+0xe8>
    111a:	43 c0       	rjmp	.+134    	; 0x11a2 <EF_void_LCD_init+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111c:	fe 01       	movw	r30, r28
    111e:	ef 5a       	subi	r30, 0xAF	; 175
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	60 81       	ld	r22, Z
    1124:	71 81       	ldd	r23, Z+1	; 0x01
    1126:	82 81       	ldd	r24, Z+2	; 0x02
    1128:	93 81       	ldd	r25, Z+3	; 0x03
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e2       	ldi	r20, 0x20	; 32
    1130:	51 e4       	ldi	r21, 0x41	; 65
    1132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	8e 01       	movw	r16, r28
    113c:	05 5b       	subi	r16, 0xB5	; 181
    113e:	1f 4f       	sbci	r17, 0xFF	; 255
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	f8 01       	movw	r30, r16
    114e:	91 83       	std	Z+1, r25	; 0x01
    1150:	80 83       	st	Z, r24
    1152:	1f c0       	rjmp	.+62     	; 0x1192 <EF_void_LCD_init+0x15e>
    1154:	fe 01       	movw	r30, r28
    1156:	e7 5b       	subi	r30, 0xB7	; 183
    1158:	ff 4f       	sbci	r31, 0xFF	; 255
    115a:	88 ec       	ldi	r24, 0xC8	; 200
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1162:	fe 01       	movw	r30, r28
    1164:	e7 5b       	subi	r30, 0xB7	; 183
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	80 81       	ld	r24, Z
    116a:	91 81       	ldd	r25, Z+1	; 0x01
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <EF_void_LCD_init+0x138>
    1170:	fe 01       	movw	r30, r28
    1172:	e7 5b       	subi	r30, 0xB7	; 183
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117a:	de 01       	movw	r26, r28
    117c:	a5 5b       	subi	r26, 0xB5	; 181
    117e:	bf 4f       	sbci	r27, 0xFF	; 255
    1180:	fe 01       	movw	r30, r28
    1182:	e5 5b       	subi	r30, 0xB5	; 181
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	80 81       	ld	r24, Z
    1188:	91 81       	ldd	r25, Z+1	; 0x01
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	11 96       	adiw	r26, 0x01	; 1
    118e:	9c 93       	st	X, r25
    1190:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1192:	fe 01       	movw	r30, r28
    1194:	e5 5b       	subi	r30, 0xB5	; 181
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	80 81       	ld	r24, Z
    119a:	91 81       	ldd	r25, Z+1	; 0x01
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	d1 f6       	brne	.-76     	; 0x1154 <EF_void_LCD_init+0x120>
    11a0:	27 c0       	rjmp	.+78     	; 0x11f0 <EF_void_LCD_init+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a2:	8e 01       	movw	r16, r28
    11a4:	05 5b       	subi	r16, 0xB5	; 181
    11a6:	1f 4f       	sbci	r17, 0xFF	; 255
    11a8:	fe 01       	movw	r30, r28
    11aa:	e3 5b       	subi	r30, 0xB3	; 179
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	60 81       	ld	r22, Z
    11b0:	71 81       	ldd	r23, Z+1	; 0x01
    11b2:	82 81       	ldd	r24, Z+2	; 0x02
    11b4:	93 81       	ldd	r25, Z+3	; 0x03
    11b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	f8 01       	movw	r30, r16
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	80 83       	st	Z, r24
    11c4:	de 01       	movw	r26, r28
    11c6:	a9 5b       	subi	r26, 0xB9	; 185
    11c8:	bf 4f       	sbci	r27, 0xFF	; 255
    11ca:	fe 01       	movw	r30, r28
    11cc:	e5 5b       	subi	r30, 0xB5	; 181
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	80 81       	ld	r24, Z
    11d2:	91 81       	ldd	r25, Z+1	; 0x01
    11d4:	8d 93       	st	X+, r24
    11d6:	9c 93       	st	X, r25
    11d8:	fe 01       	movw	r30, r28
    11da:	e9 5b       	subi	r30, 0xB9	; 185
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	80 81       	ld	r24, Z
    11e0:	91 81       	ldd	r25, Z+1	; 0x01
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <EF_void_LCD_init+0x1ae>
    11e6:	fe 01       	movw	r30, r28
    11e8:	e9 5b       	subi	r30, 0xB9	; 185
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	91 83       	std	Z+1, r25	; 0x01
    11ee:	80 83       	st	Z, r24
	_delay_ms(10);
	LCD_4BIT_Write_Init(0x30);
    11f0:	80 e3       	ldi	r24, 0x30	; 48
    11f2:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_4BIT_Write_Init>
    11f6:	fe 01       	movw	r30, r28
    11f8:	ed 5b       	subi	r30, 0xBD	; 189
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a0 e2       	ldi	r26, 0x20	; 32
    1202:	b1 e4       	ldi	r27, 0x41	; 65
    1204:	80 83       	st	Z, r24
    1206:	91 83       	std	Z+1, r25	; 0x01
    1208:	a2 83       	std	Z+2, r26	; 0x02
    120a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120c:	8e 01       	movw	r16, r28
    120e:	01 5c       	subi	r16, 0xC1	; 193
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	fe 01       	movw	r30, r28
    1214:	ed 5b       	subi	r30, 0xBD	; 189
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	82 81       	ldd	r24, Z+2	; 0x02
    121e:	93 81       	ldd	r25, Z+3	; 0x03
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	4a ef       	ldi	r20, 0xFA	; 250
    1226:	54 e4       	ldi	r21, 0x44	; 68
    1228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	f8 01       	movw	r30, r16
    1232:	80 83       	st	Z, r24
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	a2 83       	std	Z+2, r26	; 0x02
    1238:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    123a:	fe 01       	movw	r30, r28
    123c:	ff 96       	adiw	r30, 0x3f	; 63
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e8       	ldi	r20, 0x80	; 128
    124c:	5f e3       	ldi	r21, 0x3F	; 63
    124e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1252:	88 23       	and	r24, r24
    1254:	2c f4       	brge	.+10     	; 0x1260 <EF_void_LCD_init+0x22c>
		__ticks = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9e af       	std	Y+62, r25	; 0x3e
    125c:	8d af       	std	Y+61, r24	; 0x3d
    125e:	46 c0       	rjmp	.+140    	; 0x12ec <EF_void_LCD_init+0x2b8>
	else if (__tmp > 65535)
    1260:	fe 01       	movw	r30, r28
    1262:	ff 96       	adiw	r30, 0x3f	; 63
    1264:	60 81       	ld	r22, Z
    1266:	71 81       	ldd	r23, Z+1	; 0x01
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	3f ef       	ldi	r19, 0xFF	; 255
    1270:	4f e7       	ldi	r20, 0x7F	; 127
    1272:	57 e4       	ldi	r21, 0x47	; 71
    1274:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1278:	18 16       	cp	r1, r24
    127a:	64 f5       	brge	.+88     	; 0x12d4 <EF_void_LCD_init+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127c:	fe 01       	movw	r30, r28
    127e:	ed 5b       	subi	r30, 0xBD	; 189
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e2       	ldi	r20, 0x20	; 32
    1290:	51 e4       	ldi	r21, 0x41	; 65
    1292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	bc 01       	movw	r22, r24
    129c:	cd 01       	movw	r24, r26
    129e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	9e af       	std	Y+62, r25	; 0x3e
    12a8:	8d af       	std	Y+61, r24	; 0x3d
    12aa:	0f c0       	rjmp	.+30     	; 0x12ca <EF_void_LCD_init+0x296>
    12ac:	88 ec       	ldi	r24, 0xC8	; 200
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9c af       	std	Y+60, r25	; 0x3c
    12b2:	8b af       	std	Y+59, r24	; 0x3b
    12b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    12b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <EF_void_LCD_init+0x284>
    12bc:	9c af       	std	Y+60, r25	; 0x3c
    12be:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    12c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	9e af       	std	Y+62, r25	; 0x3e
    12c8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    12cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	69 f7       	brne	.-38     	; 0x12ac <EF_void_LCD_init+0x278>
    12d2:	16 c0       	rjmp	.+44     	; 0x1300 <EF_void_LCD_init+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d4:	fe 01       	movw	r30, r28
    12d6:	ff 96       	adiw	r30, 0x3f	; 63
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	82 81       	ldd	r24, Z+2	; 0x02
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	9e af       	std	Y+62, r25	; 0x3e
    12ea:	8d af       	std	Y+61, r24	; 0x3d
    12ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    12ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    12f0:	9a af       	std	Y+58, r25	; 0x3a
    12f2:	89 af       	std	Y+57, r24	; 0x39
    12f4:	89 ad       	ldd	r24, Y+57	; 0x39
    12f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <EF_void_LCD_init+0x2c4>
    12fc:	9a af       	std	Y+58, r25	; 0x3a
    12fe:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_4BIT_Write_Init(0x30);
    1300:	80 e3       	ldi	r24, 0x30	; 48
    1302:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_4BIT_Write_Init>
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e2       	ldi	r26, 0x20	; 32
    130c:	b1 e4       	ldi	r27, 0x41	; 65
    130e:	8d ab       	std	Y+53, r24	; 0x35
    1310:	9e ab       	std	Y+54, r25	; 0x36
    1312:	af ab       	std	Y+55, r26	; 0x37
    1314:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1316:	6d a9       	ldd	r22, Y+53	; 0x35
    1318:	7e a9       	ldd	r23, Y+54	; 0x36
    131a:	8f a9       	ldd	r24, Y+55	; 0x37
    131c:	98 ad       	ldd	r25, Y+56	; 0x38
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	4a ef       	ldi	r20, 0xFA	; 250
    1324:	54 e4       	ldi	r21, 0x44	; 68
    1326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	89 ab       	std	Y+49, r24	; 0x31
    1330:	9a ab       	std	Y+50, r25	; 0x32
    1332:	ab ab       	std	Y+51, r26	; 0x33
    1334:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1336:	69 a9       	ldd	r22, Y+49	; 0x31
    1338:	7a a9       	ldd	r23, Y+50	; 0x32
    133a:	8b a9       	ldd	r24, Y+51	; 0x33
    133c:	9c a9       	ldd	r25, Y+52	; 0x34
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e8       	ldi	r20, 0x80	; 128
    1344:	5f e3       	ldi	r21, 0x3F	; 63
    1346:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    134a:	88 23       	and	r24, r24
    134c:	2c f4       	brge	.+10     	; 0x1358 <EF_void_LCD_init+0x324>
		__ticks = 1;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	98 ab       	std	Y+48, r25	; 0x30
    1354:	8f a7       	std	Y+47, r24	; 0x2f
    1356:	3f c0       	rjmp	.+126    	; 0x13d6 <EF_void_LCD_init+0x3a2>
	else if (__tmp > 65535)
    1358:	69 a9       	ldd	r22, Y+49	; 0x31
    135a:	7a a9       	ldd	r23, Y+50	; 0x32
    135c:	8b a9       	ldd	r24, Y+51	; 0x33
    135e:	9c a9       	ldd	r25, Y+52	; 0x34
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	3f ef       	ldi	r19, 0xFF	; 255
    1364:	4f e7       	ldi	r20, 0x7F	; 127
    1366:	57 e4       	ldi	r21, 0x47	; 71
    1368:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    136c:	18 16       	cp	r1, r24
    136e:	4c f5       	brge	.+82     	; 0x13c2 <EF_void_LCD_init+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1370:	6d a9       	ldd	r22, Y+53	; 0x35
    1372:	7e a9       	ldd	r23, Y+54	; 0x36
    1374:	8f a9       	ldd	r24, Y+55	; 0x37
    1376:	98 ad       	ldd	r25, Y+56	; 0x38
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e2       	ldi	r20, 0x20	; 32
    137e:	51 e4       	ldi	r21, 0x41	; 65
    1380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	bc 01       	movw	r22, r24
    138a:	cd 01       	movw	r24, r26
    138c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	98 ab       	std	Y+48, r25	; 0x30
    1396:	8f a7       	std	Y+47, r24	; 0x2f
    1398:	0f c0       	rjmp	.+30     	; 0x13b8 <EF_void_LCD_init+0x384>
    139a:	88 ec       	ldi	r24, 0xC8	; 200
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9e a7       	std	Y+46, r25	; 0x2e
    13a0:	8d a7       	std	Y+45, r24	; 0x2d
    13a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    13a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <EF_void_LCD_init+0x372>
    13aa:	9e a7       	std	Y+46, r25	; 0x2e
    13ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b0:	98 a9       	ldd	r25, Y+48	; 0x30
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	98 ab       	std	Y+48, r25	; 0x30
    13b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ba:	98 a9       	ldd	r25, Y+48	; 0x30
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	69 f7       	brne	.-38     	; 0x139a <EF_void_LCD_init+0x366>
    13c0:	14 c0       	rjmp	.+40     	; 0x13ea <EF_void_LCD_init+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c2:	69 a9       	ldd	r22, Y+49	; 0x31
    13c4:	7a a9       	ldd	r23, Y+50	; 0x32
    13c6:	8b a9       	ldd	r24, Y+51	; 0x33
    13c8:	9c a9       	ldd	r25, Y+52	; 0x34
    13ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	98 ab       	std	Y+48, r25	; 0x30
    13d4:	8f a7       	std	Y+47, r24	; 0x2f
    13d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13d8:	98 a9       	ldd	r25, Y+48	; 0x30
    13da:	9c a7       	std	Y+44, r25	; 0x2c
    13dc:	8b a7       	std	Y+43, r24	; 0x2b
    13de:	8b a5       	ldd	r24, Y+43	; 0x2b
    13e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <EF_void_LCD_init+0x3ae>
    13e6:	9c a7       	std	Y+44, r25	; 0x2c
    13e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_4BIT_Write_Init(0x20);
    13ea:	80 e2       	ldi	r24, 0x20	; 32
    13ec:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_4BIT_Write_Init>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	a0 e2       	ldi	r26, 0x20	; 32
    13f6:	b1 e4       	ldi	r27, 0x41	; 65
    13f8:	8f a3       	std	Y+39, r24	; 0x27
    13fa:	98 a7       	std	Y+40, r25	; 0x28
    13fc:	a9 a7       	std	Y+41, r26	; 0x29
    13fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1400:	6f a1       	ldd	r22, Y+39	; 0x27
    1402:	78 a5       	ldd	r23, Y+40	; 0x28
    1404:	89 a5       	ldd	r24, Y+41	; 0x29
    1406:	9a a5       	ldd	r25, Y+42	; 0x2a
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	4a ef       	ldi	r20, 0xFA	; 250
    140e:	54 e4       	ldi	r21, 0x44	; 68
    1410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	8b a3       	std	Y+35, r24	; 0x23
    141a:	9c a3       	std	Y+36, r25	; 0x24
    141c:	ad a3       	std	Y+37, r26	; 0x25
    141e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1420:	6b a1       	ldd	r22, Y+35	; 0x23
    1422:	7c a1       	ldd	r23, Y+36	; 0x24
    1424:	8d a1       	ldd	r24, Y+37	; 0x25
    1426:	9e a1       	ldd	r25, Y+38	; 0x26
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e8       	ldi	r20, 0x80	; 128
    142e:	5f e3       	ldi	r21, 0x3F	; 63
    1430:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1434:	88 23       	and	r24, r24
    1436:	2c f4       	brge	.+10     	; 0x1442 <EF_void_LCD_init+0x40e>
		__ticks = 1;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9a a3       	std	Y+34, r25	; 0x22
    143e:	89 a3       	std	Y+33, r24	; 0x21
    1440:	3f c0       	rjmp	.+126    	; 0x14c0 <EF_void_LCD_init+0x48c>
	else if (__tmp > 65535)
    1442:	6b a1       	ldd	r22, Y+35	; 0x23
    1444:	7c a1       	ldd	r23, Y+36	; 0x24
    1446:	8d a1       	ldd	r24, Y+37	; 0x25
    1448:	9e a1       	ldd	r25, Y+38	; 0x26
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	3f ef       	ldi	r19, 0xFF	; 255
    144e:	4f e7       	ldi	r20, 0x7F	; 127
    1450:	57 e4       	ldi	r21, 0x47	; 71
    1452:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1456:	18 16       	cp	r1, r24
    1458:	4c f5       	brge	.+82     	; 0x14ac <EF_void_LCD_init+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145a:	6f a1       	ldd	r22, Y+39	; 0x27
    145c:	78 a5       	ldd	r23, Y+40	; 0x28
    145e:	89 a5       	ldd	r24, Y+41	; 0x29
    1460:	9a a5       	ldd	r25, Y+42	; 0x2a
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e2       	ldi	r20, 0x20	; 32
    1468:	51 e4       	ldi	r21, 0x41	; 65
    146a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	bc 01       	movw	r22, r24
    1474:	cd 01       	movw	r24, r26
    1476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	9a a3       	std	Y+34, r25	; 0x22
    1480:	89 a3       	std	Y+33, r24	; 0x21
    1482:	0f c0       	rjmp	.+30     	; 0x14a2 <EF_void_LCD_init+0x46e>
    1484:	88 ec       	ldi	r24, 0xC8	; 200
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	98 a3       	std	Y+32, r25	; 0x20
    148a:	8f 8f       	std	Y+31, r24	; 0x1f
    148c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    148e:	98 a1       	ldd	r25, Y+32	; 0x20
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	f1 f7       	brne	.-4      	; 0x1490 <EF_void_LCD_init+0x45c>
    1494:	98 a3       	std	Y+32, r25	; 0x20
    1496:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1498:	89 a1       	ldd	r24, Y+33	; 0x21
    149a:	9a a1       	ldd	r25, Y+34	; 0x22
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	9a a3       	std	Y+34, r25	; 0x22
    14a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a2:	89 a1       	ldd	r24, Y+33	; 0x21
    14a4:	9a a1       	ldd	r25, Y+34	; 0x22
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	69 f7       	brne	.-38     	; 0x1484 <EF_void_LCD_init+0x450>
    14aa:	14 c0       	rjmp	.+40     	; 0x14d4 <EF_void_LCD_init+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ac:	6b a1       	ldd	r22, Y+35	; 0x23
    14ae:	7c a1       	ldd	r23, Y+36	; 0x24
    14b0:	8d a1       	ldd	r24, Y+37	; 0x25
    14b2:	9e a1       	ldd	r25, Y+38	; 0x26
    14b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	9a a3       	std	Y+34, r25	; 0x22
    14be:	89 a3       	std	Y+33, r24	; 0x21
    14c0:	89 a1       	ldd	r24, Y+33	; 0x21
    14c2:	9a a1       	ldd	r25, Y+34	; 0x22
    14c4:	9e 8f       	std	Y+30, r25	; 0x1e
    14c6:	8d 8f       	std	Y+29, r24	; 0x1d
    14c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <EF_void_LCD_init+0x498>
    14d0:	9e 8f       	std	Y+30, r25	; 0x1e
    14d2:	8d 8f       	std	Y+29, r24	; 0x1d
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	a0 e2       	ldi	r26, 0x20	; 32
    14da:	b1 e4       	ldi	r27, 0x41	; 65
    14dc:	89 8f       	std	Y+25, r24	; 0x19
    14de:	9a 8f       	std	Y+26, r25	; 0x1a
    14e0:	ab 8f       	std	Y+27, r26	; 0x1b
    14e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e4:	69 8d       	ldd	r22, Y+25	; 0x19
    14e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4a ef       	ldi	r20, 0xFA	; 250
    14f2:	54 e4       	ldi	r21, 0x44	; 68
    14f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8d 8b       	std	Y+21, r24	; 0x15
    14fe:	9e 8b       	std	Y+22, r25	; 0x16
    1500:	af 8b       	std	Y+23, r26	; 0x17
    1502:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1504:	6d 89       	ldd	r22, Y+21	; 0x15
    1506:	7e 89       	ldd	r23, Y+22	; 0x16
    1508:	8f 89       	ldd	r24, Y+23	; 0x17
    150a:	98 8d       	ldd	r25, Y+24	; 0x18
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	5f e3       	ldi	r21, 0x3F	; 63
    1514:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1518:	88 23       	and	r24, r24
    151a:	2c f4       	brge	.+10     	; 0x1526 <EF_void_LCD_init+0x4f2>
		__ticks = 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9c 8b       	std	Y+20, r25	; 0x14
    1522:	8b 8b       	std	Y+19, r24	; 0x13
    1524:	3f c0       	rjmp	.+126    	; 0x15a4 <EF_void_LCD_init+0x570>
	else if (__tmp > 65535)
    1526:	6d 89       	ldd	r22, Y+21	; 0x15
    1528:	7e 89       	ldd	r23, Y+22	; 0x16
    152a:	8f 89       	ldd	r24, Y+23	; 0x17
    152c:	98 8d       	ldd	r25, Y+24	; 0x18
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	4f e7       	ldi	r20, 0x7F	; 127
    1534:	57 e4       	ldi	r21, 0x47	; 71
    1536:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    153a:	18 16       	cp	r1, r24
    153c:	4c f5       	brge	.+82     	; 0x1590 <EF_void_LCD_init+0x55c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153e:	69 8d       	ldd	r22, Y+25	; 0x19
    1540:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1542:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1544:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e2       	ldi	r20, 0x20	; 32
    154c:	51 e4       	ldi	r21, 0x41	; 65
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	bc 01       	movw	r22, r24
    1558:	cd 01       	movw	r24, r26
    155a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9c 8b       	std	Y+20, r25	; 0x14
    1564:	8b 8b       	std	Y+19, r24	; 0x13
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <EF_void_LCD_init+0x552>
    1568:	88 ec       	ldi	r24, 0xC8	; 200
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9a 8b       	std	Y+18, r25	; 0x12
    156e:	89 8b       	std	Y+17, r24	; 0x11
    1570:	89 89       	ldd	r24, Y+17	; 0x11
    1572:	9a 89       	ldd	r25, Y+18	; 0x12
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <EF_void_LCD_init+0x540>
    1578:	9a 8b       	std	Y+18, r25	; 0x12
    157a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157c:	8b 89       	ldd	r24, Y+19	; 0x13
    157e:	9c 89       	ldd	r25, Y+20	; 0x14
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	9c 8b       	std	Y+20, r25	; 0x14
    1584:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1586:	8b 89       	ldd	r24, Y+19	; 0x13
    1588:	9c 89       	ldd	r25, Y+20	; 0x14
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	69 f7       	brne	.-38     	; 0x1568 <EF_void_LCD_init+0x534>
    158e:	14 c0       	rjmp	.+40     	; 0x15b8 <EF_void_LCD_init+0x584>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1590:	6d 89       	ldd	r22, Y+21	; 0x15
    1592:	7e 89       	ldd	r23, Y+22	; 0x16
    1594:	8f 89       	ldd	r24, Y+23	; 0x17
    1596:	98 8d       	ldd	r25, Y+24	; 0x18
    1598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	9c 8b       	std	Y+20, r25	; 0x14
    15a2:	8b 8b       	std	Y+19, r24	; 0x13
    15a4:	8b 89       	ldd	r24, Y+19	; 0x13
    15a6:	9c 89       	ldd	r25, Y+20	; 0x14
    15a8:	98 8b       	std	Y+16, r25	; 0x10
    15aa:	8f 87       	std	Y+15, r24	; 0x0f
    15ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ae:	98 89       	ldd	r25, Y+16	; 0x10
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <EF_void_LCD_init+0x57c>
    15b4:	98 8b       	std	Y+16, r25	; 0x10
    15b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	_delay_ms(10);
	EF_void_LCD_send_command(0x28);            /* Command ..0x28---> 4-bit mode - 2 line - 5x7 font */
    15b8:	88 e2       	ldi	r24, 0x28	; 40
    15ba:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x0C);            /* Command ..0x0C---> Display no cursor - no blink */
    15be:	8c e0       	ldi	r24, 0x0C	; 12
    15c0:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x06);            /* Command ..0x06---> Automatic Increment - No Display shift */
    15c4:	86 e0       	ldi	r24, 0x06	; 6
    15c6:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <EF_void_LCD_send_command>
	EF_void_LCD_send_command(0x80);            /* Command ..0x80---> Address DDRAM with 0 offset 80h */
    15ca:	80 e8       	ldi	r24, 0x80	; 128
    15cc:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <EF_void_LCD_send_command>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a0 ea       	ldi	r26, 0xA0	; 160
    15d6:	b1 e4       	ldi	r27, 0x41	; 65
    15d8:	8b 87       	std	Y+11, r24	; 0x0b
    15da:	9c 87       	std	Y+12, r25	; 0x0c
    15dc:	ad 87       	std	Y+13, r26	; 0x0d
    15de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	4a ef       	ldi	r20, 0xFA	; 250
    15ee:	54 e4       	ldi	r21, 0x44	; 68
    15f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	8f 83       	std	Y+7, r24	; 0x07
    15fa:	98 87       	std	Y+8, r25	; 0x08
    15fc:	a9 87       	std	Y+9, r26	; 0x09
    15fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1600:	6f 81       	ldd	r22, Y+7	; 0x07
    1602:	78 85       	ldd	r23, Y+8	; 0x08
    1604:	89 85       	ldd	r24, Y+9	; 0x09
    1606:	9a 85       	ldd	r25, Y+10	; 0x0a
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e8       	ldi	r20, 0x80	; 128
    160e:	5f e3       	ldi	r21, 0x3F	; 63
    1610:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1614:	88 23       	and	r24, r24
    1616:	2c f4       	brge	.+10     	; 0x1622 <EF_void_LCD_init+0x5ee>
		__ticks = 1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	9e 83       	std	Y+6, r25	; 0x06
    161e:	8d 83       	std	Y+5, r24	; 0x05
    1620:	3f c0       	rjmp	.+126    	; 0x16a0 <EF_void_LCD_init+0x66c>
	else if (__tmp > 65535)
    1622:	6f 81       	ldd	r22, Y+7	; 0x07
    1624:	78 85       	ldd	r23, Y+8	; 0x08
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	9a 85       	ldd	r25, Y+10	; 0x0a
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	3f ef       	ldi	r19, 0xFF	; 255
    162e:	4f e7       	ldi	r20, 0x7F	; 127
    1630:	57 e4       	ldi	r21, 0x47	; 71
    1632:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1636:	18 16       	cp	r1, r24
    1638:	4c f5       	brge	.+82     	; 0x168c <EF_void_LCD_init+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163a:	6b 85       	ldd	r22, Y+11	; 0x0b
    163c:	7c 85       	ldd	r23, Y+12	; 0x0c
    163e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1640:	9e 85       	ldd	r25, Y+14	; 0x0e
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e2       	ldi	r20, 0x20	; 32
    1648:	51 e4       	ldi	r21, 0x41	; 65
    164a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	bc 01       	movw	r22, r24
    1654:	cd 01       	movw	r24, r26
    1656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9e 83       	std	Y+6, r25	; 0x06
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	0f c0       	rjmp	.+30     	; 0x1682 <EF_void_LCD_init+0x64e>
    1664:	88 ec       	ldi	r24, 0xC8	; 200
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9c 83       	std	Y+4, r25	; 0x04
    166a:	8b 83       	std	Y+3, r24	; 0x03
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <EF_void_LCD_init+0x63c>
    1674:	9c 83       	std	Y+4, r25	; 0x04
    1676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	9e 81       	ldd	r25, Y+6	; 0x06
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	69 f7       	brne	.-38     	; 0x1664 <EF_void_LCD_init+0x630>
    168a:	14 c0       	rjmp	.+40     	; 0x16b4 <EF_void_LCD_init+0x680>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168c:	6f 81       	ldd	r22, Y+7	; 0x07
    168e:	78 85       	ldd	r23, Y+8	; 0x08
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	9a 85       	ldd	r25, Y+10	; 0x0a
    1694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	9e 83       	std	Y+6, r25	; 0x06
    169e:	8d 83       	std	Y+5, r24	; 0x05
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	9a 81       	ldd	r25, Y+2	; 0x02
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <EF_void_LCD_init+0x678>
    16b0:	9a 83       	std	Y+2, r25	; 0x02
    16b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

	EF_void_LCD_Clear_Screen();
    16b4:	0e 94 75 13 	call	0x26ea	; 0x26ea <EF_void_LCD_Clear_Screen>

}
    16b8:	cc 5a       	subi	r28, 0xAC	; 172
    16ba:	df 4f       	sbci	r29, 0xFF	; 255
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	08 95       	ret

000016d0 <EF_void_LCD_send_command>:
 * PARAMETERS  : U8_t cmnd:  Command User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_send_command(U8_t cmnd)
{
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	c9 54       	subi	r28, 0x49	; 73
    16de:	d0 40       	sbci	r29, 0x00	; 0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	fe 01       	movw	r30, r28
    16ec:	e7 5b       	subi	r30, 0xB7	; 183
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 83       	st	Z, r24
	/*RS and RW will be LOW */

	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
    16f2:	a5 e3       	ldi	r26, 0x35	; 53
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e5 e3       	ldi	r30, 0x35	; 53
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	8f 7b       	andi	r24, 0xBF	; 191
    16fe:	8c 93       	st	X, r24
	/* output high nibble first , "Generic method", attach data by bit
	 * first: put 0 in each pin then if the corresponding bit =1 , put 1*/
	/* output high nibble first */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    1700:	a8 e3       	ldi	r26, 0x38	; 56
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e8 e3       	ldi	r30, 0x38	; 56
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	8f 77       	andi	r24, 0x7F	; 127
    170c:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    170e:	a8 e3       	ldi	r26, 0x38	; 56
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e8 e3       	ldi	r30, 0x38	; 56
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	8f 7b       	andi	r24, 0xBF	; 191
    171a:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    171c:	a8 e3       	ldi	r26, 0x38	; 56
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e8 e3       	ldi	r30, 0x38	; 56
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	8f 7d       	andi	r24, 0xDF	; 223
    1728:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    172a:	a8 e3       	ldi	r26, 0x38	; 56
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e8 e3       	ldi	r30, 0x38	; 56
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	8f 7e       	andi	r24, 0xEF	; 239
    1736:	8c 93       	st	X, r24

	if(cmnd & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    1738:	fe 01       	movw	r30, r28
    173a:	e7 5b       	subi	r30, 0xB7	; 183
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 81       	ld	r24, Z
    1740:	88 23       	and	r24, r24
    1742:	3c f4       	brge	.+14     	; 0x1752 <EF_void_LCD_send_command+0x82>
    1744:	a8 e3       	ldi	r26, 0x38	; 56
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e8 e3       	ldi	r30, 0x38	; 56
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	80 68       	ori	r24, 0x80	; 128
    1750:	8c 93       	st	X, r24
	if(cmnd & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    1752:	fe 01       	movw	r30, r28
    1754:	e7 5b       	subi	r30, 0xB7	; 183
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	80 81       	ld	r24, Z
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	80 74       	andi	r24, 0x40	; 64
    1760:	90 70       	andi	r25, 0x00	; 0
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	39 f0       	breq	.+14     	; 0x1774 <EF_void_LCD_send_command+0xa4>
    1766:	a8 e3       	ldi	r26, 0x38	; 56
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e8 e3       	ldi	r30, 0x38	; 56
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	80 64       	ori	r24, 0x40	; 64
    1772:	8c 93       	st	X, r24
	if(cmnd & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    1774:	fe 01       	movw	r30, r28
    1776:	e7 5b       	subi	r30, 0xB7	; 183
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	80 81       	ld	r24, Z
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	80 72       	andi	r24, 0x20	; 32
    1782:	90 70       	andi	r25, 0x00	; 0
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	39 f0       	breq	.+14     	; 0x1796 <EF_void_LCD_send_command+0xc6>
    1788:	a8 e3       	ldi	r26, 0x38	; 56
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e8 e3       	ldi	r30, 0x38	; 56
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	80 62       	ori	r24, 0x20	; 32
    1794:	8c 93       	st	X, r24
	if(cmnd & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    1796:	fe 01       	movw	r30, r28
    1798:	e7 5b       	subi	r30, 0xB7	; 183
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	80 81       	ld	r24, Z
    179e:	88 2f       	mov	r24, r24
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	80 71       	andi	r24, 0x10	; 16
    17a4:	90 70       	andi	r25, 0x00	; 0
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	39 f0       	breq	.+14     	; 0x17b8 <EF_void_LCD_send_command+0xe8>
    17aa:	a8 e3       	ldi	r26, 0x38	; 56
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e8 e3       	ldi	r30, 0x38	; 56
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	80 61       	ori	r24, 0x10	; 16
    17b6:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD*/
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    17b8:	a5 e3       	ldi	r26, 0x35	; 53
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e5 e3       	ldi	r30, 0x35	; 53
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	80 68       	ori	r24, 0x80	; 128
    17c4:	8c 93       	st	X, r24
    17c6:	fe 01       	movw	r30, r28
    17c8:	eb 5b       	subi	r30, 0xBB	; 187
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a0 e0       	ldi	r26, 0x00	; 0
    17d2:	b0 e4       	ldi	r27, 0x40	; 64
    17d4:	80 83       	st	Z, r24
    17d6:	91 83       	std	Z+1, r25	; 0x01
    17d8:	a2 83       	std	Z+2, r26	; 0x02
    17da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17dc:	8e 01       	movw	r16, r28
    17de:	0f 5b       	subi	r16, 0xBF	; 191
    17e0:	1f 4f       	sbci	r17, 0xFF	; 255
    17e2:	fe 01       	movw	r30, r28
    17e4:	eb 5b       	subi	r30, 0xBB	; 187
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	60 81       	ld	r22, Z
    17ea:	71 81       	ldd	r23, Z+1	; 0x01
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	2b ea       	ldi	r18, 0xAB	; 171
    17f2:	3a ea       	ldi	r19, 0xAA	; 170
    17f4:	4a e2       	ldi	r20, 0x2A	; 42
    17f6:	50 e4       	ldi	r21, 0x40	; 64
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	f8 01       	movw	r30, r16
    1802:	80 83       	st	Z, r24
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	a2 83       	std	Z+2, r26	; 0x02
    1808:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    180a:	fe 01       	movw	r30, r28
    180c:	ef 5b       	subi	r30, 0xBF	; 191
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	93 81       	ldd	r25, Z+3	; 0x03
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e8       	ldi	r20, 0x80	; 128
    181e:	5f e3       	ldi	r21, 0x3F	; 63
    1820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1824:	88 23       	and	r24, r24
    1826:	34 f4       	brge	.+12     	; 0x1834 <EF_void_LCD_send_command+0x164>
		__ticks = 1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	fe 01       	movw	r30, r28
    182c:	e0 5c       	subi	r30, 0xC0	; 192
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 83       	st	Z, r24
    1832:	9d c0       	rjmp	.+314    	; 0x196e <EF_void_LCD_send_command+0x29e>
	else if (__tmp > 255)
    1834:	fe 01       	movw	r30, r28
    1836:	ef 5b       	subi	r30, 0xBF	; 191
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	4f e7       	ldi	r20, 0x7F	; 127
    1848:	53 e4       	ldi	r21, 0x43	; 67
    184a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    184e:	18 16       	cp	r1, r24
    1850:	0c f0       	brlt	.+2      	; 0x1854 <EF_void_LCD_send_command+0x184>
    1852:	7e c0       	rjmp	.+252    	; 0x1950 <EF_void_LCD_send_command+0x280>
	{
		_delay_ms(__us / 1000.0);
    1854:	fe 01       	movw	r30, r28
    1856:	eb 5b       	subi	r30, 0xBB	; 187
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	60 81       	ld	r22, Z
    185c:	71 81       	ldd	r23, Z+1	; 0x01
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	4a e7       	ldi	r20, 0x7A	; 122
    1868:	54 e4       	ldi	r21, 0x44	; 68
    186a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	8c af       	std	Y+60, r24	; 0x3c
    1874:	9d af       	std	Y+61, r25	; 0x3d
    1876:	ae af       	std	Y+62, r26	; 0x3e
    1878:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187a:	6c ad       	ldd	r22, Y+60	; 0x3c
    187c:	7d ad       	ldd	r23, Y+61	; 0x3d
    187e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1880:	9f ad       	ldd	r25, Y+63	; 0x3f
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	4a ef       	ldi	r20, 0xFA	; 250
    1888:	54 e4       	ldi	r21, 0x44	; 68
    188a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	88 af       	std	Y+56, r24	; 0x38
    1894:	99 af       	std	Y+57, r25	; 0x39
    1896:	aa af       	std	Y+58, r26	; 0x3a
    1898:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    189a:	68 ad       	ldd	r22, Y+56	; 0x38
    189c:	79 ad       	ldd	r23, Y+57	; 0x39
    189e:	8a ad       	ldd	r24, Y+58	; 0x3a
    18a0:	9b ad       	ldd	r25, Y+59	; 0x3b
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e8       	ldi	r20, 0x80	; 128
    18a8:	5f e3       	ldi	r21, 0x3F	; 63
    18aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ae:	88 23       	and	r24, r24
    18b0:	2c f4       	brge	.+10     	; 0x18bc <EF_void_LCD_send_command+0x1ec>
		__ticks = 1;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	9f ab       	std	Y+55, r25	; 0x37
    18b8:	8e ab       	std	Y+54, r24	; 0x36
    18ba:	3f c0       	rjmp	.+126    	; 0x193a <EF_void_LCD_send_command+0x26a>
	else if (__tmp > 65535)
    18bc:	68 ad       	ldd	r22, Y+56	; 0x38
    18be:	79 ad       	ldd	r23, Y+57	; 0x39
    18c0:	8a ad       	ldd	r24, Y+58	; 0x3a
    18c2:	9b ad       	ldd	r25, Y+59	; 0x3b
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	3f ef       	ldi	r19, 0xFF	; 255
    18c8:	4f e7       	ldi	r20, 0x7F	; 127
    18ca:	57 e4       	ldi	r21, 0x47	; 71
    18cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18d0:	18 16       	cp	r1, r24
    18d2:	4c f5       	brge	.+82     	; 0x1926 <EF_void_LCD_send_command+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d4:	6c ad       	ldd	r22, Y+60	; 0x3c
    18d6:	7d ad       	ldd	r23, Y+61	; 0x3d
    18d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    18da:	9f ad       	ldd	r25, Y+63	; 0x3f
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e2       	ldi	r20, 0x20	; 32
    18e2:	51 e4       	ldi	r21, 0x41	; 65
    18e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	bc 01       	movw	r22, r24
    18ee:	cd 01       	movw	r24, r26
    18f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	9f ab       	std	Y+55, r25	; 0x37
    18fa:	8e ab       	std	Y+54, r24	; 0x36
    18fc:	0f c0       	rjmp	.+30     	; 0x191c <EF_void_LCD_send_command+0x24c>
    18fe:	88 ec       	ldi	r24, 0xC8	; 200
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	9d ab       	std	Y+53, r25	; 0x35
    1904:	8c ab       	std	Y+52, r24	; 0x34
    1906:	8c a9       	ldd	r24, Y+52	; 0x34
    1908:	9d a9       	ldd	r25, Y+53	; 0x35
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	f1 f7       	brne	.-4      	; 0x190a <EF_void_LCD_send_command+0x23a>
    190e:	9d ab       	std	Y+53, r25	; 0x35
    1910:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1912:	8e a9       	ldd	r24, Y+54	; 0x36
    1914:	9f a9       	ldd	r25, Y+55	; 0x37
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	9f ab       	std	Y+55, r25	; 0x37
    191a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191c:	8e a9       	ldd	r24, Y+54	; 0x36
    191e:	9f a9       	ldd	r25, Y+55	; 0x37
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	69 f7       	brne	.-38     	; 0x18fe <EF_void_LCD_send_command+0x22e>
    1924:	2d c0       	rjmp	.+90     	; 0x1980 <EF_void_LCD_send_command+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1926:	68 ad       	ldd	r22, Y+56	; 0x38
    1928:	79 ad       	ldd	r23, Y+57	; 0x39
    192a:	8a ad       	ldd	r24, Y+58	; 0x3a
    192c:	9b ad       	ldd	r25, Y+59	; 0x3b
    192e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9f ab       	std	Y+55, r25	; 0x37
    1938:	8e ab       	std	Y+54, r24	; 0x36
    193a:	8e a9       	ldd	r24, Y+54	; 0x36
    193c:	9f a9       	ldd	r25, Y+55	; 0x37
    193e:	9b ab       	std	Y+51, r25	; 0x33
    1940:	8a ab       	std	Y+50, r24	; 0x32
    1942:	8a a9       	ldd	r24, Y+50	; 0x32
    1944:	9b a9       	ldd	r25, Y+51	; 0x33
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <EF_void_LCD_send_command+0x276>
    194a:	9b ab       	std	Y+51, r25	; 0x33
    194c:	8a ab       	std	Y+50, r24	; 0x32
    194e:	18 c0       	rjmp	.+48     	; 0x1980 <EF_void_LCD_send_command+0x2b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1950:	fe 01       	movw	r30, r28
    1952:	ef 5b       	subi	r30, 0xBF	; 191
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	60 81       	ld	r22, Z
    1958:	71 81       	ldd	r23, Z+1	; 0x01
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	fe 01       	movw	r30, r28
    1968:	e0 5c       	subi	r30, 0xC0	; 192
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	80 83       	st	Z, r24
    196e:	fe 01       	movw	r30, r28
    1970:	e0 5c       	subi	r30, 0xC0	; 192
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	80 81       	ld	r24, Z
    1976:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1978:	89 a9       	ldd	r24, Y+49	; 0x31
    197a:	8a 95       	dec	r24
    197c:	f1 f7       	brne	.-4      	; 0x197a <EF_void_LCD_send_command+0x2aa>
    197e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    1980:	a5 e3       	ldi	r26, 0x35	; 53
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e5 e3       	ldi	r30, 0x35	; 53
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	8f 77       	andi	r24, 0x7F	; 127
    198c:	8c 93       	st	X, r24

	/* output low nibble */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    198e:	a8 e3       	ldi	r26, 0x38	; 56
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e8 e3       	ldi	r30, 0x38	; 56
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	8f 77       	andi	r24, 0x7F	; 127
    199a:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    199c:	a8 e3       	ldi	r26, 0x38	; 56
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e8 e3       	ldi	r30, 0x38	; 56
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	8f 7b       	andi	r24, 0xBF	; 191
    19a8:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    19aa:	a8 e3       	ldi	r26, 0x38	; 56
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e8 e3       	ldi	r30, 0x38	; 56
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	8f 7d       	andi	r24, 0xDF	; 223
    19b6:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    19b8:	a8 e3       	ldi	r26, 0x38	; 56
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e8 e3       	ldi	r30, 0x38	; 56
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	8f 7e       	andi	r24, 0xEF	; 239
    19c4:	8c 93       	st	X, r24
	if(cmnd & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    19c6:	fe 01       	movw	r30, r28
    19c8:	e7 5b       	subi	r30, 0xB7	; 183
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	80 81       	ld	r24, Z
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	88 70       	andi	r24, 0x08	; 8
    19d4:	90 70       	andi	r25, 0x00	; 0
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	39 f0       	breq	.+14     	; 0x19e8 <EF_void_LCD_send_command+0x318>
    19da:	a8 e3       	ldi	r26, 0x38	; 56
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e8 e3       	ldi	r30, 0x38	; 56
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	80 68       	ori	r24, 0x80	; 128
    19e6:	8c 93       	st	X, r24
	if(cmnd & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    19e8:	fe 01       	movw	r30, r28
    19ea:	e7 5b       	subi	r30, 0xB7	; 183
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 81       	ld	r24, Z
    19f0:	88 2f       	mov	r24, r24
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	84 70       	andi	r24, 0x04	; 4
    19f6:	90 70       	andi	r25, 0x00	; 0
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	39 f0       	breq	.+14     	; 0x1a0a <EF_void_LCD_send_command+0x33a>
    19fc:	a8 e3       	ldi	r26, 0x38	; 56
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e8 e3       	ldi	r30, 0x38	; 56
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	80 64       	ori	r24, 0x40	; 64
    1a08:	8c 93       	st	X, r24
	if(cmnd & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e7 5b       	subi	r30, 0xB7	; 183
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	82 70       	andi	r24, 0x02	; 2
    1a18:	90 70       	andi	r25, 0x00	; 0
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	39 f0       	breq	.+14     	; 0x1a2c <EF_void_LCD_send_command+0x35c>
    1a1e:	a8 e3       	ldi	r26, 0x38	; 56
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e8 e3       	ldi	r30, 0x38	; 56
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	80 62       	ori	r24, 0x20	; 32
    1a2a:	8c 93       	st	X, r24
	if(cmnd & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	e7 5b       	subi	r30, 0xB7	; 183
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	80 81       	ld	r24, Z
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	81 70       	andi	r24, 0x01	; 1
    1a3a:	90 70       	andi	r25, 0x00	; 0
    1a3c:	88 23       	and	r24, r24
    1a3e:	39 f0       	breq	.+14     	; 0x1a4e <EF_void_LCD_send_command+0x37e>
    1a40:	a8 e3       	ldi	r26, 0x38	; 56
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e8 e3       	ldi	r30, 0x38	; 56
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 61       	ori	r24, 0x10	; 16
    1a4c:	8c 93       	st	X, r24
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    1a4e:	a5 e3       	ldi	r26, 0x35	; 53
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e5 e3       	ldi	r30, 0x35	; 53
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	80 68       	ori	r24, 0x80	; 128
    1a5a:	8c 93       	st	X, r24
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 e0       	ldi	r26, 0x00	; 0
    1a62:	b0 e4       	ldi	r27, 0x40	; 64
    1a64:	8d a7       	std	Y+45, r24	; 0x2d
    1a66:	9e a7       	std	Y+46, r25	; 0x2e
    1a68:	af a7       	std	Y+47, r26	; 0x2f
    1a6a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a6c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a6e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a72:	98 a9       	ldd	r25, Y+48	; 0x30
    1a74:	2b ea       	ldi	r18, 0xAB	; 171
    1a76:	3a ea       	ldi	r19, 0xAA	; 170
    1a78:	4a e2       	ldi	r20, 0x2A	; 42
    1a7a:	50 e4       	ldi	r21, 0x40	; 64
    1a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	89 a7       	std	Y+41, r24	; 0x29
    1a86:	9a a7       	std	Y+42, r25	; 0x2a
    1a88:	ab a7       	std	Y+43, r26	; 0x2b
    1a8a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1a8c:	69 a5       	ldd	r22, Y+41	; 0x29
    1a8e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a90:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a92:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e8       	ldi	r20, 0x80	; 128
    1a9a:	5f e3       	ldi	r21, 0x3F	; 63
    1a9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aa0:	88 23       	and	r24, r24
    1aa2:	1c f4       	brge	.+6      	; 0x1aaa <EF_void_LCD_send_command+0x3da>
		__ticks = 1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	88 a7       	std	Y+40, r24	; 0x28
    1aa8:	91 c0       	rjmp	.+290    	; 0x1bcc <EF_void_LCD_send_command+0x4fc>
	else if (__tmp > 255)
    1aaa:	69 a5       	ldd	r22, Y+41	; 0x29
    1aac:	7a a5       	ldd	r23, Y+42	; 0x2a
    1aae:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ab0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	4f e7       	ldi	r20, 0x7F	; 127
    1ab8:	53 e4       	ldi	r21, 0x43	; 67
    1aba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1abe:	18 16       	cp	r1, r24
    1ac0:	0c f0       	brlt	.+2      	; 0x1ac4 <EF_void_LCD_send_command+0x3f4>
    1ac2:	7b c0       	rjmp	.+246    	; 0x1bba <EF_void_LCD_send_command+0x4ea>
	{
		_delay_ms(__us / 1000.0);
    1ac4:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ac6:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aca:	98 a9       	ldd	r25, Y+48	; 0x30
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	4a e7       	ldi	r20, 0x7A	; 122
    1ad2:	54 e4       	ldi	r21, 0x44	; 68
    1ad4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	8c a3       	std	Y+36, r24	; 0x24
    1ade:	9d a3       	std	Y+37, r25	; 0x25
    1ae0:	ae a3       	std	Y+38, r26	; 0x26
    1ae2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae4:	6c a1       	ldd	r22, Y+36	; 0x24
    1ae6:	7d a1       	ldd	r23, Y+37	; 0x25
    1ae8:	8e a1       	ldd	r24, Y+38	; 0x26
    1aea:	9f a1       	ldd	r25, Y+39	; 0x27
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	4a ef       	ldi	r20, 0xFA	; 250
    1af2:	54 e4       	ldi	r21, 0x44	; 68
    1af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	88 a3       	std	Y+32, r24	; 0x20
    1afe:	99 a3       	std	Y+33, r25	; 0x21
    1b00:	aa a3       	std	Y+34, r26	; 0x22
    1b02:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1b04:	68 a1       	ldd	r22, Y+32	; 0x20
    1b06:	79 a1       	ldd	r23, Y+33	; 0x21
    1b08:	8a a1       	ldd	r24, Y+34	; 0x22
    1b0a:	9b a1       	ldd	r25, Y+35	; 0x23
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e8       	ldi	r20, 0x80	; 128
    1b12:	5f e3       	ldi	r21, 0x3F	; 63
    1b14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b18:	88 23       	and	r24, r24
    1b1a:	2c f4       	brge	.+10     	; 0x1b26 <EF_void_LCD_send_command+0x456>
		__ticks = 1;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	9f 8f       	std	Y+31, r25	; 0x1f
    1b22:	8e 8f       	std	Y+30, r24	; 0x1e
    1b24:	3f c0       	rjmp	.+126    	; 0x1ba4 <EF_void_LCD_send_command+0x4d4>
	else if (__tmp > 65535)
    1b26:	68 a1       	ldd	r22, Y+32	; 0x20
    1b28:	79 a1       	ldd	r23, Y+33	; 0x21
    1b2a:	8a a1       	ldd	r24, Y+34	; 0x22
    1b2c:	9b a1       	ldd	r25, Y+35	; 0x23
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	3f ef       	ldi	r19, 0xFF	; 255
    1b32:	4f e7       	ldi	r20, 0x7F	; 127
    1b34:	57 e4       	ldi	r21, 0x47	; 71
    1b36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b3a:	18 16       	cp	r1, r24
    1b3c:	4c f5       	brge	.+82     	; 0x1b90 <EF_void_LCD_send_command+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3e:	6c a1       	ldd	r22, Y+36	; 0x24
    1b40:	7d a1       	ldd	r23, Y+37	; 0x25
    1b42:	8e a1       	ldd	r24, Y+38	; 0x26
    1b44:	9f a1       	ldd	r25, Y+39	; 0x27
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e2       	ldi	r20, 0x20	; 32
    1b4c:	51 e4       	ldi	r21, 0x41	; 65
    1b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	bc 01       	movw	r22, r24
    1b58:	cd 01       	movw	r24, r26
    1b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9f 8f       	std	Y+31, r25	; 0x1f
    1b64:	8e 8f       	std	Y+30, r24	; 0x1e
    1b66:	0f c0       	rjmp	.+30     	; 0x1b86 <EF_void_LCD_send_command+0x4b6>
    1b68:	88 ec       	ldi	r24, 0xC8	; 200
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	9d 8f       	std	Y+29, r25	; 0x1d
    1b6e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b70:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b72:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <EF_void_LCD_send_command+0x4a4>
    1b78:	9d 8f       	std	Y+29, r25	; 0x1d
    1b7a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b7e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	9f 8f       	std	Y+31, r25	; 0x1f
    1b84:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b88:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	69 f7       	brne	.-38     	; 0x1b68 <EF_void_LCD_send_command+0x498>
    1b8e:	24 c0       	rjmp	.+72     	; 0x1bd8 <EF_void_LCD_send_command+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b90:	68 a1       	ldd	r22, Y+32	; 0x20
    1b92:	79 a1       	ldd	r23, Y+33	; 0x21
    1b94:	8a a1       	ldd	r24, Y+34	; 0x22
    1b96:	9b a1       	ldd	r25, Y+35	; 0x23
    1b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	9f 8f       	std	Y+31, r25	; 0x1f
    1ba2:	8e 8f       	std	Y+30, r24	; 0x1e
    1ba4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ba6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ba8:	9b 8f       	std	Y+27, r25	; 0x1b
    1baa:	8a 8f       	std	Y+26, r24	; 0x1a
    1bac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bae:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <EF_void_LCD_send_command+0x4e0>
    1bb4:	9b 8f       	std	Y+27, r25	; 0x1b
    1bb6:	8a 8f       	std	Y+26, r24	; 0x1a
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <EF_void_LCD_send_command+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bba:	69 a5       	ldd	r22, Y+41	; 0x29
    1bbc:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bbe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bc0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	88 a7       	std	Y+40, r24	; 0x28
    1bcc:	88 a5       	ldd	r24, Y+40	; 0x28
    1bce:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bd0:	89 8d       	ldd	r24, Y+25	; 0x19
    1bd2:	8a 95       	dec	r24
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <EF_void_LCD_send_command+0x502>
    1bd6:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    1bd8:	a5 e3       	ldi	r26, 0x35	; 53
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e5 e3       	ldi	r30, 0x35	; 53
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	8f 77       	andi	r24, 0x7F	; 127
    1be4:	8c 93       	st	X, r24
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a6 e9       	ldi	r26, 0x96	; 150
    1bec:	b3 e4       	ldi	r27, 0x43	; 67
    1bee:	8d 8b       	std	Y+21, r24	; 0x15
    1bf0:	9e 8b       	std	Y+22, r25	; 0x16
    1bf2:	af 8b       	std	Y+23, r26	; 0x17
    1bf4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bf6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfe:	2b ea       	ldi	r18, 0xAB	; 171
    1c00:	3a ea       	ldi	r19, 0xAA	; 170
    1c02:	4a e2       	ldi	r20, 0x2A	; 42
    1c04:	50 e4       	ldi	r21, 0x40	; 64
    1c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	89 8b       	std	Y+17, r24	; 0x11
    1c10:	9a 8b       	std	Y+18, r25	; 0x12
    1c12:	ab 8b       	std	Y+19, r26	; 0x13
    1c14:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c16:	69 89       	ldd	r22, Y+17	; 0x11
    1c18:	7a 89       	ldd	r23, Y+18	; 0x12
    1c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c2a:	88 23       	and	r24, r24
    1c2c:	1c f4       	brge	.+6      	; 0x1c34 <EF_void_LCD_send_command+0x564>
		__ticks = 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	88 8b       	std	Y+16, r24	; 0x10
    1c32:	91 c0       	rjmp	.+290    	; 0x1d56 <EF_void_LCD_send_command+0x686>
	else if (__tmp > 255)
    1c34:	69 89       	ldd	r22, Y+17	; 0x11
    1c36:	7a 89       	ldd	r23, Y+18	; 0x12
    1c38:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	53 e4       	ldi	r21, 0x43	; 67
    1c44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	0c f0       	brlt	.+2      	; 0x1c4e <EF_void_LCD_send_command+0x57e>
    1c4c:	7b c0       	rjmp	.+246    	; 0x1d44 <EF_void_LCD_send_command+0x674>
	{
		_delay_ms(__us / 1000.0);
    1c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c50:	7e 89       	ldd	r23, Y+22	; 0x16
    1c52:	8f 89       	ldd	r24, Y+23	; 0x17
    1c54:	98 8d       	ldd	r25, Y+24	; 0x18
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4a e7       	ldi	r20, 0x7A	; 122
    1c5c:	54 e4       	ldi	r21, 0x44	; 68
    1c5e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	8c 87       	std	Y+12, r24	; 0x0c
    1c68:	9d 87       	std	Y+13, r25	; 0x0d
    1c6a:	ae 87       	std	Y+14, r26	; 0x0e
    1c6c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c70:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c74:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	4a ef       	ldi	r20, 0xFA	; 250
    1c7c:	54 e4       	ldi	r21, 0x44	; 68
    1c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	88 87       	std	Y+8, r24	; 0x08
    1c88:	99 87       	std	Y+9, r25	; 0x09
    1c8a:	aa 87       	std	Y+10, r26	; 0x0a
    1c8c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c8e:	68 85       	ldd	r22, Y+8	; 0x08
    1c90:	79 85       	ldd	r23, Y+9	; 0x09
    1c92:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c94:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e8       	ldi	r20, 0x80	; 128
    1c9c:	5f e3       	ldi	r21, 0x3F	; 63
    1c9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca2:	88 23       	and	r24, r24
    1ca4:	2c f4       	brge	.+10     	; 0x1cb0 <EF_void_LCD_send_command+0x5e0>
		__ticks = 1;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9f 83       	std	Y+7, r25	; 0x07
    1cac:	8e 83       	std	Y+6, r24	; 0x06
    1cae:	3f c0       	rjmp	.+126    	; 0x1d2e <EF_void_LCD_send_command+0x65e>
	else if (__tmp > 65535)
    1cb0:	68 85       	ldd	r22, Y+8	; 0x08
    1cb2:	79 85       	ldd	r23, Y+9	; 0x09
    1cb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	57 e4       	ldi	r21, 0x47	; 71
    1cc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc4:	18 16       	cp	r1, r24
    1cc6:	4c f5       	brge	.+82     	; 0x1d1a <EF_void_LCD_send_command+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cca:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ccc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cce:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e2       	ldi	r20, 0x20	; 32
    1cd6:	51 e4       	ldi	r21, 0x41	; 65
    1cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	bc 01       	movw	r22, r24
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	9f 83       	std	Y+7, r25	; 0x07
    1cee:	8e 83       	std	Y+6, r24	; 0x06
    1cf0:	0f c0       	rjmp	.+30     	; 0x1d10 <EF_void_LCD_send_command+0x640>
    1cf2:	88 ec       	ldi	r24, 0xC8	; 200
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9d 83       	std	Y+5, r25	; 0x05
    1cf8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <EF_void_LCD_send_command+0x62e>
    1d02:	9d 83       	std	Y+5, r25	; 0x05
    1d04:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d06:	8e 81       	ldd	r24, Y+6	; 0x06
    1d08:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	9f 83       	std	Y+7, r25	; 0x07
    1d0e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d10:	8e 81       	ldd	r24, Y+6	; 0x06
    1d12:	9f 81       	ldd	r25, Y+7	; 0x07
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	69 f7       	brne	.-38     	; 0x1cf2 <EF_void_LCD_send_command+0x622>
    1d18:	24 c0       	rjmp	.+72     	; 0x1d62 <EF_void_LCD_send_command+0x692>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1a:	68 85       	ldd	r22, Y+8	; 0x08
    1d1c:	79 85       	ldd	r23, Y+9	; 0x09
    1d1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d20:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9f 83       	std	Y+7, r25	; 0x07
    1d2c:	8e 83       	std	Y+6, r24	; 0x06
    1d2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d30:	9f 81       	ldd	r25, Y+7	; 0x07
    1d32:	9b 83       	std	Y+3, r25	; 0x03
    1d34:	8a 83       	std	Y+2, r24	; 0x02
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <EF_void_LCD_send_command+0x66a>
    1d3e:	9b 83       	std	Y+3, r25	; 0x03
    1d40:	8a 83       	std	Y+2, r24	; 0x02
    1d42:	0f c0       	rjmp	.+30     	; 0x1d62 <EF_void_LCD_send_command+0x692>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d44:	69 89       	ldd	r22, Y+17	; 0x11
    1d46:	7a 89       	ldd	r23, Y+18	; 0x12
    1d48:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	88 8b       	std	Y+16, r24	; 0x10
    1d56:	88 89       	ldd	r24, Y+16	; 0x10
    1d58:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	8a 95       	dec	r24
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <EF_void_LCD_send_command+0x68c>
    1d60:	89 83       	std	Y+1, r24	; 0x01
	/* wait to let LCD running the command*/
	_delay_us(300);
}
    1d62:	c7 5b       	subi	r28, 0xB7	; 183
    1d64:	df 4f       	sbci	r29, 0xFF	; 255
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	08 95       	ret

00001d7a <EF_void_LCD_send_data>:
 * PARAMETERS  : U8_t Data:  Data User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_send_data(char data)
{
    1d7a:	0f 93       	push	r16
    1d7c:	1f 93       	push	r17
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	c9 54       	subi	r28, 0x49	; 73
    1d88:	d0 40       	sbci	r29, 0x00	; 0
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
    1d94:	fe 01       	movw	r30, r28
    1d96:	e7 5b       	subi	r30, 0xB7	; 183
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 83       	st	Z, r24
	/*RS will be high and RW will be LOW */
	//LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
	LCD_RS_PORT |= (1<<LCD_RS_PIN);
    1d9c:	a5 e3       	ldi	r26, 0x35	; 53
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e5 e3       	ldi	r30, 0x35	; 53
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	80 64       	ori	r24, 0x40	; 64
    1da8:	8c 93       	st	X, r24
	/* output high nibble first , "Generic method", attach data by bit
	 * first: put 0 in each pin then if the corresponding bit =1 , put 1*/
	/* output high nibble first */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    1daa:	a8 e3       	ldi	r26, 0x38	; 56
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e8 e3       	ldi	r30, 0x38	; 56
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	8f 77       	andi	r24, 0x7F	; 127
    1db6:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    1db8:	a8 e3       	ldi	r26, 0x38	; 56
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e8 e3       	ldi	r30, 0x38	; 56
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8f 7b       	andi	r24, 0xBF	; 191
    1dc4:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    1dc6:	a8 e3       	ldi	r26, 0x38	; 56
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e8 e3       	ldi	r30, 0x38	; 56
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	8f 7d       	andi	r24, 0xDF	; 223
    1dd2:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    1dd4:	a8 e3       	ldi	r26, 0x38	; 56
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e8 e3       	ldi	r30, 0x38	; 56
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	8f 7e       	andi	r24, 0xEF	; 239
    1de0:	8c 93       	st	X, r24
	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    1de2:	fe 01       	movw	r30, r28
    1de4:	e7 5b       	subi	r30, 0xB7	; 183
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	88 23       	and	r24, r24
    1dec:	3c f4       	brge	.+14     	; 0x1dfc <EF_void_LCD_send_data+0x82>
    1dee:	a8 e3       	ldi	r26, 0x38	; 56
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e8 e3       	ldi	r30, 0x38	; 56
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	80 68       	ori	r24, 0x80	; 128
    1dfa:	8c 93       	st	X, r24
	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e7 5b       	subi	r30, 0xB7	; 183
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	80 81       	ld	r24, Z
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	80 74       	andi	r24, 0x40	; 64
    1e0a:	90 70       	andi	r25, 0x00	; 0
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	39 f0       	breq	.+14     	; 0x1e1e <EF_void_LCD_send_data+0xa4>
    1e10:	a8 e3       	ldi	r26, 0x38	; 56
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e8 e3       	ldi	r30, 0x38	; 56
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	80 64       	ori	r24, 0x40	; 64
    1e1c:	8c 93       	st	X, r24
	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    1e1e:	fe 01       	movw	r30, r28
    1e20:	e7 5b       	subi	r30, 0xB7	; 183
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	80 81       	ld	r24, Z
    1e26:	88 2f       	mov	r24, r24
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	80 72       	andi	r24, 0x20	; 32
    1e2c:	90 70       	andi	r25, 0x00	; 0
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	39 f0       	breq	.+14     	; 0x1e40 <EF_void_LCD_send_data+0xc6>
    1e32:	a8 e3       	ldi	r26, 0x38	; 56
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e8 e3       	ldi	r30, 0x38	; 56
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	80 62       	ori	r24, 0x20	; 32
    1e3e:	8c 93       	st	X, r24
	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    1e40:	fe 01       	movw	r30, r28
    1e42:	e7 5b       	subi	r30, 0xB7	; 183
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	80 81       	ld	r24, Z
    1e48:	88 2f       	mov	r24, r24
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	80 71       	andi	r24, 0x10	; 16
    1e4e:	90 70       	andi	r25, 0x00	; 0
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	39 f0       	breq	.+14     	; 0x1e62 <EF_void_LCD_send_data+0xe8>
    1e54:	a8 e3       	ldi	r26, 0x38	; 56
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e8 e3       	ldi	r30, 0x38	; 56
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	80 61       	ori	r24, 0x10	; 16
    1e60:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD */
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    1e62:	a5 e3       	ldi	r26, 0x35	; 53
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e5 e3       	ldi	r30, 0x35	; 53
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	80 68       	ori	r24, 0x80	; 128
    1e6e:	8c 93       	st	X, r24
    1e70:	fe 01       	movw	r30, r28
    1e72:	eb 5b       	subi	r30, 0xBB	; 187
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	a0 e0       	ldi	r26, 0x00	; 0
    1e7c:	b0 e4       	ldi	r27, 0x40	; 64
    1e7e:	80 83       	st	Z, r24
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	a2 83       	std	Z+2, r26	; 0x02
    1e84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e86:	8e 01       	movw	r16, r28
    1e88:	0f 5b       	subi	r16, 0xBF	; 191
    1e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	eb 5b       	subi	r30, 0xBB	; 187
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	60 81       	ld	r22, Z
    1e94:	71 81       	ldd	r23, Z+1	; 0x01
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	2b ea       	ldi	r18, 0xAB	; 171
    1e9c:	3a ea       	ldi	r19, 0xAA	; 170
    1e9e:	4a e2       	ldi	r20, 0x2A	; 42
    1ea0:	50 e4       	ldi	r21, 0x40	; 64
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	f8 01       	movw	r30, r16
    1eac:	80 83       	st	Z, r24
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	a2 83       	std	Z+2, r26	; 0x02
    1eb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	ef 5b       	subi	r30, 0xBF	; 191
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	60 81       	ld	r22, Z
    1ebc:	71 81       	ldd	r23, Z+1	; 0x01
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e8       	ldi	r20, 0x80	; 128
    1ec8:	5f e3       	ldi	r21, 0x3F	; 63
    1eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ece:	88 23       	and	r24, r24
    1ed0:	34 f4       	brge	.+12     	; 0x1ede <EF_void_LCD_send_data+0x164>
		__ticks = 1;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	e0 5c       	subi	r30, 0xC0	; 192
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	80 83       	st	Z, r24
    1edc:	9d c0       	rjmp	.+314    	; 0x2018 <EF_void_LCD_send_data+0x29e>
	else if (__tmp > 255)
    1ede:	fe 01       	movw	r30, r28
    1ee0:	ef 5b       	subi	r30, 0xBF	; 191
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	60 81       	ld	r22, Z
    1ee6:	71 81       	ldd	r23, Z+1	; 0x01
    1ee8:	82 81       	ldd	r24, Z+2	; 0x02
    1eea:	93 81       	ldd	r25, Z+3	; 0x03
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	53 e4       	ldi	r21, 0x43	; 67
    1ef4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	0c f0       	brlt	.+2      	; 0x1efe <EF_void_LCD_send_data+0x184>
    1efc:	7e c0       	rjmp	.+252    	; 0x1ffa <EF_void_LCD_send_data+0x280>
	{
		_delay_ms(__us / 1000.0);
    1efe:	fe 01       	movw	r30, r28
    1f00:	eb 5b       	subi	r30, 0xBB	; 187
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	60 81       	ld	r22, Z
    1f06:	71 81       	ldd	r23, Z+1	; 0x01
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	4a e7       	ldi	r20, 0x7A	; 122
    1f12:	54 e4       	ldi	r21, 0x44	; 68
    1f14:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	8c af       	std	Y+60, r24	; 0x3c
    1f1e:	9d af       	std	Y+61, r25	; 0x3d
    1f20:	ae af       	std	Y+62, r26	; 0x3e
    1f22:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f24:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f26:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f28:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4a ef       	ldi	r20, 0xFA	; 250
    1f32:	54 e4       	ldi	r21, 0x44	; 68
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	88 af       	std	Y+56, r24	; 0x38
    1f3e:	99 af       	std	Y+57, r25	; 0x39
    1f40:	aa af       	std	Y+58, r26	; 0x3a
    1f42:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1f44:	68 ad       	ldd	r22, Y+56	; 0x38
    1f46:	79 ad       	ldd	r23, Y+57	; 0x39
    1f48:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f4a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <EF_void_LCD_send_data+0x1ec>
		__ticks = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9f ab       	std	Y+55, r25	; 0x37
    1f62:	8e ab       	std	Y+54, r24	; 0x36
    1f64:	3f c0       	rjmp	.+126    	; 0x1fe4 <EF_void_LCD_send_data+0x26a>
	else if (__tmp > 65535)
    1f66:	68 ad       	ldd	r22, Y+56	; 0x38
    1f68:	79 ad       	ldd	r23, Y+57	; 0x39
    1f6a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f6c:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	57 e4       	ldi	r21, 0x47	; 71
    1f76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	4c f5       	brge	.+82     	; 0x1fd0 <EF_void_LCD_send_data+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f80:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f82:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f84:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e2       	ldi	r20, 0x20	; 32
    1f8c:	51 e4       	ldi	r21, 0x41	; 65
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	9f ab       	std	Y+55, r25	; 0x37
    1fa4:	8e ab       	std	Y+54, r24	; 0x36
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <EF_void_LCD_send_data+0x24c>
    1fa8:	88 ec       	ldi	r24, 0xC8	; 200
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9d ab       	std	Y+53, r25	; 0x35
    1fae:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fb0:	8c a9       	ldd	r24, Y+52	; 0x34
    1fb2:	9d a9       	ldd	r25, Y+53	; 0x35
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <EF_void_LCD_send_data+0x23a>
    1fb8:	9d ab       	std	Y+53, r25	; 0x35
    1fba:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbc:	8e a9       	ldd	r24, Y+54	; 0x36
    1fbe:	9f a9       	ldd	r25, Y+55	; 0x37
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	9f ab       	std	Y+55, r25	; 0x37
    1fc4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc6:	8e a9       	ldd	r24, Y+54	; 0x36
    1fc8:	9f a9       	ldd	r25, Y+55	; 0x37
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	69 f7       	brne	.-38     	; 0x1fa8 <EF_void_LCD_send_data+0x22e>
    1fce:	2d c0       	rjmp	.+90     	; 0x202a <EF_void_LCD_send_data+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	68 ad       	ldd	r22, Y+56	; 0x38
    1fd2:	79 ad       	ldd	r23, Y+57	; 0x39
    1fd4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fd6:	9b ad       	ldd	r25, Y+59	; 0x3b
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9f ab       	std	Y+55, r25	; 0x37
    1fe2:	8e ab       	std	Y+54, r24	; 0x36
    1fe4:	8e a9       	ldd	r24, Y+54	; 0x36
    1fe6:	9f a9       	ldd	r25, Y+55	; 0x37
    1fe8:	9b ab       	std	Y+51, r25	; 0x33
    1fea:	8a ab       	std	Y+50, r24	; 0x32
    1fec:	8a a9       	ldd	r24, Y+50	; 0x32
    1fee:	9b a9       	ldd	r25, Y+51	; 0x33
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <EF_void_LCD_send_data+0x276>
    1ff4:	9b ab       	std	Y+51, r25	; 0x33
    1ff6:	8a ab       	std	Y+50, r24	; 0x32
    1ff8:	18 c0       	rjmp	.+48     	; 0x202a <EF_void_LCD_send_data+0x2b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	ef 5b       	subi	r30, 0xBF	; 191
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	60 81       	ld	r22, Z
    2002:	71 81       	ldd	r23, Z+1	; 0x01
    2004:	82 81       	ldd	r24, Z+2	; 0x02
    2006:	93 81       	ldd	r25, Z+3	; 0x03
    2008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	fe 01       	movw	r30, r28
    2012:	e0 5c       	subi	r30, 0xC0	; 192
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	80 83       	st	Z, r24
    2018:	fe 01       	movw	r30, r28
    201a:	e0 5c       	subi	r30, 0xC0	; 192
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 81       	ld	r24, Z
    2020:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2022:	89 a9       	ldd	r24, Y+49	; 0x31
    2024:	8a 95       	dec	r24
    2026:	f1 f7       	brne	.-4      	; 0x2024 <EF_void_LCD_send_data+0x2aa>
    2028:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    202a:	a5 e3       	ldi	r26, 0x35	; 53
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e5 e3       	ldi	r30, 0x35	; 53
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	8f 77       	andi	r24, 0x7F	; 127
    2036:	8c 93       	st	X, r24

	/* output low nibble */
	LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    2038:	a8 e3       	ldi	r26, 0x38	; 56
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e8 e3       	ldi	r30, 0x38	; 56
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	8f 77       	andi	r24, 0x7F	; 127
    2044:	8c 93       	st	X, r24
	LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    2046:	a8 e3       	ldi	r26, 0x38	; 56
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e8 e3       	ldi	r30, 0x38	; 56
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	8f 7b       	andi	r24, 0xBF	; 191
    2052:	8c 93       	st	X, r24
	LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    2054:	a8 e3       	ldi	r26, 0x38	; 56
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e8 e3       	ldi	r30, 0x38	; 56
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	8f 7d       	andi	r24, 0xDF	; 223
    2060:	8c 93       	st	X, r24
	LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    2062:	a8 e3       	ldi	r26, 0x38	; 56
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e8 e3       	ldi	r30, 0x38	; 56
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	8f 7e       	andi	r24, 0xEF	; 239
    206e:	8c 93       	st	X, r24
	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    2070:	fe 01       	movw	r30, r28
    2072:	e7 5b       	subi	r30, 0xB7	; 183
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	80 81       	ld	r24, Z
    2078:	88 2f       	mov	r24, r24
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	88 70       	andi	r24, 0x08	; 8
    207e:	90 70       	andi	r25, 0x00	; 0
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	39 f0       	breq	.+14     	; 0x2092 <EF_void_LCD_send_data+0x318>
    2084:	a8 e3       	ldi	r26, 0x38	; 56
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e8 e3       	ldi	r30, 0x38	; 56
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	80 68       	ori	r24, 0x80	; 128
    2090:	8c 93       	st	X, r24
	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    2092:	fe 01       	movw	r30, r28
    2094:	e7 5b       	subi	r30, 0xB7	; 183
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	80 81       	ld	r24, Z
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	84 70       	andi	r24, 0x04	; 4
    20a0:	90 70       	andi	r25, 0x00	; 0
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	39 f0       	breq	.+14     	; 0x20b4 <EF_void_LCD_send_data+0x33a>
    20a6:	a8 e3       	ldi	r26, 0x38	; 56
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e8 e3       	ldi	r30, 0x38	; 56
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	80 64       	ori	r24, 0x40	; 64
    20b2:	8c 93       	st	X, r24
	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    20b4:	fe 01       	movw	r30, r28
    20b6:	e7 5b       	subi	r30, 0xB7	; 183
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	80 81       	ld	r24, Z
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	82 70       	andi	r24, 0x02	; 2
    20c2:	90 70       	andi	r25, 0x00	; 0
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	39 f0       	breq	.+14     	; 0x20d6 <EF_void_LCD_send_data+0x35c>
    20c8:	a8 e3       	ldi	r26, 0x38	; 56
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e8 e3       	ldi	r30, 0x38	; 56
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	80 62       	ori	r24, 0x20	; 32
    20d4:	8c 93       	st	X, r24
	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
    20d6:	fe 01       	movw	r30, r28
    20d8:	e7 5b       	subi	r30, 0xB7	; 183
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	80 81       	ld	r24, Z
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	81 70       	andi	r24, 0x01	; 1
    20e4:	90 70       	andi	r25, 0x00	; 0
    20e6:	88 23       	and	r24, r24
    20e8:	39 f0       	breq	.+14     	; 0x20f8 <EF_void_LCD_send_data+0x37e>
    20ea:	a8 e3       	ldi	r26, 0x38	; 56
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e8 e3       	ldi	r30, 0x38	; 56
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 61       	ori	r24, 0x10	; 16
    20f6:	8c 93       	st	X, r24

	/* make Enable High to low with delay to enable the internal latch at the LCD*/
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    20f8:	a5 e3       	ldi	r26, 0x35	; 53
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e5 e3       	ldi	r30, 0x35	; 53
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	80 68       	ori	r24, 0x80	; 128
    2104:	8c 93       	st	X, r24
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 e0       	ldi	r26, 0x00	; 0
    210c:	b0 e4       	ldi	r27, 0x40	; 64
    210e:	8d a7       	std	Y+45, r24	; 0x2d
    2110:	9e a7       	std	Y+46, r25	; 0x2e
    2112:	af a7       	std	Y+47, r26	; 0x2f
    2114:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2116:	6d a5       	ldd	r22, Y+45	; 0x2d
    2118:	7e a5       	ldd	r23, Y+46	; 0x2e
    211a:	8f a5       	ldd	r24, Y+47	; 0x2f
    211c:	98 a9       	ldd	r25, Y+48	; 0x30
    211e:	2b ea       	ldi	r18, 0xAB	; 171
    2120:	3a ea       	ldi	r19, 0xAA	; 170
    2122:	4a e2       	ldi	r20, 0x2A	; 42
    2124:	50 e4       	ldi	r21, 0x40	; 64
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	89 a7       	std	Y+41, r24	; 0x29
    2130:	9a a7       	std	Y+42, r25	; 0x2a
    2132:	ab a7       	std	Y+43, r26	; 0x2b
    2134:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2136:	69 a5       	ldd	r22, Y+41	; 0x29
    2138:	7a a5       	ldd	r23, Y+42	; 0x2a
    213a:	8b a5       	ldd	r24, Y+43	; 0x2b
    213c:	9c a5       	ldd	r25, Y+44	; 0x2c
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e8       	ldi	r20, 0x80	; 128
    2144:	5f e3       	ldi	r21, 0x3F	; 63
    2146:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    214a:	88 23       	and	r24, r24
    214c:	1c f4       	brge	.+6      	; 0x2154 <EF_void_LCD_send_data+0x3da>
		__ticks = 1;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	88 a7       	std	Y+40, r24	; 0x28
    2152:	91 c0       	rjmp	.+290    	; 0x2276 <EF_void_LCD_send_data+0x4fc>
	else if (__tmp > 255)
    2154:	69 a5       	ldd	r22, Y+41	; 0x29
    2156:	7a a5       	ldd	r23, Y+42	; 0x2a
    2158:	8b a5       	ldd	r24, Y+43	; 0x2b
    215a:	9c a5       	ldd	r25, Y+44	; 0x2c
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	53 e4       	ldi	r21, 0x43	; 67
    2164:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2168:	18 16       	cp	r1, r24
    216a:	0c f0       	brlt	.+2      	; 0x216e <EF_void_LCD_send_data+0x3f4>
    216c:	7b c0       	rjmp	.+246    	; 0x2264 <EF_void_LCD_send_data+0x4ea>
	{
		_delay_ms(__us / 1000.0);
    216e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2170:	7e a5       	ldd	r23, Y+46	; 0x2e
    2172:	8f a5       	ldd	r24, Y+47	; 0x2f
    2174:	98 a9       	ldd	r25, Y+48	; 0x30
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	4a e7       	ldi	r20, 0x7A	; 122
    217c:	54 e4       	ldi	r21, 0x44	; 68
    217e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	8c a3       	std	Y+36, r24	; 0x24
    2188:	9d a3       	std	Y+37, r25	; 0x25
    218a:	ae a3       	std	Y+38, r26	; 0x26
    218c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218e:	6c a1       	ldd	r22, Y+36	; 0x24
    2190:	7d a1       	ldd	r23, Y+37	; 0x25
    2192:	8e a1       	ldd	r24, Y+38	; 0x26
    2194:	9f a1       	ldd	r25, Y+39	; 0x27
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	4a ef       	ldi	r20, 0xFA	; 250
    219c:	54 e4       	ldi	r21, 0x44	; 68
    219e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	88 a3       	std	Y+32, r24	; 0x20
    21a8:	99 a3       	std	Y+33, r25	; 0x21
    21aa:	aa a3       	std	Y+34, r26	; 0x22
    21ac:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    21ae:	68 a1       	ldd	r22, Y+32	; 0x20
    21b0:	79 a1       	ldd	r23, Y+33	; 0x21
    21b2:	8a a1       	ldd	r24, Y+34	; 0x22
    21b4:	9b a1       	ldd	r25, Y+35	; 0x23
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e8       	ldi	r20, 0x80	; 128
    21bc:	5f e3       	ldi	r21, 0x3F	; 63
    21be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c2:	88 23       	and	r24, r24
    21c4:	2c f4       	brge	.+10     	; 0x21d0 <EF_void_LCD_send_data+0x456>
		__ticks = 1;
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9f 8f       	std	Y+31, r25	; 0x1f
    21cc:	8e 8f       	std	Y+30, r24	; 0x1e
    21ce:	3f c0       	rjmp	.+126    	; 0x224e <EF_void_LCD_send_data+0x4d4>
	else if (__tmp > 65535)
    21d0:	68 a1       	ldd	r22, Y+32	; 0x20
    21d2:	79 a1       	ldd	r23, Y+33	; 0x21
    21d4:	8a a1       	ldd	r24, Y+34	; 0x22
    21d6:	9b a1       	ldd	r25, Y+35	; 0x23
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	3f ef       	ldi	r19, 0xFF	; 255
    21dc:	4f e7       	ldi	r20, 0x7F	; 127
    21de:	57 e4       	ldi	r21, 0x47	; 71
    21e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21e4:	18 16       	cp	r1, r24
    21e6:	4c f5       	brge	.+82     	; 0x223a <EF_void_LCD_send_data+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e8:	6c a1       	ldd	r22, Y+36	; 0x24
    21ea:	7d a1       	ldd	r23, Y+37	; 0x25
    21ec:	8e a1       	ldd	r24, Y+38	; 0x26
    21ee:	9f a1       	ldd	r25, Y+39	; 0x27
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e2       	ldi	r20, 0x20	; 32
    21f6:	51 e4       	ldi	r21, 0x41	; 65
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	bc 01       	movw	r22, r24
    2202:	cd 01       	movw	r24, r26
    2204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	9f 8f       	std	Y+31, r25	; 0x1f
    220e:	8e 8f       	std	Y+30, r24	; 0x1e
    2210:	0f c0       	rjmp	.+30     	; 0x2230 <EF_void_LCD_send_data+0x4b6>
    2212:	88 ec       	ldi	r24, 0xC8	; 200
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9d 8f       	std	Y+29, r25	; 0x1d
    2218:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    221a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    221c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <EF_void_LCD_send_data+0x4a4>
    2222:	9d 8f       	std	Y+29, r25	; 0x1d
    2224:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2226:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2228:	9f 8d       	ldd	r25, Y+31	; 0x1f
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	9f 8f       	std	Y+31, r25	; 0x1f
    222e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2230:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2232:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	69 f7       	brne	.-38     	; 0x2212 <EF_void_LCD_send_data+0x498>
    2238:	24 c0       	rjmp	.+72     	; 0x2282 <EF_void_LCD_send_data+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223a:	68 a1       	ldd	r22, Y+32	; 0x20
    223c:	79 a1       	ldd	r23, Y+33	; 0x21
    223e:	8a a1       	ldd	r24, Y+34	; 0x22
    2240:	9b a1       	ldd	r25, Y+35	; 0x23
    2242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	9f 8f       	std	Y+31, r25	; 0x1f
    224c:	8e 8f       	std	Y+30, r24	; 0x1e
    224e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2250:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2252:	9b 8f       	std	Y+27, r25	; 0x1b
    2254:	8a 8f       	std	Y+26, r24	; 0x1a
    2256:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2258:	9b 8d       	ldd	r25, Y+27	; 0x1b
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <EF_void_LCD_send_data+0x4e0>
    225e:	9b 8f       	std	Y+27, r25	; 0x1b
    2260:	8a 8f       	std	Y+26, r24	; 0x1a
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <EF_void_LCD_send_data+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2264:	69 a5       	ldd	r22, Y+41	; 0x29
    2266:	7a a5       	ldd	r23, Y+42	; 0x2a
    2268:	8b a5       	ldd	r24, Y+43	; 0x2b
    226a:	9c a5       	ldd	r25, Y+44	; 0x2c
    226c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	88 a7       	std	Y+40, r24	; 0x28
    2276:	88 a5       	ldd	r24, Y+40	; 0x28
    2278:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    227a:	89 8d       	ldd	r24, Y+25	; 0x19
    227c:	8a 95       	dec	r24
    227e:	f1 f7       	brne	.-4      	; 0x227c <EF_void_LCD_send_data+0x502>
    2280:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    2282:	a5 e3       	ldi	r26, 0x35	; 53
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e5 e3       	ldi	r30, 0x35	; 53
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	8f 77       	andi	r24, 0x7F	; 127
    228e:	8c 93       	st	X, r24
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a6 e9       	ldi	r26, 0x96	; 150
    2296:	b3 e4       	ldi	r27, 0x43	; 67
    2298:	8d 8b       	std	Y+21, r24	; 0x15
    229a:	9e 8b       	std	Y+22, r25	; 0x16
    229c:	af 8b       	std	Y+23, r26	; 0x17
    229e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22a0:	6d 89       	ldd	r22, Y+21	; 0x15
    22a2:	7e 89       	ldd	r23, Y+22	; 0x16
    22a4:	8f 89       	ldd	r24, Y+23	; 0x17
    22a6:	98 8d       	ldd	r25, Y+24	; 0x18
    22a8:	2b ea       	ldi	r18, 0xAB	; 171
    22aa:	3a ea       	ldi	r19, 0xAA	; 170
    22ac:	4a e2       	ldi	r20, 0x2A	; 42
    22ae:	50 e4       	ldi	r21, 0x40	; 64
    22b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	89 8b       	std	Y+17, r24	; 0x11
    22ba:	9a 8b       	std	Y+18, r25	; 0x12
    22bc:	ab 8b       	std	Y+19, r26	; 0x13
    22be:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22c0:	69 89       	ldd	r22, Y+17	; 0x11
    22c2:	7a 89       	ldd	r23, Y+18	; 0x12
    22c4:	8b 89       	ldd	r24, Y+19	; 0x13
    22c6:	9c 89       	ldd	r25, Y+20	; 0x14
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e8       	ldi	r20, 0x80	; 128
    22ce:	5f e3       	ldi	r21, 0x3F	; 63
    22d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d4:	88 23       	and	r24, r24
    22d6:	1c f4       	brge	.+6      	; 0x22de <EF_void_LCD_send_data+0x564>
		__ticks = 1;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	88 8b       	std	Y+16, r24	; 0x10
    22dc:	91 c0       	rjmp	.+290    	; 0x2400 <EF_void_LCD_send_data+0x686>
	else if (__tmp > 255)
    22de:	69 89       	ldd	r22, Y+17	; 0x11
    22e0:	7a 89       	ldd	r23, Y+18	; 0x12
    22e2:	8b 89       	ldd	r24, Y+19	; 0x13
    22e4:	9c 89       	ldd	r25, Y+20	; 0x14
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	53 e4       	ldi	r21, 0x43	; 67
    22ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	0c f0       	brlt	.+2      	; 0x22f8 <EF_void_LCD_send_data+0x57e>
    22f6:	7b c0       	rjmp	.+246    	; 0x23ee <EF_void_LCD_send_data+0x674>
	{
		_delay_ms(__us / 1000.0);
    22f8:	6d 89       	ldd	r22, Y+21	; 0x15
    22fa:	7e 89       	ldd	r23, Y+22	; 0x16
    22fc:	8f 89       	ldd	r24, Y+23	; 0x17
    22fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a e7       	ldi	r20, 0x7A	; 122
    2306:	54 e4       	ldi	r21, 0x44	; 68
    2308:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8c 87       	std	Y+12, r24	; 0x0c
    2312:	9d 87       	std	Y+13, r25	; 0x0d
    2314:	ae 87       	std	Y+14, r26	; 0x0e
    2316:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2318:	6c 85       	ldd	r22, Y+12	; 0x0c
    231a:	7d 85       	ldd	r23, Y+13	; 0x0d
    231c:	8e 85       	ldd	r24, Y+14	; 0x0e
    231e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	4a ef       	ldi	r20, 0xFA	; 250
    2326:	54 e4       	ldi	r21, 0x44	; 68
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	88 87       	std	Y+8, r24	; 0x08
    2332:	99 87       	std	Y+9, r25	; 0x09
    2334:	aa 87       	std	Y+10, r26	; 0x0a
    2336:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2338:	68 85       	ldd	r22, Y+8	; 0x08
    233a:	79 85       	ldd	r23, Y+9	; 0x09
    233c:	8a 85       	ldd	r24, Y+10	; 0x0a
    233e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e8       	ldi	r20, 0x80	; 128
    2346:	5f e3       	ldi	r21, 0x3F	; 63
    2348:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234c:	88 23       	and	r24, r24
    234e:	2c f4       	brge	.+10     	; 0x235a <EF_void_LCD_send_data+0x5e0>
		__ticks = 1;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	9f 83       	std	Y+7, r25	; 0x07
    2356:	8e 83       	std	Y+6, r24	; 0x06
    2358:	3f c0       	rjmp	.+126    	; 0x23d8 <EF_void_LCD_send_data+0x65e>
	else if (__tmp > 65535)
    235a:	68 85       	ldd	r22, Y+8	; 0x08
    235c:	79 85       	ldd	r23, Y+9	; 0x09
    235e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2360:	9b 85       	ldd	r25, Y+11	; 0x0b
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	3f ef       	ldi	r19, 0xFF	; 255
    2366:	4f e7       	ldi	r20, 0x7F	; 127
    2368:	57 e4       	ldi	r21, 0x47	; 71
    236a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    236e:	18 16       	cp	r1, r24
    2370:	4c f5       	brge	.+82     	; 0x23c4 <EF_void_LCD_send_data+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2372:	6c 85       	ldd	r22, Y+12	; 0x0c
    2374:	7d 85       	ldd	r23, Y+13	; 0x0d
    2376:	8e 85       	ldd	r24, Y+14	; 0x0e
    2378:	9f 85       	ldd	r25, Y+15	; 0x0f
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e2       	ldi	r20, 0x20	; 32
    2380:	51 e4       	ldi	r21, 0x41	; 65
    2382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	9f 83       	std	Y+7, r25	; 0x07
    2398:	8e 83       	std	Y+6, r24	; 0x06
    239a:	0f c0       	rjmp	.+30     	; 0x23ba <EF_void_LCD_send_data+0x640>
    239c:	88 ec       	ldi	r24, 0xC8	; 200
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9d 83       	std	Y+5, r25	; 0x05
    23a2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23a4:	8c 81       	ldd	r24, Y+4	; 0x04
    23a6:	9d 81       	ldd	r25, Y+5	; 0x05
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <EF_void_LCD_send_data+0x62e>
    23ac:	9d 83       	std	Y+5, r25	; 0x05
    23ae:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b0:	8e 81       	ldd	r24, Y+6	; 0x06
    23b2:	9f 81       	ldd	r25, Y+7	; 0x07
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	9f 83       	std	Y+7, r25	; 0x07
    23b8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ba:	8e 81       	ldd	r24, Y+6	; 0x06
    23bc:	9f 81       	ldd	r25, Y+7	; 0x07
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	69 f7       	brne	.-38     	; 0x239c <EF_void_LCD_send_data+0x622>
    23c2:	24 c0       	rjmp	.+72     	; 0x240c <EF_void_LCD_send_data+0x692>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c4:	68 85       	ldd	r22, Y+8	; 0x08
    23c6:	79 85       	ldd	r23, Y+9	; 0x09
    23c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	9f 83       	std	Y+7, r25	; 0x07
    23d6:	8e 83       	std	Y+6, r24	; 0x06
    23d8:	8e 81       	ldd	r24, Y+6	; 0x06
    23da:	9f 81       	ldd	r25, Y+7	; 0x07
    23dc:	9b 83       	std	Y+3, r25	; 0x03
    23de:	8a 83       	std	Y+2, r24	; 0x02
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	9b 81       	ldd	r25, Y+3	; 0x03
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <EF_void_LCD_send_data+0x66a>
    23e8:	9b 83       	std	Y+3, r25	; 0x03
    23ea:	8a 83       	std	Y+2, r24	; 0x02
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <EF_void_LCD_send_data+0x692>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23ee:	69 89       	ldd	r22, Y+17	; 0x11
    23f0:	7a 89       	ldd	r23, Y+18	; 0x12
    23f2:	8b 89       	ldd	r24, Y+19	; 0x13
    23f4:	9c 89       	ldd	r25, Y+20	; 0x14
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	88 8b       	std	Y+16, r24	; 0x10
    2400:	88 89       	ldd	r24, Y+16	; 0x10
    2402:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	8a 95       	dec	r24
    2408:	f1 f7       	brne	.-4      	; 0x2406 <EF_void_LCD_send_data+0x68c>
    240a:	89 83       	std	Y+1, r24	; 0x01
	/* wait to let LCD running the command*/
	_delay_us(300);
}
    240c:	c7 5b       	subi	r28, 0xB7	; 183
    240e:	df 4f       	sbci	r29, 0xFF	; 255
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	1f 91       	pop	r17
    2420:	0f 91       	pop	r16
    2422:	08 95       	ret

00002424 <EF_void_LCD_goto>:
 * PARAMETERS  : U8_t y, U8_t x.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_goto(U8_t y, U8_t x)
{
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	64 97       	sbiw	r28, 0x14	; 20
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	8b 8b       	std	Y+19, r24	; 0x13
    243a:	6c 8b       	std	Y+20, r22	; 0x14
	U8_t firstAddress[] = {0x80,0xC0,0x94,0xD4};
    243c:	80 e8       	ldi	r24, 0x80	; 128
    243e:	8f 87       	std	Y+15, r24	; 0x0f
    2440:	80 ec       	ldi	r24, 0xC0	; 192
    2442:	88 8b       	std	Y+16, r24	; 0x10
    2444:	84 e9       	ldi	r24, 0x94	; 148
    2446:	89 8b       	std	Y+17, r24	; 0x11
    2448:	84 ed       	ldi	r24, 0xD4	; 212
    244a:	8a 8b       	std	Y+18, r24	; 0x12

	EF_void_LCD_send_command(firstAddress[y-1] + x-1);
    244c:	8b 89       	ldd	r24, Y+19	; 0x13
    244e:	88 2f       	mov	r24, r24
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9c 01       	movw	r18, r24
    2454:	21 50       	subi	r18, 0x01	; 1
    2456:	30 40       	sbci	r19, 0x00	; 0
    2458:	ce 01       	movw	r24, r28
    245a:	0f 96       	adiw	r24, 0x0f	; 15
    245c:	fc 01       	movw	r30, r24
    245e:	e2 0f       	add	r30, r18
    2460:	f3 1f       	adc	r31, r19
    2462:	90 81       	ld	r25, Z
    2464:	8c 89       	ldd	r24, Y+20	; 0x14
    2466:	89 0f       	add	r24, r25
    2468:	81 50       	subi	r24, 0x01	; 1
    246a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <EF_void_LCD_send_command>
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	a0 ea       	ldi	r26, 0xA0	; 160
    2474:	b1 e4       	ldi	r27, 0x41	; 65
    2476:	8b 87       	std	Y+11, r24	; 0x0b
    2478:	9c 87       	std	Y+12, r25	; 0x0c
    247a:	ad 87       	std	Y+13, r26	; 0x0d
    247c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2480:	7c 85       	ldd	r23, Y+12	; 0x0c
    2482:	8d 85       	ldd	r24, Y+13	; 0x0d
    2484:	9e 85       	ldd	r25, Y+14	; 0x0e
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	4a ef       	ldi	r20, 0xFA	; 250
    248c:	54 e4       	ldi	r21, 0x44	; 68
    248e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	8f 83       	std	Y+7, r24	; 0x07
    2498:	98 87       	std	Y+8, r25	; 0x08
    249a:	a9 87       	std	Y+9, r26	; 0x09
    249c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    249e:	6f 81       	ldd	r22, Y+7	; 0x07
    24a0:	78 85       	ldd	r23, Y+8	; 0x08
    24a2:	89 85       	ldd	r24, Y+9	; 0x09
    24a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e8       	ldi	r20, 0x80	; 128
    24ac:	5f e3       	ldi	r21, 0x3F	; 63
    24ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24b2:	88 23       	and	r24, r24
    24b4:	2c f4       	brge	.+10     	; 0x24c0 <EF_void_LCD_goto+0x9c>
		__ticks = 1;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	9e 83       	std	Y+6, r25	; 0x06
    24bc:	8d 83       	std	Y+5, r24	; 0x05
    24be:	3f c0       	rjmp	.+126    	; 0x253e <EF_void_LCD_goto+0x11a>
	else if (__tmp > 65535)
    24c0:	6f 81       	ldd	r22, Y+7	; 0x07
    24c2:	78 85       	ldd	r23, Y+8	; 0x08
    24c4:	89 85       	ldd	r24, Y+9	; 0x09
    24c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	3f ef       	ldi	r19, 0xFF	; 255
    24cc:	4f e7       	ldi	r20, 0x7F	; 127
    24ce:	57 e4       	ldi	r21, 0x47	; 71
    24d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24d4:	18 16       	cp	r1, r24
    24d6:	4c f5       	brge	.+82     	; 0x252a <EF_void_LCD_goto+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24da:	7c 85       	ldd	r23, Y+12	; 0x0c
    24dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24de:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e2       	ldi	r20, 0x20	; 32
    24e6:	51 e4       	ldi	r21, 0x41	; 65
    24e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	0f c0       	rjmp	.+30     	; 0x2520 <EF_void_LCD_goto+0xfc>
    2502:	88 ec       	ldi	r24, 0xC8	; 200
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	9c 83       	std	Y+4, r25	; 0x04
    2508:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	9c 81       	ldd	r25, Y+4	; 0x04
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <EF_void_LCD_goto+0xea>
    2512:	9c 83       	std	Y+4, r25	; 0x04
    2514:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2516:	8d 81       	ldd	r24, Y+5	; 0x05
    2518:	9e 81       	ldd	r25, Y+6	; 0x06
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	9e 83       	std	Y+6, r25	; 0x06
    251e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2520:	8d 81       	ldd	r24, Y+5	; 0x05
    2522:	9e 81       	ldd	r25, Y+6	; 0x06
    2524:	00 97       	sbiw	r24, 0x00	; 0
    2526:	69 f7       	brne	.-38     	; 0x2502 <EF_void_LCD_goto+0xde>
    2528:	14 c0       	rjmp	.+40     	; 0x2552 <EF_void_LCD_goto+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252a:	6f 81       	ldd	r22, Y+7	; 0x07
    252c:	78 85       	ldd	r23, Y+8	; 0x08
    252e:	89 85       	ldd	r24, Y+9	; 0x09
    2530:	9a 85       	ldd	r25, Y+10	; 0x0a
    2532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	9e 83       	std	Y+6, r25	; 0x06
    253c:	8d 83       	std	Y+5, r24	; 0x05
    253e:	8d 81       	ldd	r24, Y+5	; 0x05
    2540:	9e 81       	ldd	r25, Y+6	; 0x06
    2542:	9a 83       	std	Y+2, r25	; 0x02
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	9a 81       	ldd	r25, Y+2	; 0x02
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <EF_void_LCD_goto+0x126>
    254e:	9a 83       	std	Y+2, r25	; 0x02
    2550:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2552:	64 96       	adiw	r28, 0x14	; 20
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	f8 94       	cli
    2558:	de bf       	out	0x3e, r29	; 62
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <EF_void_LCD_print_NUM>:
 *				take 1 for first row, 2: for the second row
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_print_NUM(S16_t s16Numberstring,U8_t u8RowNumber)
{
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	2a 97       	sbiw	r28, 0x0a	; 10
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	99 87       	std	Y+9, r25	; 0x09
    257a:	88 87       	std	Y+8, r24	; 0x08
    257c:	6a 87       	std	Y+10, r22	; 0x0a
	U8_t ArrayIndex = 0;
    257e:	19 82       	std	Y+1, r1	; 0x01
	char s8DisplayStr[6] = {0};
    2580:	86 e0       	ldi	r24, 0x06	; 6
    2582:	fe 01       	movw	r30, r28
    2584:	32 96       	adiw	r30, 0x02	; 2
    2586:	df 01       	movw	r26, r30
    2588:	98 2f       	mov	r25, r24
    258a:	1d 92       	st	X+, r1
    258c:	9a 95       	dec	r25
    258e:	e9 f7       	brne	.-6      	; 0x258a <EF_void_LCD_print_NUM+0x26>
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);
    2590:	88 85       	ldd	r24, Y+8	; 0x08
    2592:	99 85       	ldd	r25, Y+9	; 0x09
    2594:	9e 01       	movw	r18, r28
    2596:	2e 5f       	subi	r18, 0xFE	; 254
    2598:	3f 4f       	sbci	r19, 0xFF	; 255
    259a:	b9 01       	movw	r22, r18
    259c:	4a e0       	ldi	r20, 0x0A	; 10
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <itoa>

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    25a4:	19 82       	std	Y+1, r1	; 0x01
    25a6:	15 c0       	rjmp	.+42     	; 0x25d2 <EF_void_LCD_print_NUM+0x6e>
	{
		EF_void_LCD_goto(u8RowNumber, (ArrayIndex + 1));
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	98 2f       	mov	r25, r24
    25ac:	9f 5f       	subi	r25, 0xFF	; 255
    25ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    25b0:	69 2f       	mov	r22, r25
    25b2:	0e 94 12 12 	call	0x2424	; 0x2424 <EF_void_LCD_goto>
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	ce 01       	movw	r24, r28
    25be:	02 96       	adiw	r24, 0x02	; 2
    25c0:	fc 01       	movw	r30, r24
    25c2:	e2 0f       	add	r30, r18
    25c4:	f3 1f       	adc	r31, r19
    25c6:	80 81       	ld	r24, Z
    25c8:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <EF_void_LCD_send_data>
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	8f 5f       	subi	r24, 0xFF	; 255
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	ce 01       	movw	r24, r28
    25da:	02 96       	adiw	r24, 0x02	; 2
    25dc:	fc 01       	movw	r30, r24
    25de:	e2 0f       	add	r30, r18
    25e0:	f3 1f       	adc	r31, r19
    25e2:	80 81       	ld	r24, Z
    25e4:	88 23       	and	r24, r24
    25e6:	01 f7       	brne	.-64     	; 0x25a8 <EF_void_LCD_print_NUM+0x44>
	{
		EF_void_LCD_goto(u8RowNumber, (ArrayIndex + 1));
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
	}
}
    25e8:	2a 96       	adiw	r28, 0x0a	; 10
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <EF_void_LCD_print>:
 * PARAMETERS  : U8_t *string:  String User want to send.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_print(char *string)
{
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <EF_void_LCD_print+0x6>
    2600:	0f 92       	push	r0
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	9b 83       	std	Y+3, r25	; 0x03
    2608:	8a 83       	std	Y+2, r24	; 0x02
	U8_t i = 0;
    260a:	19 82       	std	Y+1, r1	; 0x01
    260c:	0e c0       	rjmp	.+28     	; 0x262a <EF_void_LCD_print+0x30>

	while(string[i]!=0)
	{
		EF_void_LCD_send_data(string[i]);
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	9b 81       	ldd	r25, Y+3	; 0x03
    2618:	fc 01       	movw	r30, r24
    261a:	e2 0f       	add	r30, r18
    261c:	f3 1f       	adc	r31, r19
    261e:	80 81       	ld	r24, Z
    2620:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <EF_void_LCD_send_data>
		i++;
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	8f 5f       	subi	r24, 0xFF	; 255
    2628:	89 83       	std	Y+1, r24	; 0x01
 ***********************************************************************/
void EF_void_LCD_print(char *string)
{
	U8_t i = 0;

	while(string[i]!=0)
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	9b 81       	ldd	r25, Y+3	; 0x03
    2634:	fc 01       	movw	r30, r24
    2636:	e2 0f       	add	r30, r18
    2638:	f3 1f       	adc	r31, r19
    263a:	80 81       	ld	r24, Z
    263c:	88 23       	and	r24, r24
    263e:	39 f7       	brne	.-50     	; 0x260e <EF_void_LCD_print+0x14>
	{
		EF_void_LCD_send_data(string[i]);
		i++;
	}
}
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <EF_void_LCD_Clear_then_print>:


void EF_void_LCD_Clear_then_print(char *string)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	00 d0       	rcall	.+0      	; 0x2652 <EF_void_LCD_Clear_then_print+0x6>
    2652:	0f 92       	push	r0
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	9b 83       	std	Y+3, r25	; 0x03
    265a:	8a 83       	std	Y+2, r24	; 0x02
	U8_t i = 0;
    265c:	19 82       	std	Y+1, r1	; 0x01

	EF_void_LCD_Clear_Screen();
    265e:	0e 94 75 13 	call	0x26ea	; 0x26ea <EF_void_LCD_Clear_Screen>
    2662:	0e c0       	rjmp	.+28     	; 0x2680 <EF_void_LCD_Clear_then_print+0x34>
	while(string[i]!=0)
	{
		EF_void_LCD_send_data(string[i]);
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	9b 81       	ldd	r25, Y+3	; 0x03
    266e:	fc 01       	movw	r30, r24
    2670:	e2 0f       	add	r30, r18
    2672:	f3 1f       	adc	r31, r19
    2674:	80 81       	ld	r24, Z
    2676:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <EF_void_LCD_send_data>
		i++;
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	8f 5f       	subi	r24, 0xFF	; 255
    267e:	89 83       	std	Y+1, r24	; 0x01
void EF_void_LCD_Clear_then_print(char *string)
{
	U8_t i = 0;

	EF_void_LCD_Clear_Screen();
	while(string[i]!=0)
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	9b 81       	ldd	r25, Y+3	; 0x03
    268a:	fc 01       	movw	r30, r24
    268c:	e2 0f       	add	r30, r18
    268e:	f3 1f       	adc	r31, r19
    2690:	80 81       	ld	r24, Z
    2692:	88 23       	and	r24, r24
    2694:	39 f7       	brne	.-50     	; 0x2664 <EF_void_LCD_Clear_then_print+0x18>
	{
		EF_void_LCD_send_data(string[i]);
		i++;
	}
}
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <EF_void_LCD_print_ByLength>:
 * 				U8_t  length:  number of characters to be displayed
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_print_ByLength(unsigned char *string, U8_t length)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <EF_void_LCD_print_ByLength+0x6>
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <EF_void_LCD_print_ByLength+0x8>
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	9b 83       	std	Y+3, r25	; 0x03
    26b0:	8a 83       	std	Y+2, r24	; 0x02
    26b2:	6c 83       	std	Y+4, r22	; 0x04
	U8_t i = 0;
    26b4:	19 82       	std	Y+1, r1	; 0x01
    26b6:	0e c0       	rjmp	.+28     	; 0x26d4 <EF_void_LCD_print_ByLength+0x32>

	while( i < length)
	{
		EF_void_LCD_send_data(string[i]);
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	28 2f       	mov	r18, r24
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	9b 81       	ldd	r25, Y+3	; 0x03
    26c2:	fc 01       	movw	r30, r24
    26c4:	e2 0f       	add	r30, r18
    26c6:	f3 1f       	adc	r31, r19
    26c8:	80 81       	ld	r24, Z
    26ca:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <EF_void_LCD_send_data>
		i++;
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	8f 5f       	subi	r24, 0xFF	; 255
    26d2:	89 83       	std	Y+1, r24	; 0x01
 ***********************************************************************/
void EF_void_LCD_print_ByLength(unsigned char *string, U8_t length)
{
	U8_t i = 0;

	while( i < length)
    26d4:	99 81       	ldd	r25, Y+1	; 0x01
    26d6:	8c 81       	ldd	r24, Y+4	; 0x04
    26d8:	98 17       	cp	r25, r24
    26da:	70 f3       	brcs	.-36     	; 0x26b8 <EF_void_LCD_print_ByLength+0x16>
	{
		EF_void_LCD_send_data(string[i]);
		i++;
	}
}
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <EF_void_LCD_Clear_Screen>:
 * PARAMETERS  : Void.
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_Clear_Screen(void)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	a6 97       	sbiw	r28, 0x26	; 38
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
	EF_void_LCD_send_command(1<<0);
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <EF_void_LCD_send_command>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a0 e0       	ldi	r26, 0x00	; 0
    270a:	b0 e4       	ldi	r27, 0x40	; 64
    270c:	8b a3       	std	Y+35, r24	; 0x23
    270e:	9c a3       	std	Y+36, r25	; 0x24
    2710:	ad a3       	std	Y+37, r26	; 0x25
    2712:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2714:	6b a1       	ldd	r22, Y+35	; 0x23
    2716:	7c a1       	ldd	r23, Y+36	; 0x24
    2718:	8d a1       	ldd	r24, Y+37	; 0x25
    271a:	9e a1       	ldd	r25, Y+38	; 0x26
    271c:	2b ea       	ldi	r18, 0xAB	; 171
    271e:	3a ea       	ldi	r19, 0xAA	; 170
    2720:	4a e2       	ldi	r20, 0x2A	; 42
    2722:	50 e4       	ldi	r21, 0x40	; 64
    2724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	8f 8f       	std	Y+31, r24	; 0x1f
    272e:	98 a3       	std	Y+32, r25	; 0x20
    2730:	a9 a3       	std	Y+33, r26	; 0x21
    2732:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2734:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2736:	78 a1       	ldd	r23, Y+32	; 0x20
    2738:	89 a1       	ldd	r24, Y+33	; 0x21
    273a:	9a a1       	ldd	r25, Y+34	; 0x22
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e8       	ldi	r20, 0x80	; 128
    2742:	5f e3       	ldi	r21, 0x3F	; 63
    2744:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2748:	88 23       	and	r24, r24
    274a:	1c f4       	brge	.+6      	; 0x2752 <EF_void_LCD_Clear_Screen+0x68>
		__ticks = 1;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	8e 8f       	std	Y+30, r24	; 0x1e
    2750:	91 c0       	rjmp	.+290    	; 0x2874 <EF_void_LCD_Clear_Screen+0x18a>
	else if (__tmp > 255)
    2752:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2754:	78 a1       	ldd	r23, Y+32	; 0x20
    2756:	89 a1       	ldd	r24, Y+33	; 0x21
    2758:	9a a1       	ldd	r25, Y+34	; 0x22
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	4f e7       	ldi	r20, 0x7F	; 127
    2760:	53 e4       	ldi	r21, 0x43	; 67
    2762:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2766:	18 16       	cp	r1, r24
    2768:	0c f0       	brlt	.+2      	; 0x276c <EF_void_LCD_Clear_Screen+0x82>
    276a:	7b c0       	rjmp	.+246    	; 0x2862 <EF_void_LCD_Clear_Screen+0x178>
	{
		_delay_ms(__us / 1000.0);
    276c:	6b a1       	ldd	r22, Y+35	; 0x23
    276e:	7c a1       	ldd	r23, Y+36	; 0x24
    2770:	8d a1       	ldd	r24, Y+37	; 0x25
    2772:	9e a1       	ldd	r25, Y+38	; 0x26
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	4a e7       	ldi	r20, 0x7A	; 122
    277a:	54 e4       	ldi	r21, 0x44	; 68
    277c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	8a 8f       	std	Y+26, r24	; 0x1a
    2786:	9b 8f       	std	Y+27, r25	; 0x1b
    2788:	ac 8f       	std	Y+28, r26	; 0x1c
    278a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    278e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2790:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2792:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	4a ef       	ldi	r20, 0xFA	; 250
    279a:	54 e4       	ldi	r21, 0x44	; 68
    279c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	8e 8b       	std	Y+22, r24	; 0x16
    27a6:	9f 8b       	std	Y+23, r25	; 0x17
    27a8:	a8 8f       	std	Y+24, r26	; 0x18
    27aa:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    27ac:	6e 89       	ldd	r22, Y+22	; 0x16
    27ae:	7f 89       	ldd	r23, Y+23	; 0x17
    27b0:	88 8d       	ldd	r24, Y+24	; 0x18
    27b2:	99 8d       	ldd	r25, Y+25	; 0x19
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	5f e3       	ldi	r21, 0x3F	; 63
    27bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c0:	88 23       	and	r24, r24
    27c2:	2c f4       	brge	.+10     	; 0x27ce <EF_void_LCD_Clear_Screen+0xe4>
		__ticks = 1;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	9d 8b       	std	Y+21, r25	; 0x15
    27ca:	8c 8b       	std	Y+20, r24	; 0x14
    27cc:	3f c0       	rjmp	.+126    	; 0x284c <EF_void_LCD_Clear_Screen+0x162>
	else if (__tmp > 65535)
    27ce:	6e 89       	ldd	r22, Y+22	; 0x16
    27d0:	7f 89       	ldd	r23, Y+23	; 0x17
    27d2:	88 8d       	ldd	r24, Y+24	; 0x18
    27d4:	99 8d       	ldd	r25, Y+25	; 0x19
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	3f ef       	ldi	r19, 0xFF	; 255
    27da:	4f e7       	ldi	r20, 0x7F	; 127
    27dc:	57 e4       	ldi	r21, 0x47	; 71
    27de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e2:	18 16       	cp	r1, r24
    27e4:	4c f5       	brge	.+82     	; 0x2838 <EF_void_LCD_Clear_Screen+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    27e8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    27ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e2       	ldi	r20, 0x20	; 32
    27f4:	51 e4       	ldi	r21, 0x41	; 65
    27f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	9d 8b       	std	Y+21, r25	; 0x15
    280c:	8c 8b       	std	Y+20, r24	; 0x14
    280e:	0f c0       	rjmp	.+30     	; 0x282e <EF_void_LCD_Clear_Screen+0x144>
    2810:	88 ec       	ldi	r24, 0xC8	; 200
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9b 8b       	std	Y+19, r25	; 0x13
    2816:	8a 8b       	std	Y+18, r24	; 0x12
    2818:	8a 89       	ldd	r24, Y+18	; 0x12
    281a:	9b 89       	ldd	r25, Y+19	; 0x13
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <EF_void_LCD_Clear_Screen+0x132>
    2820:	9b 8b       	std	Y+19, r25	; 0x13
    2822:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2824:	8c 89       	ldd	r24, Y+20	; 0x14
    2826:	9d 89       	ldd	r25, Y+21	; 0x15
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	9d 8b       	std	Y+21, r25	; 0x15
    282c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282e:	8c 89       	ldd	r24, Y+20	; 0x14
    2830:	9d 89       	ldd	r25, Y+21	; 0x15
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	69 f7       	brne	.-38     	; 0x2810 <EF_void_LCD_Clear_Screen+0x126>
    2836:	24 c0       	rjmp	.+72     	; 0x2880 <EF_void_LCD_Clear_Screen+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2838:	6e 89       	ldd	r22, Y+22	; 0x16
    283a:	7f 89       	ldd	r23, Y+23	; 0x17
    283c:	88 8d       	ldd	r24, Y+24	; 0x18
    283e:	99 8d       	ldd	r25, Y+25	; 0x19
    2840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	9d 8b       	std	Y+21, r25	; 0x15
    284a:	8c 8b       	std	Y+20, r24	; 0x14
    284c:	8c 89       	ldd	r24, Y+20	; 0x14
    284e:	9d 89       	ldd	r25, Y+21	; 0x15
    2850:	99 8b       	std	Y+17, r25	; 0x11
    2852:	88 8b       	std	Y+16, r24	; 0x10
    2854:	88 89       	ldd	r24, Y+16	; 0x10
    2856:	99 89       	ldd	r25, Y+17	; 0x11
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <EF_void_LCD_Clear_Screen+0x16e>
    285c:	99 8b       	std	Y+17, r25	; 0x11
    285e:	88 8b       	std	Y+16, r24	; 0x10
    2860:	0f c0       	rjmp	.+30     	; 0x2880 <EF_void_LCD_Clear_Screen+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2862:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2864:	78 a1       	ldd	r23, Y+32	; 0x20
    2866:	89 a1       	ldd	r24, Y+33	; 0x21
    2868:	9a a1       	ldd	r25, Y+34	; 0x22
    286a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	8e 8f       	std	Y+30, r24	; 0x1e
    2874:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2876:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2878:	8f 85       	ldd	r24, Y+15	; 0x0f
    287a:	8a 95       	dec	r24
    287c:	f1 f7       	brne	.-4      	; 0x287a <EF_void_LCD_Clear_Screen+0x190>
    287e:	8f 87       	std	Y+15, r24	; 0x0f
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	a0 e2       	ldi	r26, 0x20	; 32
    2886:	b1 e4       	ldi	r27, 0x41	; 65
    2888:	8b 87       	std	Y+11, r24	; 0x0b
    288a:	9c 87       	std	Y+12, r25	; 0x0c
    288c:	ad 87       	std	Y+13, r26	; 0x0d
    288e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2890:	6b 85       	ldd	r22, Y+11	; 0x0b
    2892:	7c 85       	ldd	r23, Y+12	; 0x0c
    2894:	8d 85       	ldd	r24, Y+13	; 0x0d
    2896:	9e 85       	ldd	r25, Y+14	; 0x0e
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	4a ef       	ldi	r20, 0xFA	; 250
    289e:	54 e4       	ldi	r21, 0x44	; 68
    28a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	8f 83       	std	Y+7, r24	; 0x07
    28aa:	98 87       	std	Y+8, r25	; 0x08
    28ac:	a9 87       	std	Y+9, r26	; 0x09
    28ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28b0:	6f 81       	ldd	r22, Y+7	; 0x07
    28b2:	78 85       	ldd	r23, Y+8	; 0x08
    28b4:	89 85       	ldd	r24, Y+9	; 0x09
    28b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e8       	ldi	r20, 0x80	; 128
    28be:	5f e3       	ldi	r21, 0x3F	; 63
    28c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c4:	88 23       	and	r24, r24
    28c6:	2c f4       	brge	.+10     	; 0x28d2 <EF_void_LCD_Clear_Screen+0x1e8>
		__ticks = 1;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9e 83       	std	Y+6, r25	; 0x06
    28ce:	8d 83       	std	Y+5, r24	; 0x05
    28d0:	3f c0       	rjmp	.+126    	; 0x2950 <EF_void_LCD_Clear_Screen+0x266>
	else if (__tmp > 65535)
    28d2:	6f 81       	ldd	r22, Y+7	; 0x07
    28d4:	78 85       	ldd	r23, Y+8	; 0x08
    28d6:	89 85       	ldd	r24, Y+9	; 0x09
    28d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	3f ef       	ldi	r19, 0xFF	; 255
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	57 e4       	ldi	r21, 0x47	; 71
    28e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	4c f5       	brge	.+82     	; 0x293c <EF_void_LCD_Clear_Screen+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e2       	ldi	r20, 0x20	; 32
    28f8:	51 e4       	ldi	r21, 0x41	; 65
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	9e 83       	std	Y+6, r25	; 0x06
    2910:	8d 83       	std	Y+5, r24	; 0x05
    2912:	0f c0       	rjmp	.+30     	; 0x2932 <EF_void_LCD_Clear_Screen+0x248>
    2914:	88 ec       	ldi	r24, 0xC8	; 200
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	9c 83       	std	Y+4, r25	; 0x04
    291a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	9c 81       	ldd	r25, Y+4	; 0x04
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <EF_void_LCD_Clear_Screen+0x236>
    2924:	9c 83       	std	Y+4, r25	; 0x04
    2926:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	9e 83       	std	Y+6, r25	; 0x06
    2930:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2932:	8d 81       	ldd	r24, Y+5	; 0x05
    2934:	9e 81       	ldd	r25, Y+6	; 0x06
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	69 f7       	brne	.-38     	; 0x2914 <EF_void_LCD_Clear_Screen+0x22a>
    293a:	14 c0       	rjmp	.+40     	; 0x2964 <EF_void_LCD_Clear_Screen+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293c:	6f 81       	ldd	r22, Y+7	; 0x07
    293e:	78 85       	ldd	r23, Y+8	; 0x08
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	9e 83       	std	Y+6, r25	; 0x06
    294e:	8d 83       	std	Y+5, r24	; 0x05
    2950:	8d 81       	ldd	r24, Y+5	; 0x05
    2952:	9e 81       	ldd	r25, Y+6	; 0x06
    2954:	9a 83       	std	Y+2, r25	; 0x02
    2956:	89 83       	std	Y+1, r24	; 0x01
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	9a 81       	ldd	r25, Y+2	; 0x02
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <EF_void_LCD_Clear_Screen+0x272>
    2960:	9a 83       	std	Y+2, r25	; 0x02
    2962:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
	_delay_ms(10);
}
    2964:	a6 96       	adiw	r28, 0x26	; 38
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	de bf       	out	0x3e, r29	; 62
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	cd bf       	out	0x3d, r28	; 61
    2970:	cf 91       	pop	r28
    2972:	df 91       	pop	r29
    2974:	08 95       	ret

00002976 <EF_void_uploadCustomChar>:
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_uploadCustomChar(U8_t location, unsigned char *character)

{
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	00 d0       	rcall	.+0      	; 0x297c <EF_void_uploadCustomChar+0x6>
    297c:	00 d0       	rcall	.+0      	; 0x297e <EF_void_uploadCustomChar+0x8>
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	8a 83       	std	Y+2, r24	; 0x02
    2984:	7c 83       	std	Y+4, r23	; 0x04
    2986:	6b 83       	std	Y+3, r22	; 0x03
	U8_t ArrayIndex;
	/* the Add offset must be 0 to 7*/
	if (location < 8)
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	88 30       	cpi	r24, 0x08	; 8
    298c:	f8 f4       	brcc	.+62     	; 0x29cc <EF_void_uploadCustomChar+0x56>
	{
		EF_void_LCD_send_command(0x40 + (location * 8));
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	88 2f       	mov	r24, r24
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	08 96       	adiw	r24, 0x08	; 8
    2996:	88 0f       	add	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	88 0f       	add	r24, r24
    299c:	99 1f       	adc	r25, r25
    299e:	88 0f       	add	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <EF_void_LCD_send_command>
		for (ArrayIndex = 0; ArrayIndex < 8; ArrayIndex++)
    29a6:	19 82       	std	Y+1, r1	; 0x01
    29a8:	0e c0       	rjmp	.+28     	; 0x29c6 <EF_void_uploadCustomChar+0x50>
		{
			EF_void_LCD_send_data(character[ArrayIndex]);
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	28 2f       	mov	r18, r24
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	9c 81       	ldd	r25, Y+4	; 0x04
    29b4:	fc 01       	movw	r30, r24
    29b6:	e2 0f       	add	r30, r18
    29b8:	f3 1f       	adc	r31, r19
    29ba:	80 81       	ld	r24, Z
    29bc:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <EF_void_LCD_send_data>
	U8_t ArrayIndex;
	/* the Add offset must be 0 to 7*/
	if (location < 8)
	{
		EF_void_LCD_send_command(0x40 + (location * 8));
		for (ArrayIndex = 0; ArrayIndex < 8; ArrayIndex++)
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	8f 5f       	subi	r24, 0xFF	; 255
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	88 30       	cpi	r24, 0x08	; 8
    29ca:	78 f3       	brcs	.-34     	; 0x29aa <EF_void_uploadCustomChar+0x34>
	else
	{
		/* TODO: return Error */
	}

}
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <EF_void_LCD_HextoASCII>:
 * PARAMETERS  : hex: pointer to hex (one byte)
 *
 * Return Value: Void.
 ***********************************************************************/
void EF_void_LCD_HextoASCII(U8_t *hex)
{
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	00 d0       	rcall	.+0      	; 0x29e0 <EF_void_LCD_HextoASCII+0x6>
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <EF_void_LCD_HextoASCII+0x8>
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	9c 83       	std	Y+4, r25	; 0x04
    29e8:	8b 83       	std	Y+3, r24	; 0x03

	U8_t temp_L = 0;                    // dummy variable that will hold LSBs of Hex number
    29ea:	1a 82       	std	Y+2, r1	; 0x02
	U8_t temp_H = 0;                    // dummy variable that will hold MSBs of Hex number
    29ec:	19 82       	std	Y+1, r1	; 0x01

	temp_H = *hex & 0xF0;           // Obtain the upper 4 bits (MSBs) of hex number
    29ee:	eb 81       	ldd	r30, Y+3	; 0x03
    29f0:	fc 81       	ldd	r31, Y+4	; 0x04
    29f2:	80 81       	ld	r24, Z
    29f4:	80 7f       	andi	r24, 0xF0	; 240
    29f6:	89 83       	std	Y+1, r24	; 0x01
	temp_H = temp_H >> 4;           //
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	82 95       	swap	r24
    29fc:	8f 70       	andi	r24, 0x0F	; 15
    29fe:	89 83       	std	Y+1, r24	; 0x01

	if(temp_H >9)                   // Check if the number is a letter
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	8a 30       	cpi	r24, 0x0A	; 10
    2a04:	20 f0       	brcs	.+8      	; 0x2a0e <EF_void_LCD_HextoASCII+0x34>
	{
		temp_H += 0x37;             // Convert the number to a letter in ASCII
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	89 5c       	subi	r24, 0xC9	; 201
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	03 c0       	rjmp	.+6      	; 0x2a14 <EF_void_LCD_HextoASCII+0x3a>
	}
	else
	{
		temp_H += 0x30;             // Convert the number to ASCII number
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	80 5d       	subi	r24, 0xD0	; 208
    2a12:	89 83       	std	Y+1, r24	; 0x01
	}

	EF_void_LCD_send_data(temp_H);           // Display the number
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <EF_void_LCD_send_data>

	temp_L = *hex & 0x0F;           // Obtain the lower 4 bits (LSBs) of hex number
    2a1a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a1c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a1e:	80 81       	ld	r24, Z
    2a20:	8f 70       	andi	r24, 0x0F	; 15
    2a22:	8a 83       	std	Y+2, r24	; 0x02

	if(temp_L >9)                   // Check if the the number is a letter
    2a24:	8a 81       	ldd	r24, Y+2	; 0x02
    2a26:	8a 30       	cpi	r24, 0x0A	; 10
    2a28:	20 f0       	brcs	.+8      	; 0x2a32 <EF_void_LCD_HextoASCII+0x58>
	{
		temp_L += 0x37;             // Convert the number to a letter in ASCII
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	89 5c       	subi	r24, 0xC9	; 201
    2a2e:	8a 83       	std	Y+2, r24	; 0x02
    2a30:	03 c0       	rjmp	.+6      	; 0x2a38 <EF_void_LCD_HextoASCII+0x5e>
	}
	else
	{
		temp_L += 0x30;             // Convert the number to ASCII number
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	80 5d       	subi	r24, 0xD0	; 208
    2a36:	8a 83       	std	Y+2, r24	; 0x02
	}

	EF_void_LCD_send_data(temp_L);           // Display the number
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <EF_void_LCD_send_data>
}
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <LCD_4BIT_Write_Init>:




void LCD_4BIT_Write_Init ( U8_t temp)
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	6d 97       	sbiw	r28, 0x1d	; 29
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA_PORT = temp;
    2a62:	e8 e3       	ldi	r30, 0x38	; 56
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a68:	80 83       	st	Z, r24
	LCD_RS_PORT &= ~(1<<LCD_RS_PIN);
    2a6a:	a5 e3       	ldi	r26, 0x35	; 53
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	e5 e3       	ldi	r30, 0x35	; 53
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	8f 7b       	andi	r24, 0xBF	; 191
    2a76:	8c 93       	st	X, r24
	LCD_EN_PORT |= (1<<LCD_ENABLE_PIN);
    2a78:	a5 e3       	ldi	r26, 0x35	; 53
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	e5 e3       	ldi	r30, 0x35	; 53
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	80 68       	ori	r24, 0x80	; 128
    2a84:	8c 93       	st	X, r24
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 e8       	ldi	r26, 0x80	; 128
    2a8c:	bf e3       	ldi	r27, 0x3F	; 63
    2a8e:	89 8f       	std	Y+25, r24	; 0x19
    2a90:	9a 8f       	std	Y+26, r25	; 0x1a
    2a92:	ab 8f       	std	Y+27, r26	; 0x1b
    2a94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a96:	69 8d       	ldd	r22, Y+25	; 0x19
    2a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	4a ef       	ldi	r20, 0xFA	; 250
    2aa4:	54 e4       	ldi	r21, 0x44	; 68
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	8d 8b       	std	Y+21, r24	; 0x15
    2ab0:	9e 8b       	std	Y+22, r25	; 0x16
    2ab2:	af 8b       	std	Y+23, r26	; 0x17
    2ab4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    2aba:	8f 89       	ldd	r24, Y+23	; 0x17
    2abc:	98 8d       	ldd	r25, Y+24	; 0x18
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e8       	ldi	r20, 0x80	; 128
    2ac4:	5f e3       	ldi	r21, 0x3F	; 63
    2ac6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aca:	88 23       	and	r24, r24
    2acc:	2c f4       	brge	.+10     	; 0x2ad8 <LCD_4BIT_Write_Init+0x8c>
		__ticks = 1;
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	9c 8b       	std	Y+20, r25	; 0x14
    2ad4:	8b 8b       	std	Y+19, r24	; 0x13
    2ad6:	3f c0       	rjmp	.+126    	; 0x2b56 <LCD_4BIT_Write_Init+0x10a>
	else if (__tmp > 65535)
    2ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    2ada:	7e 89       	ldd	r23, Y+22	; 0x16
    2adc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ade:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	3f ef       	ldi	r19, 0xFF	; 255
    2ae4:	4f e7       	ldi	r20, 0x7F	; 127
    2ae6:	57 e4       	ldi	r21, 0x47	; 71
    2ae8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aec:	18 16       	cp	r1, r24
    2aee:	4c f5       	brge	.+82     	; 0x2b42 <LCD_4BIT_Write_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af0:	69 8d       	ldd	r22, Y+25	; 0x19
    2af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e2       	ldi	r20, 0x20	; 32
    2afe:	51 e4       	ldi	r21, 0x41	; 65
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	9c 8b       	std	Y+20, r25	; 0x14
    2b16:	8b 8b       	std	Y+19, r24	; 0x13
    2b18:	0f c0       	rjmp	.+30     	; 0x2b38 <LCD_4BIT_Write_Init+0xec>
    2b1a:	88 ec       	ldi	r24, 0xC8	; 200
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9a 8b       	std	Y+18, r25	; 0x12
    2b20:	89 8b       	std	Y+17, r24	; 0x11
    2b22:	89 89       	ldd	r24, Y+17	; 0x11
    2b24:	9a 89       	ldd	r25, Y+18	; 0x12
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <LCD_4BIT_Write_Init+0xda>
    2b2a:	9a 8b       	std	Y+18, r25	; 0x12
    2b2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b30:	9c 89       	ldd	r25, Y+20	; 0x14
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	9c 8b       	std	Y+20, r25	; 0x14
    2b36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b38:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	69 f7       	brne	.-38     	; 0x2b1a <LCD_4BIT_Write_Init+0xce>
    2b40:	14 c0       	rjmp	.+40     	; 0x2b6a <LCD_4BIT_Write_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b42:	6d 89       	ldd	r22, Y+21	; 0x15
    2b44:	7e 89       	ldd	r23, Y+22	; 0x16
    2b46:	8f 89       	ldd	r24, Y+23	; 0x17
    2b48:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9c 8b       	std	Y+20, r25	; 0x14
    2b54:	8b 8b       	std	Y+19, r24	; 0x13
    2b56:	8b 89       	ldd	r24, Y+19	; 0x13
    2b58:	9c 89       	ldd	r25, Y+20	; 0x14
    2b5a:	98 8b       	std	Y+16, r25	; 0x10
    2b5c:	8f 87       	std	Y+15, r24	; 0x0f
    2b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b60:	98 89       	ldd	r25, Y+16	; 0x10
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <LCD_4BIT_Write_Init+0x116>
    2b66:	98 8b       	std	Y+16, r25	; 0x10
    2b68:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_EN_PORT &= ~(1<<LCD_ENABLE_PIN);
    2b6a:	a5 e3       	ldi	r26, 0x35	; 53
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	e5 e3       	ldi	r30, 0x35	; 53
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	8f 77       	andi	r24, 0x7F	; 127
    2b76:	8c 93       	st	X, r24
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	a0 e8       	ldi	r26, 0x80	; 128
    2b7e:	bf e3       	ldi	r27, 0x3F	; 63
    2b80:	8b 87       	std	Y+11, r24	; 0x0b
    2b82:	9c 87       	std	Y+12, r25	; 0x0c
    2b84:	ad 87       	std	Y+13, r26	; 0x0d
    2b86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	4a ef       	ldi	r20, 0xFA	; 250
    2b96:	54 e4       	ldi	r21, 0x44	; 68
    2b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	8f 83       	std	Y+7, r24	; 0x07
    2ba2:	98 87       	std	Y+8, r25	; 0x08
    2ba4:	a9 87       	std	Y+9, r26	; 0x09
    2ba6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    2baa:	78 85       	ldd	r23, Y+8	; 0x08
    2bac:	89 85       	ldd	r24, Y+9	; 0x09
    2bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e8       	ldi	r20, 0x80	; 128
    2bb6:	5f e3       	ldi	r21, 0x3F	; 63
    2bb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bbc:	88 23       	and	r24, r24
    2bbe:	2c f4       	brge	.+10     	; 0x2bca <LCD_4BIT_Write_Init+0x17e>
		__ticks = 1;
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	9e 83       	std	Y+6, r25	; 0x06
    2bc6:	8d 83       	std	Y+5, r24	; 0x05
    2bc8:	3f c0       	rjmp	.+126    	; 0x2c48 <LCD_4BIT_Write_Init+0x1fc>
	else if (__tmp > 65535)
    2bca:	6f 81       	ldd	r22, Y+7	; 0x07
    2bcc:	78 85       	ldd	r23, Y+8	; 0x08
    2bce:	89 85       	ldd	r24, Y+9	; 0x09
    2bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	3f ef       	ldi	r19, 0xFF	; 255
    2bd6:	4f e7       	ldi	r20, 0x7F	; 127
    2bd8:	57 e4       	ldi	r21, 0x47	; 71
    2bda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bde:	18 16       	cp	r1, r24
    2be0:	4c f5       	brge	.+82     	; 0x2c34 <LCD_4BIT_Write_Init+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e2       	ldi	r20, 0x20	; 32
    2bf0:	51 e4       	ldi	r21, 0x41	; 65
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
    2c0a:	0f c0       	rjmp	.+30     	; 0x2c2a <LCD_4BIT_Write_Init+0x1de>
    2c0c:	88 ec       	ldi	r24, 0xC8	; 200
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	9c 83       	std	Y+4, r25	; 0x04
    2c12:	8b 83       	std	Y+3, r24	; 0x03
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	9c 81       	ldd	r25, Y+4	; 0x04
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	f1 f7       	brne	.-4      	; 0x2c18 <LCD_4BIT_Write_Init+0x1cc>
    2c1c:	9c 83       	std	Y+4, r25	; 0x04
    2c1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c20:	8d 81       	ldd	r24, Y+5	; 0x05
    2c22:	9e 81       	ldd	r25, Y+6	; 0x06
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	9e 83       	std	Y+6, r25	; 0x06
    2c28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2e:	00 97       	sbiw	r24, 0x00	; 0
    2c30:	69 f7       	brne	.-38     	; 0x2c0c <LCD_4BIT_Write_Init+0x1c0>
    2c32:	14 c0       	rjmp	.+40     	; 0x2c5c <LCD_4BIT_Write_Init+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c34:	6f 81       	ldd	r22, Y+7	; 0x07
    2c36:	78 85       	ldd	r23, Y+8	; 0x08
    2c38:	89 85       	ldd	r24, Y+9	; 0x09
    2c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9e 83       	std	Y+6, r25	; 0x06
    2c46:	8d 83       	std	Y+5, r24	; 0x05
    2c48:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4c:	9a 83       	std	Y+2, r25	; 0x02
    2c4e:	89 83       	std	Y+1, r24	; 0x01
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	9a 81       	ldd	r25, Y+2	; 0x02
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <LCD_4BIT_Write_Init+0x208>
    2c58:	9a 83       	std	Y+2, r25	; 0x02
    2c5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2c5c:	6d 96       	adiw	r28, 0x1d	; 29
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	cf 91       	pop	r28
    2c6a:	df 91       	pop	r29
    2c6c:	08 95       	ret

00002c6e <EF_void_LCD_Newline>:


void EF_void_LCD_Newline()
{
    2c6e:	df 93       	push	r29
    2c70:	cf 93       	push	r28
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	2e 97       	sbiw	r28, 0x0e	; 14
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61

	EF_void_LCD_send_command(0xC0);
    2c82:	80 ec       	ldi	r24, 0xC0	; 192
    2c84:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <EF_void_LCD_send_command>
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	a0 ea       	ldi	r26, 0xA0	; 160
    2c8e:	b1 e4       	ldi	r27, 0x41	; 65
    2c90:	8b 87       	std	Y+11, r24	; 0x0b
    2c92:	9c 87       	std	Y+12, r25	; 0x0c
    2c94:	ad 87       	std	Y+13, r26	; 0x0d
    2c96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	4a ef       	ldi	r20, 0xFA	; 250
    2ca6:	54 e4       	ldi	r21, 0x44	; 68
    2ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	8f 83       	std	Y+7, r24	; 0x07
    2cb2:	98 87       	std	Y+8, r25	; 0x08
    2cb4:	a9 87       	std	Y+9, r26	; 0x09
    2cb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cba:	78 85       	ldd	r23, Y+8	; 0x08
    2cbc:	89 85       	ldd	r24, Y+9	; 0x09
    2cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e8       	ldi	r20, 0x80	; 128
    2cc6:	5f e3       	ldi	r21, 0x3F	; 63
    2cc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ccc:	88 23       	and	r24, r24
    2cce:	2c f4       	brge	.+10     	; 0x2cda <EF_void_LCD_Newline+0x6c>
		__ticks = 1;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	9e 83       	std	Y+6, r25	; 0x06
    2cd6:	8d 83       	std	Y+5, r24	; 0x05
    2cd8:	3f c0       	rjmp	.+126    	; 0x2d58 <EF_void_LCD_Newline+0xea>
	else if (__tmp > 65535)
    2cda:	6f 81       	ldd	r22, Y+7	; 0x07
    2cdc:	78 85       	ldd	r23, Y+8	; 0x08
    2cde:	89 85       	ldd	r24, Y+9	; 0x09
    2ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	3f ef       	ldi	r19, 0xFF	; 255
    2ce6:	4f e7       	ldi	r20, 0x7F	; 127
    2ce8:	57 e4       	ldi	r21, 0x47	; 71
    2cea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cee:	18 16       	cp	r1, r24
    2cf0:	4c f5       	brge	.+82     	; 0x2d44 <EF_void_LCD_Newline+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e2       	ldi	r20, 0x20	; 32
    2d00:	51 e4       	ldi	r21, 0x41	; 65
    2d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	bc 01       	movw	r22, r24
    2d0c:	cd 01       	movw	r24, r26
    2d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	9e 83       	std	Y+6, r25	; 0x06
    2d18:	8d 83       	std	Y+5, r24	; 0x05
    2d1a:	0f c0       	rjmp	.+30     	; 0x2d3a <EF_void_LCD_Newline+0xcc>
    2d1c:	88 ec       	ldi	r24, 0xC8	; 200
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	9c 83       	std	Y+4, r25	; 0x04
    2d22:	8b 83       	std	Y+3, r24	; 0x03
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	9c 81       	ldd	r25, Y+4	; 0x04
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	f1 f7       	brne	.-4      	; 0x2d28 <EF_void_LCD_Newline+0xba>
    2d2c:	9c 83       	std	Y+4, r25	; 0x04
    2d2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d30:	8d 81       	ldd	r24, Y+5	; 0x05
    2d32:	9e 81       	ldd	r25, Y+6	; 0x06
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	9e 83       	std	Y+6, r25	; 0x06
    2d38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	69 f7       	brne	.-38     	; 0x2d1c <EF_void_LCD_Newline+0xae>
    2d42:	14 c0       	rjmp	.+40     	; 0x2d6c <EF_void_LCD_Newline+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d44:	6f 81       	ldd	r22, Y+7	; 0x07
    2d46:	78 85       	ldd	r23, Y+8	; 0x08
    2d48:	89 85       	ldd	r24, Y+9	; 0x09
    2d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	9e 83       	std	Y+6, r25	; 0x06
    2d56:	8d 83       	std	Y+5, r24	; 0x05
    2d58:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5c:	9a 83       	std	Y+2, r25	; 0x02
    2d5e:	89 83       	std	Y+1, r24	; 0x01
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	9a 81       	ldd	r25, Y+2	; 0x02
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	f1 f7       	brne	.-4      	; 0x2d64 <EF_void_LCD_Newline+0xf6>
    2d68:	9a 83       	std	Y+2, r25	; 0x02
    2d6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2d6c:	2e 96       	adiw	r28, 0x0e	; 14
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <EF_void_LCD_print_Number>:


void EF_void_LCD_print_Number(S16_t s16Numberstring)
{
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	29 97       	sbiw	r28, 0x09	; 9
    2d88:	0f b6       	in	r0, 0x3f	; 63
    2d8a:	f8 94       	cli
    2d8c:	de bf       	out	0x3e, r29	; 62
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	cd bf       	out	0x3d, r28	; 61
    2d92:	99 87       	std	Y+9, r25	; 0x09
    2d94:	88 87       	std	Y+8, r24	; 0x08
	U8_t ArrayIndex = 0;
    2d96:	19 82       	std	Y+1, r1	; 0x01
	char s8DisplayStr[6] = {0};
    2d98:	86 e0       	ldi	r24, 0x06	; 6
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	32 96       	adiw	r30, 0x02	; 2
    2d9e:	df 01       	movw	r26, r30
    2da0:	98 2f       	mov	r25, r24
    2da2:	1d 92       	st	X+, r1
    2da4:	9a 95       	dec	r25
    2da6:	e9 f7       	brne	.-6      	; 0x2da2 <EF_void_LCD_print_Number+0x24>
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);
    2da8:	88 85       	ldd	r24, Y+8	; 0x08
    2daa:	99 85       	ldd	r25, Y+9	; 0x09
    2dac:	9e 01       	movw	r18, r28
    2dae:	2e 5f       	subi	r18, 0xFE	; 254
    2db0:	3f 4f       	sbci	r19, 0xFF	; 255
    2db2:	b9 01       	movw	r22, r18
    2db4:	4a e0       	ldi	r20, 0x0A	; 10
    2db6:	50 e0       	ldi	r21, 0x00	; 0
    2db8:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <itoa>

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    2dbc:	19 82       	std	Y+1, r1	; 0x01
    2dbe:	0e c0       	rjmp	.+28     	; 0x2ddc <EF_void_LCD_print_Number+0x5e>
	{
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	28 2f       	mov	r18, r24
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	ce 01       	movw	r24, r28
    2dc8:	02 96       	adiw	r24, 0x02	; 2
    2dca:	fc 01       	movw	r30, r24
    2dcc:	e2 0f       	add	r30, r18
    2dce:	f3 1f       	adc	r31, r19
    2dd0:	80 81       	ld	r24, Z
    2dd2:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <EF_void_LCD_send_data>
	char s8DisplayStr[6] = {0};
	/* convert number to ASCII */

	itoa(s16Numberstring, s8DisplayStr, 10);

	for(ArrayIndex = 0; s8DisplayStr[ArrayIndex] != 0; ArrayIndex++)
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	8f 5f       	subi	r24, 0xFF	; 255
    2dda:	89 83       	std	Y+1, r24	; 0x01
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	28 2f       	mov	r18, r24
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	ce 01       	movw	r24, r28
    2de4:	02 96       	adiw	r24, 0x02	; 2
    2de6:	fc 01       	movw	r30, r24
    2de8:	e2 0f       	add	r30, r18
    2dea:	f3 1f       	adc	r31, r19
    2dec:	80 81       	ld	r24, Z
    2dee:	88 23       	and	r24, r24
    2df0:	39 f7       	brne	.-50     	; 0x2dc0 <EF_void_LCD_print_Number+0x42>
	{
		EF_void_LCD_send_data(s8DisplayStr[ArrayIndex]);
	}
}
    2df2:	29 96       	adiw	r28, 0x09	; 9
    2df4:	0f b6       	in	r0, 0x3f	; 63
    2df6:	f8 94       	cli
    2df8:	de bf       	out	0x3e, r29	; 62
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	cd bf       	out	0x3d, r28	; 61
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <__vector_13>:
char Rec_Data[DEFAULT_BUFFER_SIZE];
char Counter=0;


ISR (USART_RXC_vect)
{
    2e04:	1f 92       	push	r1
    2e06:	0f 92       	push	r0
    2e08:	0f b6       	in	r0, 0x3f	; 63
    2e0a:	0f 92       	push	r0
    2e0c:	11 24       	eor	r1, r1
    2e0e:	2f 93       	push	r18
    2e10:	8f 93       	push	r24
    2e12:	9f 93       	push	r25
    2e14:	ef 93       	push	r30
    2e16:	ff 93       	push	r31
    2e18:	df 93       	push	r29
    2e1a:	cf 93       	push	r28
    2e1c:	0f 92       	push	r0
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
	uint8_t oldsrg = SREG;
    2e22:	ef e5       	ldi	r30, 0x5F	; 95
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	89 83       	std	Y+1, r24	; 0x01
	cli();
    2e2a:	f8 94       	cli

	Rec_Data[Counter] = UDR;
    2e2c:	80 91 32 06 	lds	r24, 0x0632
    2e30:	88 2f       	mov	r24, r24
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	ec e2       	ldi	r30, 0x2C	; 44
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	20 81       	ld	r18, Z
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	ed 5c       	subi	r30, 0xCD	; 205
    2e3e:	f9 4f       	sbci	r31, 0xF9	; 249
    2e40:	20 83       	st	Z, r18
	Counter++;
    2e42:	80 91 32 06 	lds	r24, 0x0632
    2e46:	8f 5f       	subi	r24, 0xFF	; 255
    2e48:	80 93 32 06 	sts	0x0632, r24

	if(Counter == DEFAULT_BUFFER_SIZE){
    2e4c:	80 91 32 06 	lds	r24, 0x0632
    2e50:	84 36       	cpi	r24, 0x64	; 100
    2e52:	11 f4       	brne	.+4      	; 0x2e58 <__vector_13+0x54>
		Counter = 0; //pointer = 0;
    2e54:	10 92 32 06 	sts	0x0632, r1
	}
	SREG = oldsrg;
    2e58:	ef e5       	ldi	r30, 0x5F	; 95
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	80 83       	st	Z, r24
}
    2e60:	0f 90       	pop	r0
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	ff 91       	pop	r31
    2e68:	ef 91       	pop	r30
    2e6a:	9f 91       	pop	r25
    2e6c:	8f 91       	pop	r24
    2e6e:	2f 91       	pop	r18
    2e70:	0f 90       	pop	r0
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	0f 90       	pop	r0
    2e76:	1f 90       	pop	r1
    2e78:	18 95       	reti

00002e7a <Check_Respond>:




char Check_Respond(char * Expected_Respond)
{
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	00 d0       	rcall	.+0      	; 0x2e80 <Check_Respond+0x6>
    2e80:	00 d0       	rcall	.+0      	; 0x2e82 <Check_Respond+0x8>
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
    2e86:	9b 83       	std	Y+3, r25	; 0x03
    2e88:	8a 83       	std	Y+2, r24	; 0x02
	char Respond_Length=0;
    2e8a:	19 82       	std	Y+1, r1	; 0x01

	Respond_Length=strlen(Expected_Respond);
    2e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e90:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <strlen>
    2e94:	89 83       	std	Y+1, r24	; 0x01

	if(strncmp(Rec_Data,Expected_Respond, Respond_Length)==0)
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	48 2f       	mov	r20, r24
    2e9a:	50 e0       	ldi	r21, 0x00	; 0
    2e9c:	83 e3       	ldi	r24, 0x33	; 51
    2e9e:	96 e0       	ldi	r25, 0x06	; 6
    2ea0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ea2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ea4:	b9 01       	movw	r22, r18
    2ea6:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <strncmp>
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	29 f4       	brne	.+10     	; 0x2eb8 <Check_Respond+0x3e>
	{
		Clear_REC_Buffer();
    2eae:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
		return TRUE;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	8c 83       	std	Y+4, r24	; 0x04
    2eb6:	01 c0       	rjmp	.+2      	; 0x2eba <Check_Respond+0x40>
	}
	return FALSE;
    2eb8:	1c 82       	std	Y+4, r1	; 0x04
    2eba:	8c 81       	ldd	r24, Y+4	; 0x04


}
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	0f 90       	pop	r0
    2ec4:	cf 91       	pop	r28
    2ec6:	df 91       	pop	r29
    2ec8:	08 95       	ret

00002eca <Check_Word_in_Respond>:


char Check_Word_in_Respond(char * Word)
{
    2eca:	df 93       	push	r29
    2ecc:	cf 93       	push	r28
    2ece:	00 d0       	rcall	.+0      	; 0x2ed0 <Check_Word_in_Respond+0x6>
    2ed0:	0f 92       	push	r0
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    2ed6:	9a 83       	std	Y+2, r25	; 0x02
    2ed8:	89 83       	std	Y+1, r24	; 0x01


	if(strstr(Rec_Data,Word) != 0)
    2eda:	83 e3       	ldi	r24, 0x33	; 51
    2edc:	96 e0       	ldi	r25, 0x06	; 6
    2ede:	29 81       	ldd	r18, Y+1	; 0x01
    2ee0:	3a 81       	ldd	r19, Y+2	; 0x02
    2ee2:	b9 01       	movw	r22, r18
    2ee4:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <strstr>
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	29 f0       	breq	.+10     	; 0x2ef6 <Check_Word_in_Respond+0x2c>
	{
		Clear_REC_Buffer();
    2eec:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
		return TRUE;
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	8b 83       	std	Y+3, r24	; 0x03
    2ef4:	01 c0       	rjmp	.+2      	; 0x2ef8 <Check_Word_in_Respond+0x2e>
	}

	return FALSE;
    2ef6:	1b 82       	std	Y+3, r1	; 0x03
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	cf 91       	pop	r28
    2f02:	df 91       	pop	r29
    2f04:	08 95       	ret

00002f06 <Clear_REC_Buffer>:

void Clear_REC_Buffer(void)
{
    2f06:	df 93       	push	r29
    2f08:	cf 93       	push	r28
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
	Counter=0;
    2f0e:	10 92 32 06 	sts	0x0632, r1
	memset(Rec_Data,'\0',DEFAULT_BUFFER_SIZE);
    2f12:	83 e3       	ldi	r24, 0x33	; 51
    2f14:	96 e0       	ldi	r25, 0x06	; 6
    2f16:	60 e0       	ldi	r22, 0x00	; 0
    2f18:	70 e0       	ldi	r23, 0x00	; 0
    2f1a:	44 e6       	ldi	r20, 0x64	; 100
    2f1c:	50 e0       	ldi	r21, 0x00	; 0
    2f1e:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <memset>
}
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <ESP_init>:

bool ESP_init(void)
{
    2f28:	0f 93       	push	r16
    2f2a:	1f 93       	push	r17
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	c5 56       	subi	r28, 0x65	; 101
    2f36:	d0 40       	sbci	r29, 0x00	; 0
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	f8 94       	cli
    2f3c:	de bf       	out	0x3e, r29	; 62
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	cd bf       	out	0x3d, r28	; 61
	char connection_status=0; unsigned int time_out=0;
    2f42:	fe 01       	movw	r30, r28
    2f44:	eb 59       	subi	r30, 0x9B	; 155
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	10 82       	st	Z, r1
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	ed 59       	subi	r30, 0x9D	; 157
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	11 82       	std	Z+1, r1	; 0x01
    2f52:	10 82       	st	Z, r1

	init_UART();
    2f54:	0e 94 90 07 	call	0xf20	; 0xf20 <init_UART>
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e1 5a       	subi	r30, 0xA1	; 161
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	aa ef       	ldi	r26, 0xFA	; 250
    2f64:	b4 e4       	ldi	r27, 0x44	; 68
    2f66:	80 83       	st	Z, r24
    2f68:	91 83       	std	Z+1, r25	; 0x01
    2f6a:	a2 83       	std	Z+2, r26	; 0x02
    2f6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f6e:	8e 01       	movw	r16, r28
    2f70:	05 5a       	subi	r16, 0xA5	; 165
    2f72:	1f 4f       	sbci	r17, 0xFF	; 255
    2f74:	fe 01       	movw	r30, r28
    2f76:	e1 5a       	subi	r30, 0xA1	; 161
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	60 81       	ld	r22, Z
    2f7c:	71 81       	ldd	r23, Z+1	; 0x01
    2f7e:	82 81       	ldd	r24, Z+2	; 0x02
    2f80:	93 81       	ldd	r25, Z+3	; 0x03
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	4a ef       	ldi	r20, 0xFA	; 250
    2f88:	54 e4       	ldi	r21, 0x44	; 68
    2f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	f8 01       	movw	r30, r16
    2f94:	80 83       	st	Z, r24
    2f96:	91 83       	std	Z+1, r25	; 0x01
    2f98:	a2 83       	std	Z+2, r26	; 0x02
    2f9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	e5 5a       	subi	r30, 0xA5	; 165
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	60 81       	ld	r22, Z
    2fa4:	71 81       	ldd	r23, Z+1	; 0x01
    2fa6:	82 81       	ldd	r24, Z+2	; 0x02
    2fa8:	93 81       	ldd	r25, Z+3	; 0x03
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e8       	ldi	r20, 0x80	; 128
    2fb0:	5f e3       	ldi	r21, 0x3F	; 63
    2fb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fb6:	88 23       	and	r24, r24
    2fb8:	44 f4       	brge	.+16     	; 0x2fca <ESP_init+0xa2>
		__ticks = 1;
    2fba:	fe 01       	movw	r30, r28
    2fbc:	e7 5a       	subi	r30, 0xA7	; 167
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	91 83       	std	Z+1, r25	; 0x01
    2fc6:	80 83       	st	Z, r24
    2fc8:	64 c0       	rjmp	.+200    	; 0x3092 <ESP_init+0x16a>
	else if (__tmp > 65535)
    2fca:	fe 01       	movw	r30, r28
    2fcc:	e5 5a       	subi	r30, 0xA5	; 165
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	60 81       	ld	r22, Z
    2fd2:	71 81       	ldd	r23, Z+1	; 0x01
    2fd4:	82 81       	ldd	r24, Z+2	; 0x02
    2fd6:	93 81       	ldd	r25, Z+3	; 0x03
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	3f ef       	ldi	r19, 0xFF	; 255
    2fdc:	4f e7       	ldi	r20, 0x7F	; 127
    2fde:	57 e4       	ldi	r21, 0x47	; 71
    2fe0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fe4:	18 16       	cp	r1, r24
    2fe6:	0c f0       	brlt	.+2      	; 0x2fea <ESP_init+0xc2>
    2fe8:	43 c0       	rjmp	.+134    	; 0x3070 <ESP_init+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fea:	fe 01       	movw	r30, r28
    2fec:	e1 5a       	subi	r30, 0xA1	; 161
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	60 81       	ld	r22, Z
    2ff2:	71 81       	ldd	r23, Z+1	; 0x01
    2ff4:	82 81       	ldd	r24, Z+2	; 0x02
    2ff6:	93 81       	ldd	r25, Z+3	; 0x03
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	40 e2       	ldi	r20, 0x20	; 32
    2ffe:	51 e4       	ldi	r21, 0x41	; 65
    3000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	8e 01       	movw	r16, r28
    300a:	07 5a       	subi	r16, 0xA7	; 167
    300c:	1f 4f       	sbci	r17, 0xFF	; 255
    300e:	bc 01       	movw	r22, r24
    3010:	cd 01       	movw	r24, r26
    3012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	f8 01       	movw	r30, r16
    301c:	91 83       	std	Z+1, r25	; 0x01
    301e:	80 83       	st	Z, r24
    3020:	1f c0       	rjmp	.+62     	; 0x3060 <ESP_init+0x138>
    3022:	fe 01       	movw	r30, r28
    3024:	e9 5a       	subi	r30, 0xA9	; 169
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	88 ec       	ldi	r24, 0xC8	; 200
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	91 83       	std	Z+1, r25	; 0x01
    302e:	80 83       	st	Z, r24
    3030:	fe 01       	movw	r30, r28
    3032:	e9 5a       	subi	r30, 0xA9	; 169
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	80 81       	ld	r24, Z
    3038:	91 81       	ldd	r25, Z+1	; 0x01
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <ESP_init+0x112>
    303e:	fe 01       	movw	r30, r28
    3040:	e9 5a       	subi	r30, 0xA9	; 169
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	91 83       	std	Z+1, r25	; 0x01
    3046:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3048:	de 01       	movw	r26, r28
    304a:	a7 5a       	subi	r26, 0xA7	; 167
    304c:	bf 4f       	sbci	r27, 0xFF	; 255
    304e:	fe 01       	movw	r30, r28
    3050:	e7 5a       	subi	r30, 0xA7	; 167
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	80 81       	ld	r24, Z
    3056:	91 81       	ldd	r25, Z+1	; 0x01
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	11 96       	adiw	r26, 0x01	; 1
    305c:	9c 93       	st	X, r25
    305e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3060:	fe 01       	movw	r30, r28
    3062:	e7 5a       	subi	r30, 0xA7	; 167
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	80 81       	ld	r24, Z
    3068:	91 81       	ldd	r25, Z+1	; 0x01
    306a:	00 97       	sbiw	r24, 0x00	; 0
    306c:	d1 f6       	brne	.-76     	; 0x3022 <ESP_init+0xfa>
    306e:	27 c0       	rjmp	.+78     	; 0x30be <ESP_init+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3070:	8e 01       	movw	r16, r28
    3072:	07 5a       	subi	r16, 0xA7	; 167
    3074:	1f 4f       	sbci	r17, 0xFF	; 255
    3076:	fe 01       	movw	r30, r28
    3078:	e5 5a       	subi	r30, 0xA5	; 165
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	60 81       	ld	r22, Z
    307e:	71 81       	ldd	r23, Z+1	; 0x01
    3080:	82 81       	ldd	r24, Z+2	; 0x02
    3082:	93 81       	ldd	r25, Z+3	; 0x03
    3084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	f8 01       	movw	r30, r16
    308e:	91 83       	std	Z+1, r25	; 0x01
    3090:	80 83       	st	Z, r24
    3092:	de 01       	movw	r26, r28
    3094:	ab 5a       	subi	r26, 0xAB	; 171
    3096:	bf 4f       	sbci	r27, 0xFF	; 255
    3098:	fe 01       	movw	r30, r28
    309a:	e7 5a       	subi	r30, 0xA7	; 167
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	80 81       	ld	r24, Z
    30a0:	91 81       	ldd	r25, Z+1	; 0x01
    30a2:	8d 93       	st	X+, r24
    30a4:	9c 93       	st	X, r25
    30a6:	fe 01       	movw	r30, r28
    30a8:	eb 5a       	subi	r30, 0xAB	; 171
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	80 81       	ld	r24, Z
    30ae:	91 81       	ldd	r25, Z+1	; 0x01
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	f1 f7       	brne	.-4      	; 0x30b0 <ESP_init+0x188>
    30b4:	fe 01       	movw	r30, r28
    30b6:	eb 5a       	subi	r30, 0xAB	; 171
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	91 83       	std	Z+1, r25	; 0x01
    30bc:	80 83       	st	Z, r24
	_delay_ms(2000);
	Clear_REC_Buffer();
    30be:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>



	UART_SEND_string("ATE0\r\n");
    30c2:	80 e6       	ldi	r24, 0x60	; 96
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    30ca:	bf c0       	rjmp	.+382    	; 0x324a <ESP_init+0x322>
	while(!((time_out>2000)||(Check_Respond("\r\nOK\r\n"))||(Check_Respond("ATE0\r\r\n\r\nOK\r\n"))))
    30cc:	fe 01       	movw	r30, r28
    30ce:	ef 5a       	subi	r30, 0xAF	; 175
    30d0:	ff 4f       	sbci	r31, 0xFF	; 255
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	a0 e8       	ldi	r26, 0x80	; 128
    30d8:	bf e3       	ldi	r27, 0x3F	; 63
    30da:	80 83       	st	Z, r24
    30dc:	91 83       	std	Z+1, r25	; 0x01
    30de:	a2 83       	std	Z+2, r26	; 0x02
    30e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e2:	8e 01       	movw	r16, r28
    30e4:	03 5b       	subi	r16, 0xB3	; 179
    30e6:	1f 4f       	sbci	r17, 0xFF	; 255
    30e8:	fe 01       	movw	r30, r28
    30ea:	ef 5a       	subi	r30, 0xAF	; 175
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	60 81       	ld	r22, Z
    30f0:	71 81       	ldd	r23, Z+1	; 0x01
    30f2:	82 81       	ldd	r24, Z+2	; 0x02
    30f4:	93 81       	ldd	r25, Z+3	; 0x03
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	4a ef       	ldi	r20, 0xFA	; 250
    30fc:	54 e4       	ldi	r21, 0x44	; 68
    30fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	f8 01       	movw	r30, r16
    3108:	80 83       	st	Z, r24
    310a:	91 83       	std	Z+1, r25	; 0x01
    310c:	a2 83       	std	Z+2, r26	; 0x02
    310e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3110:	fe 01       	movw	r30, r28
    3112:	e3 5b       	subi	r30, 0xB3	; 179
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	60 81       	ld	r22, Z
    3118:	71 81       	ldd	r23, Z+1	; 0x01
    311a:	82 81       	ldd	r24, Z+2	; 0x02
    311c:	93 81       	ldd	r25, Z+3	; 0x03
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	40 e8       	ldi	r20, 0x80	; 128
    3124:	5f e3       	ldi	r21, 0x3F	; 63
    3126:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    312a:	88 23       	and	r24, r24
    312c:	44 f4       	brge	.+16     	; 0x313e <ESP_init+0x216>
		__ticks = 1;
    312e:	fe 01       	movw	r30, r28
    3130:	e5 5b       	subi	r30, 0xB5	; 181
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	91 83       	std	Z+1, r25	; 0x01
    313a:	80 83       	st	Z, r24
    313c:	64 c0       	rjmp	.+200    	; 0x3206 <ESP_init+0x2de>
	else if (__tmp > 65535)
    313e:	fe 01       	movw	r30, r28
    3140:	e3 5b       	subi	r30, 0xB3	; 179
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	60 81       	ld	r22, Z
    3146:	71 81       	ldd	r23, Z+1	; 0x01
    3148:	82 81       	ldd	r24, Z+2	; 0x02
    314a:	93 81       	ldd	r25, Z+3	; 0x03
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	3f ef       	ldi	r19, 0xFF	; 255
    3150:	4f e7       	ldi	r20, 0x7F	; 127
    3152:	57 e4       	ldi	r21, 0x47	; 71
    3154:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3158:	18 16       	cp	r1, r24
    315a:	0c f0       	brlt	.+2      	; 0x315e <ESP_init+0x236>
    315c:	43 c0       	rjmp	.+134    	; 0x31e4 <ESP_init+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    315e:	fe 01       	movw	r30, r28
    3160:	ef 5a       	subi	r30, 0xAF	; 175
    3162:	ff 4f       	sbci	r31, 0xFF	; 255
    3164:	60 81       	ld	r22, Z
    3166:	71 81       	ldd	r23, Z+1	; 0x01
    3168:	82 81       	ldd	r24, Z+2	; 0x02
    316a:	93 81       	ldd	r25, Z+3	; 0x03
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	40 e2       	ldi	r20, 0x20	; 32
    3172:	51 e4       	ldi	r21, 0x41	; 65
    3174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	8e 01       	movw	r16, r28
    317e:	05 5b       	subi	r16, 0xB5	; 181
    3180:	1f 4f       	sbci	r17, 0xFF	; 255
    3182:	bc 01       	movw	r22, r24
    3184:	cd 01       	movw	r24, r26
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	f8 01       	movw	r30, r16
    3190:	91 83       	std	Z+1, r25	; 0x01
    3192:	80 83       	st	Z, r24
    3194:	1f c0       	rjmp	.+62     	; 0x31d4 <ESP_init+0x2ac>
    3196:	fe 01       	movw	r30, r28
    3198:	e7 5b       	subi	r30, 0xB7	; 183
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	88 ec       	ldi	r24, 0xC8	; 200
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	91 83       	std	Z+1, r25	; 0x01
    31a2:	80 83       	st	Z, r24
    31a4:	fe 01       	movw	r30, r28
    31a6:	e7 5b       	subi	r30, 0xB7	; 183
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	80 81       	ld	r24, Z
    31ac:	91 81       	ldd	r25, Z+1	; 0x01
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	f1 f7       	brne	.-4      	; 0x31ae <ESP_init+0x286>
    31b2:	fe 01       	movw	r30, r28
    31b4:	e7 5b       	subi	r30, 0xB7	; 183
    31b6:	ff 4f       	sbci	r31, 0xFF	; 255
    31b8:	91 83       	std	Z+1, r25	; 0x01
    31ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31bc:	de 01       	movw	r26, r28
    31be:	a5 5b       	subi	r26, 0xB5	; 181
    31c0:	bf 4f       	sbci	r27, 0xFF	; 255
    31c2:	fe 01       	movw	r30, r28
    31c4:	e5 5b       	subi	r30, 0xB5	; 181
    31c6:	ff 4f       	sbci	r31, 0xFF	; 255
    31c8:	80 81       	ld	r24, Z
    31ca:	91 81       	ldd	r25, Z+1	; 0x01
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	11 96       	adiw	r26, 0x01	; 1
    31d0:	9c 93       	st	X, r25
    31d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d4:	fe 01       	movw	r30, r28
    31d6:	e5 5b       	subi	r30, 0xB5	; 181
    31d8:	ff 4f       	sbci	r31, 0xFF	; 255
    31da:	80 81       	ld	r24, Z
    31dc:	91 81       	ldd	r25, Z+1	; 0x01
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	d1 f6       	brne	.-76     	; 0x3196 <ESP_init+0x26e>
    31e2:	27 c0       	rjmp	.+78     	; 0x3232 <ESP_init+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e4:	8e 01       	movw	r16, r28
    31e6:	05 5b       	subi	r16, 0xB5	; 181
    31e8:	1f 4f       	sbci	r17, 0xFF	; 255
    31ea:	fe 01       	movw	r30, r28
    31ec:	e3 5b       	subi	r30, 0xB3	; 179
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	60 81       	ld	r22, Z
    31f2:	71 81       	ldd	r23, Z+1	; 0x01
    31f4:	82 81       	ldd	r24, Z+2	; 0x02
    31f6:	93 81       	ldd	r25, Z+3	; 0x03
    31f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	f8 01       	movw	r30, r16
    3202:	91 83       	std	Z+1, r25	; 0x01
    3204:	80 83       	st	Z, r24
    3206:	de 01       	movw	r26, r28
    3208:	a9 5b       	subi	r26, 0xB9	; 185
    320a:	bf 4f       	sbci	r27, 0xFF	; 255
    320c:	fe 01       	movw	r30, r28
    320e:	e5 5b       	subi	r30, 0xB5	; 181
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	80 81       	ld	r24, Z
    3214:	91 81       	ldd	r25, Z+1	; 0x01
    3216:	8d 93       	st	X+, r24
    3218:	9c 93       	st	X, r25
    321a:	fe 01       	movw	r30, r28
    321c:	e9 5b       	subi	r30, 0xB9	; 185
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	80 81       	ld	r24, Z
    3222:	91 81       	ldd	r25, Z+1	; 0x01
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	f1 f7       	brne	.-4      	; 0x3224 <ESP_init+0x2fc>
    3228:	fe 01       	movw	r30, r28
    322a:	e9 5b       	subi	r30, 0xB9	; 185
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	91 83       	std	Z+1, r25	; 0x01
    3230:	80 83       	st	Z, r24
	{
		_delay_ms(1);
		time_out++;
    3232:	de 01       	movw	r26, r28
    3234:	ad 59       	subi	r26, 0x9D	; 157
    3236:	bf 4f       	sbci	r27, 0xFF	; 255
    3238:	fe 01       	movw	r30, r28
    323a:	ed 59       	subi	r30, 0x9D	; 157
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	80 81       	ld	r24, Z
    3240:	91 81       	ldd	r25, Z+1	; 0x01
    3242:	01 96       	adiw	r24, 0x01	; 1
    3244:	11 96       	adiw	r26, 0x01	; 1
    3246:	9c 93       	st	X, r25
    3248:	8e 93       	st	-X, r24
	Clear_REC_Buffer();



	UART_SEND_string("ATE0\r\n");
	while(!((time_out>2000)||(Check_Respond("\r\nOK\r\n"))||(Check_Respond("ATE0\r\r\n\r\nOK\r\n"))))
    324a:	fe 01       	movw	r30, r28
    324c:	ed 59       	subi	r30, 0x9D	; 157
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	80 81       	ld	r24, Z
    3252:	91 81       	ldd	r25, Z+1	; 0x01
    3254:	f7 e0       	ldi	r31, 0x07	; 7
    3256:	81 3d       	cpi	r24, 0xD1	; 209
    3258:	9f 07       	cpc	r25, r31
    325a:	68 f4       	brcc	.+26     	; 0x3276 <ESP_init+0x34e>
    325c:	87 e6       	ldi	r24, 0x67	; 103
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    3264:	88 23       	and	r24, r24
    3266:	39 f4       	brne	.+14     	; 0x3276 <ESP_init+0x34e>
    3268:	8e e6       	ldi	r24, 0x6E	; 110
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    3270:	88 23       	and	r24, r24
    3272:	09 f4       	brne	.+2      	; 0x3276 <ESP_init+0x34e>
    3274:	2b cf       	rjmp	.-426    	; 0x30cc <ESP_init+0x1a4>
		_delay_ms(1);
		time_out++;
	}


	connection_status=ESP_check_connection();
    3276:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <ESP_check_connection>
    327a:	fe 01       	movw	r30, r28
    327c:	eb 59       	subi	r30, 0x9B	; 155
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	80 83       	st	Z, r24

	if(connection_status==ESP8266_created_TCP_connection)
    3282:	fe 01       	movw	r30, r28
    3284:	eb 59       	subi	r30, 0x9B	; 155
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	80 81       	ld	r24, Z
    328a:	83 30       	cpi	r24, 0x03	; 3
    328c:	09 f0       	breq	.+2      	; 0x3290 <ESP_init+0x368>
    328e:	8c c0       	rjmp	.+280    	; 0x33a8 <ESP_init+0x480>
	{

		UART_SEND_string("AT+CIPCLOSE\r\n");                                    //close TCP Connection
    3290:	8c e7       	ldi	r24, 0x7C	; 124
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    3298:	fe 01       	movw	r30, r28
    329a:	ed 5b       	subi	r30, 0xBD	; 189
    329c:	ff 4f       	sbci	r31, 0xFF	; 255
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	a8 ec       	ldi	r26, 0xC8	; 200
    32a4:	b3 e4       	ldi	r27, 0x43	; 67
    32a6:	80 83       	st	Z, r24
    32a8:	91 83       	std	Z+1, r25	; 0x01
    32aa:	a2 83       	std	Z+2, r26	; 0x02
    32ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ae:	8e 01       	movw	r16, r28
    32b0:	01 5c       	subi	r16, 0xC1	; 193
    32b2:	1f 4f       	sbci	r17, 0xFF	; 255
    32b4:	fe 01       	movw	r30, r28
    32b6:	ed 5b       	subi	r30, 0xBD	; 189
    32b8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ba:	60 81       	ld	r22, Z
    32bc:	71 81       	ldd	r23, Z+1	; 0x01
    32be:	82 81       	ldd	r24, Z+2	; 0x02
    32c0:	93 81       	ldd	r25, Z+3	; 0x03
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	4a ef       	ldi	r20, 0xFA	; 250
    32c8:	54 e4       	ldi	r21, 0x44	; 68
    32ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	f8 01       	movw	r30, r16
    32d4:	80 83       	st	Z, r24
    32d6:	91 83       	std	Z+1, r25	; 0x01
    32d8:	a2 83       	std	Z+2, r26	; 0x02
    32da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32dc:	fe 01       	movw	r30, r28
    32de:	ff 96       	adiw	r30, 0x3f	; 63
    32e0:	60 81       	ld	r22, Z
    32e2:	71 81       	ldd	r23, Z+1	; 0x01
    32e4:	82 81       	ldd	r24, Z+2	; 0x02
    32e6:	93 81       	ldd	r25, Z+3	; 0x03
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	40 e8       	ldi	r20, 0x80	; 128
    32ee:	5f e3       	ldi	r21, 0x3F	; 63
    32f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32f4:	88 23       	and	r24, r24
    32f6:	2c f4       	brge	.+10     	; 0x3302 <ESP_init+0x3da>
		__ticks = 1;
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	9e af       	std	Y+62, r25	; 0x3e
    32fe:	8d af       	std	Y+61, r24	; 0x3d
    3300:	46 c0       	rjmp	.+140    	; 0x338e <ESP_init+0x466>
	else if (__tmp > 65535)
    3302:	fe 01       	movw	r30, r28
    3304:	ff 96       	adiw	r30, 0x3f	; 63
    3306:	60 81       	ld	r22, Z
    3308:	71 81       	ldd	r23, Z+1	; 0x01
    330a:	82 81       	ldd	r24, Z+2	; 0x02
    330c:	93 81       	ldd	r25, Z+3	; 0x03
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	3f ef       	ldi	r19, 0xFF	; 255
    3312:	4f e7       	ldi	r20, 0x7F	; 127
    3314:	57 e4       	ldi	r21, 0x47	; 71
    3316:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    331a:	18 16       	cp	r1, r24
    331c:	64 f5       	brge	.+88     	; 0x3376 <ESP_init+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331e:	fe 01       	movw	r30, r28
    3320:	ed 5b       	subi	r30, 0xBD	; 189
    3322:	ff 4f       	sbci	r31, 0xFF	; 255
    3324:	60 81       	ld	r22, Z
    3326:	71 81       	ldd	r23, Z+1	; 0x01
    3328:	82 81       	ldd	r24, Z+2	; 0x02
    332a:	93 81       	ldd	r25, Z+3	; 0x03
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	40 e2       	ldi	r20, 0x20	; 32
    3332:	51 e4       	ldi	r21, 0x41	; 65
    3334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	bc 01       	movw	r22, r24
    333e:	cd 01       	movw	r24, r26
    3340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	9e af       	std	Y+62, r25	; 0x3e
    334a:	8d af       	std	Y+61, r24	; 0x3d
    334c:	0f c0       	rjmp	.+30     	; 0x336c <ESP_init+0x444>
    334e:	88 ec       	ldi	r24, 0xC8	; 200
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	9c af       	std	Y+60, r25	; 0x3c
    3354:	8b af       	std	Y+59, r24	; 0x3b
    3356:	8b ad       	ldd	r24, Y+59	; 0x3b
    3358:	9c ad       	ldd	r25, Y+60	; 0x3c
    335a:	01 97       	sbiw	r24, 0x01	; 1
    335c:	f1 f7       	brne	.-4      	; 0x335a <ESP_init+0x432>
    335e:	9c af       	std	Y+60, r25	; 0x3c
    3360:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3362:	8d ad       	ldd	r24, Y+61	; 0x3d
    3364:	9e ad       	ldd	r25, Y+62	; 0x3e
    3366:	01 97       	sbiw	r24, 0x01	; 1
    3368:	9e af       	std	Y+62, r25	; 0x3e
    336a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    336c:	8d ad       	ldd	r24, Y+61	; 0x3d
    336e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3370:	00 97       	sbiw	r24, 0x00	; 0
    3372:	69 f7       	brne	.-38     	; 0x334e <ESP_init+0x426>
    3374:	16 c0       	rjmp	.+44     	; 0x33a2 <ESP_init+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3376:	fe 01       	movw	r30, r28
    3378:	ff 96       	adiw	r30, 0x3f	; 63
    337a:	60 81       	ld	r22, Z
    337c:	71 81       	ldd	r23, Z+1	; 0x01
    337e:	82 81       	ldd	r24, Z+2	; 0x02
    3380:	93 81       	ldd	r25, Z+3	; 0x03
    3382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	9e af       	std	Y+62, r25	; 0x3e
    338c:	8d af       	std	Y+61, r24	; 0x3d
    338e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3390:	9e ad       	ldd	r25, Y+62	; 0x3e
    3392:	9a af       	std	Y+58, r25	; 0x3a
    3394:	89 af       	std	Y+57, r24	; 0x39
    3396:	89 ad       	ldd	r24, Y+57	; 0x39
    3398:	9a ad       	ldd	r25, Y+58	; 0x3a
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	f1 f7       	brne	.-4      	; 0x339a <ESP_init+0x472>
    339e:	9a af       	std	Y+58, r25	; 0x3a
    33a0:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(400);
		Clear_REC_Buffer();
    33a2:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
    33a6:	85 c0       	rjmp	.+266    	; 0x34b2 <ESP_init+0x58a>
	}

	else if((connection_status==ESP8266_connected_to_AP)||(connection_status==ESP8266_disconnected_TCP_connection))
    33a8:	fe 01       	movw	r30, r28
    33aa:	eb 59       	subi	r30, 0x9B	; 155
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	80 81       	ld	r24, Z
    33b0:	82 30       	cpi	r24, 0x02	; 2
    33b2:	39 f0       	breq	.+14     	; 0x33c2 <ESP_init+0x49a>
    33b4:	fe 01       	movw	r30, r28
    33b6:	eb 59       	subi	r30, 0x9B	; 155
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	80 81       	ld	r24, Z
    33bc:	84 30       	cpi	r24, 0x04	; 4
    33be:	09 f0       	breq	.+2      	; 0x33c2 <ESP_init+0x49a>
    33c0:	78 c0       	rjmp	.+240    	; 0x34b2 <ESP_init+0x58a>
	{

		UART_SEND_string("AT+CWQAP\r\n");                                    //close wifi Connection
    33c2:	8a e8       	ldi	r24, 0x8A	; 138
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	a8 ec       	ldi	r26, 0xC8	; 200
    33d0:	b3 e4       	ldi	r27, 0x43	; 67
    33d2:	8d ab       	std	Y+53, r24	; 0x35
    33d4:	9e ab       	std	Y+54, r25	; 0x36
    33d6:	af ab       	std	Y+55, r26	; 0x37
    33d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33da:	6d a9       	ldd	r22, Y+53	; 0x35
    33dc:	7e a9       	ldd	r23, Y+54	; 0x36
    33de:	8f a9       	ldd	r24, Y+55	; 0x37
    33e0:	98 ad       	ldd	r25, Y+56	; 0x38
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	4a ef       	ldi	r20, 0xFA	; 250
    33e8:	54 e4       	ldi	r21, 0x44	; 68
    33ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	89 ab       	std	Y+49, r24	; 0x31
    33f4:	9a ab       	std	Y+50, r25	; 0x32
    33f6:	ab ab       	std	Y+51, r26	; 0x33
    33f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33fa:	69 a9       	ldd	r22, Y+49	; 0x31
    33fc:	7a a9       	ldd	r23, Y+50	; 0x32
    33fe:	8b a9       	ldd	r24, Y+51	; 0x33
    3400:	9c a9       	ldd	r25, Y+52	; 0x34
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	40 e8       	ldi	r20, 0x80	; 128
    3408:	5f e3       	ldi	r21, 0x3F	; 63
    340a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    340e:	88 23       	and	r24, r24
    3410:	2c f4       	brge	.+10     	; 0x341c <ESP_init+0x4f4>
		__ticks = 1;
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	98 ab       	std	Y+48, r25	; 0x30
    3418:	8f a7       	std	Y+47, r24	; 0x2f
    341a:	3f c0       	rjmp	.+126    	; 0x349a <ESP_init+0x572>
	else if (__tmp > 65535)
    341c:	69 a9       	ldd	r22, Y+49	; 0x31
    341e:	7a a9       	ldd	r23, Y+50	; 0x32
    3420:	8b a9       	ldd	r24, Y+51	; 0x33
    3422:	9c a9       	ldd	r25, Y+52	; 0x34
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	3f ef       	ldi	r19, 0xFF	; 255
    3428:	4f e7       	ldi	r20, 0x7F	; 127
    342a:	57 e4       	ldi	r21, 0x47	; 71
    342c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3430:	18 16       	cp	r1, r24
    3432:	4c f5       	brge	.+82     	; 0x3486 <ESP_init+0x55e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3434:	6d a9       	ldd	r22, Y+53	; 0x35
    3436:	7e a9       	ldd	r23, Y+54	; 0x36
    3438:	8f a9       	ldd	r24, Y+55	; 0x37
    343a:	98 ad       	ldd	r25, Y+56	; 0x38
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e2       	ldi	r20, 0x20	; 32
    3442:	51 e4       	ldi	r21, 0x41	; 65
    3444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	bc 01       	movw	r22, r24
    344e:	cd 01       	movw	r24, r26
    3450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	98 ab       	std	Y+48, r25	; 0x30
    345a:	8f a7       	std	Y+47, r24	; 0x2f
    345c:	0f c0       	rjmp	.+30     	; 0x347c <ESP_init+0x554>
    345e:	88 ec       	ldi	r24, 0xC8	; 200
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	9e a7       	std	Y+46, r25	; 0x2e
    3464:	8d a7       	std	Y+45, r24	; 0x2d
    3466:	8d a5       	ldd	r24, Y+45	; 0x2d
    3468:	9e a5       	ldd	r25, Y+46	; 0x2e
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	f1 f7       	brne	.-4      	; 0x346a <ESP_init+0x542>
    346e:	9e a7       	std	Y+46, r25	; 0x2e
    3470:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3472:	8f a5       	ldd	r24, Y+47	; 0x2f
    3474:	98 a9       	ldd	r25, Y+48	; 0x30
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	98 ab       	std	Y+48, r25	; 0x30
    347a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    347c:	8f a5       	ldd	r24, Y+47	; 0x2f
    347e:	98 a9       	ldd	r25, Y+48	; 0x30
    3480:	00 97       	sbiw	r24, 0x00	; 0
    3482:	69 f7       	brne	.-38     	; 0x345e <ESP_init+0x536>
    3484:	14 c0       	rjmp	.+40     	; 0x34ae <ESP_init+0x586>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3486:	69 a9       	ldd	r22, Y+49	; 0x31
    3488:	7a a9       	ldd	r23, Y+50	; 0x32
    348a:	8b a9       	ldd	r24, Y+51	; 0x33
    348c:	9c a9       	ldd	r25, Y+52	; 0x34
    348e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	98 ab       	std	Y+48, r25	; 0x30
    3498:	8f a7       	std	Y+47, r24	; 0x2f
    349a:	8f a5       	ldd	r24, Y+47	; 0x2f
    349c:	98 a9       	ldd	r25, Y+48	; 0x30
    349e:	9c a7       	std	Y+44, r25	; 0x2c
    34a0:	8b a7       	std	Y+43, r24	; 0x2b
    34a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    34a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <ESP_init+0x57e>
    34aa:	9c a7       	std	Y+44, r25	; 0x2c
    34ac:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(400);
		Clear_REC_Buffer();
    34ae:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
	}



	time_out=0;
    34b2:	fe 01       	movw	r30, r28
    34b4:	ed 59       	subi	r30, 0x9D	; 157
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	11 82       	std	Z+1, r1	; 0x01
    34ba:	10 82       	st	Z, r1
	UART_SEND_string("AT+CWMODE=3\r\n");
    34bc:	85 e9       	ldi	r24, 0x95	; 149
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    34c4:	7e c0       	rjmp	.+252    	; 0x35c2 <ESP_init+0x69a>
	while(!((time_out>2000)||Check_Respond("\r\nOK\r\n")))
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	a0 e8       	ldi	r26, 0x80	; 128
    34cc:	bf e3       	ldi	r27, 0x3F	; 63
    34ce:	8f a3       	std	Y+39, r24	; 0x27
    34d0:	98 a7       	std	Y+40, r25	; 0x28
    34d2:	a9 a7       	std	Y+41, r26	; 0x29
    34d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d6:	6f a1       	ldd	r22, Y+39	; 0x27
    34d8:	78 a5       	ldd	r23, Y+40	; 0x28
    34da:	89 a5       	ldd	r24, Y+41	; 0x29
    34dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	4a ef       	ldi	r20, 0xFA	; 250
    34e4:	54 e4       	ldi	r21, 0x44	; 68
    34e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	8b a3       	std	Y+35, r24	; 0x23
    34f0:	9c a3       	std	Y+36, r25	; 0x24
    34f2:	ad a3       	std	Y+37, r26	; 0x25
    34f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34f6:	6b a1       	ldd	r22, Y+35	; 0x23
    34f8:	7c a1       	ldd	r23, Y+36	; 0x24
    34fa:	8d a1       	ldd	r24, Y+37	; 0x25
    34fc:	9e a1       	ldd	r25, Y+38	; 0x26
    34fe:	20 e0       	ldi	r18, 0x00	; 0
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	40 e8       	ldi	r20, 0x80	; 128
    3504:	5f e3       	ldi	r21, 0x3F	; 63
    3506:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    350a:	88 23       	and	r24, r24
    350c:	2c f4       	brge	.+10     	; 0x3518 <ESP_init+0x5f0>
		__ticks = 1;
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	9a a3       	std	Y+34, r25	; 0x22
    3514:	89 a3       	std	Y+33, r24	; 0x21
    3516:	3f c0       	rjmp	.+126    	; 0x3596 <ESP_init+0x66e>
	else if (__tmp > 65535)
    3518:	6b a1       	ldd	r22, Y+35	; 0x23
    351a:	7c a1       	ldd	r23, Y+36	; 0x24
    351c:	8d a1       	ldd	r24, Y+37	; 0x25
    351e:	9e a1       	ldd	r25, Y+38	; 0x26
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	3f ef       	ldi	r19, 0xFF	; 255
    3524:	4f e7       	ldi	r20, 0x7F	; 127
    3526:	57 e4       	ldi	r21, 0x47	; 71
    3528:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    352c:	18 16       	cp	r1, r24
    352e:	4c f5       	brge	.+82     	; 0x3582 <ESP_init+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3530:	6f a1       	ldd	r22, Y+39	; 0x27
    3532:	78 a5       	ldd	r23, Y+40	; 0x28
    3534:	89 a5       	ldd	r24, Y+41	; 0x29
    3536:	9a a5       	ldd	r25, Y+42	; 0x2a
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	40 e2       	ldi	r20, 0x20	; 32
    353e:	51 e4       	ldi	r21, 0x41	; 65
    3540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	bc 01       	movw	r22, r24
    354a:	cd 01       	movw	r24, r26
    354c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	9a a3       	std	Y+34, r25	; 0x22
    3556:	89 a3       	std	Y+33, r24	; 0x21
    3558:	0f c0       	rjmp	.+30     	; 0x3578 <ESP_init+0x650>
    355a:	88 ec       	ldi	r24, 0xC8	; 200
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	98 a3       	std	Y+32, r25	; 0x20
    3560:	8f 8f       	std	Y+31, r24	; 0x1f
    3562:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3564:	98 a1       	ldd	r25, Y+32	; 0x20
    3566:	01 97       	sbiw	r24, 0x01	; 1
    3568:	f1 f7       	brne	.-4      	; 0x3566 <ESP_init+0x63e>
    356a:	98 a3       	std	Y+32, r25	; 0x20
    356c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    356e:	89 a1       	ldd	r24, Y+33	; 0x21
    3570:	9a a1       	ldd	r25, Y+34	; 0x22
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	9a a3       	std	Y+34, r25	; 0x22
    3576:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3578:	89 a1       	ldd	r24, Y+33	; 0x21
    357a:	9a a1       	ldd	r25, Y+34	; 0x22
    357c:	00 97       	sbiw	r24, 0x00	; 0
    357e:	69 f7       	brne	.-38     	; 0x355a <ESP_init+0x632>
    3580:	14 c0       	rjmp	.+40     	; 0x35aa <ESP_init+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3582:	6b a1       	ldd	r22, Y+35	; 0x23
    3584:	7c a1       	ldd	r23, Y+36	; 0x24
    3586:	8d a1       	ldd	r24, Y+37	; 0x25
    3588:	9e a1       	ldd	r25, Y+38	; 0x26
    358a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	9a a3       	std	Y+34, r25	; 0x22
    3594:	89 a3       	std	Y+33, r24	; 0x21
    3596:	89 a1       	ldd	r24, Y+33	; 0x21
    3598:	9a a1       	ldd	r25, Y+34	; 0x22
    359a:	9e 8f       	std	Y+30, r25	; 0x1e
    359c:	8d 8f       	std	Y+29, r24	; 0x1d
    359e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35a2:	01 97       	sbiw	r24, 0x01	; 1
    35a4:	f1 f7       	brne	.-4      	; 0x35a2 <ESP_init+0x67a>
    35a6:	9e 8f       	std	Y+30, r25	; 0x1e
    35a8:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		_delay_ms(1);
		time_out++;
    35aa:	de 01       	movw	r26, r28
    35ac:	ad 59       	subi	r26, 0x9D	; 157
    35ae:	bf 4f       	sbci	r27, 0xFF	; 255
    35b0:	fe 01       	movw	r30, r28
    35b2:	ed 59       	subi	r30, 0x9D	; 157
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	01 96       	adiw	r24, 0x01	; 1
    35bc:	11 96       	adiw	r26, 0x01	; 1
    35be:	9c 93       	st	X, r25
    35c0:	8e 93       	st	-X, r24



	time_out=0;
	UART_SEND_string("AT+CWMODE=3\r\n");
	while(!((time_out>2000)||Check_Respond("\r\nOK\r\n")))
    35c2:	fe 01       	movw	r30, r28
    35c4:	ed 59       	subi	r30, 0x9D	; 157
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	80 81       	ld	r24, Z
    35ca:	91 81       	ldd	r25, Z+1	; 0x01
    35cc:	f7 e0       	ldi	r31, 0x07	; 7
    35ce:	81 3d       	cpi	r24, 0xD1	; 209
    35d0:	9f 07       	cpc	r25, r31
    35d2:	38 f4       	brcc	.+14     	; 0x35e2 <ESP_init+0x6ba>
    35d4:	87 e6       	ldi	r24, 0x67	; 103
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    35dc:	88 23       	and	r24, r24
    35de:	09 f4       	brne	.+2      	; 0x35e2 <ESP_init+0x6ba>
    35e0:	72 cf       	rjmp	.-284    	; 0x34c6 <ESP_init+0x59e>
	{
		_delay_ms(1);
		time_out++;
	}

	time_out=0;
    35e2:	fe 01       	movw	r30, r28
    35e4:	ed 59       	subi	r30, 0x9D	; 157
    35e6:	ff 4f       	sbci	r31, 0xFF	; 255
    35e8:	11 82       	std	Z+1, r1	; 0x01
    35ea:	10 82       	st	Z, r1
	UART_SEND_string("AT+CIPMUX=0\r\n");
    35ec:	83 ea       	ldi	r24, 0xA3	; 163
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    35f4:	7e c0       	rjmp	.+252    	; 0x36f2 <ESP_init+0x7ca>
	while(!((time_out>2000)||Check_Respond("\r\nOK\r\n")))
    35f6:	80 e0       	ldi	r24, 0x00	; 0
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	a0 e8       	ldi	r26, 0x80	; 128
    35fc:	bf e3       	ldi	r27, 0x3F	; 63
    35fe:	89 8f       	std	Y+25, r24	; 0x19
    3600:	9a 8f       	std	Y+26, r25	; 0x1a
    3602:	ab 8f       	std	Y+27, r26	; 0x1b
    3604:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3606:	69 8d       	ldd	r22, Y+25	; 0x19
    3608:	7a 8d       	ldd	r23, Y+26	; 0x1a
    360a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    360c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	4a ef       	ldi	r20, 0xFA	; 250
    3614:	54 e4       	ldi	r21, 0x44	; 68
    3616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	8d 8b       	std	Y+21, r24	; 0x15
    3620:	9e 8b       	std	Y+22, r25	; 0x16
    3622:	af 8b       	std	Y+23, r26	; 0x17
    3624:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3626:	6d 89       	ldd	r22, Y+21	; 0x15
    3628:	7e 89       	ldd	r23, Y+22	; 0x16
    362a:	8f 89       	ldd	r24, Y+23	; 0x17
    362c:	98 8d       	ldd	r25, Y+24	; 0x18
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	40 e8       	ldi	r20, 0x80	; 128
    3634:	5f e3       	ldi	r21, 0x3F	; 63
    3636:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    363a:	88 23       	and	r24, r24
    363c:	2c f4       	brge	.+10     	; 0x3648 <ESP_init+0x720>
		__ticks = 1;
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	9c 8b       	std	Y+20, r25	; 0x14
    3644:	8b 8b       	std	Y+19, r24	; 0x13
    3646:	3f c0       	rjmp	.+126    	; 0x36c6 <ESP_init+0x79e>
	else if (__tmp > 65535)
    3648:	6d 89       	ldd	r22, Y+21	; 0x15
    364a:	7e 89       	ldd	r23, Y+22	; 0x16
    364c:	8f 89       	ldd	r24, Y+23	; 0x17
    364e:	98 8d       	ldd	r25, Y+24	; 0x18
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	3f ef       	ldi	r19, 0xFF	; 255
    3654:	4f e7       	ldi	r20, 0x7F	; 127
    3656:	57 e4       	ldi	r21, 0x47	; 71
    3658:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    365c:	18 16       	cp	r1, r24
    365e:	4c f5       	brge	.+82     	; 0x36b2 <ESP_init+0x78a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3660:	69 8d       	ldd	r22, Y+25	; 0x19
    3662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	40 e2       	ldi	r20, 0x20	; 32
    366e:	51 e4       	ldi	r21, 0x41	; 65
    3670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	bc 01       	movw	r22, r24
    367a:	cd 01       	movw	r24, r26
    367c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	9c 8b       	std	Y+20, r25	; 0x14
    3686:	8b 8b       	std	Y+19, r24	; 0x13
    3688:	0f c0       	rjmp	.+30     	; 0x36a8 <ESP_init+0x780>
    368a:	88 ec       	ldi	r24, 0xC8	; 200
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	9a 8b       	std	Y+18, r25	; 0x12
    3690:	89 8b       	std	Y+17, r24	; 0x11
    3692:	89 89       	ldd	r24, Y+17	; 0x11
    3694:	9a 89       	ldd	r25, Y+18	; 0x12
    3696:	01 97       	sbiw	r24, 0x01	; 1
    3698:	f1 f7       	brne	.-4      	; 0x3696 <ESP_init+0x76e>
    369a:	9a 8b       	std	Y+18, r25	; 0x12
    369c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    369e:	8b 89       	ldd	r24, Y+19	; 0x13
    36a0:	9c 89       	ldd	r25, Y+20	; 0x14
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	9c 8b       	std	Y+20, r25	; 0x14
    36a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a8:	8b 89       	ldd	r24, Y+19	; 0x13
    36aa:	9c 89       	ldd	r25, Y+20	; 0x14
    36ac:	00 97       	sbiw	r24, 0x00	; 0
    36ae:	69 f7       	brne	.-38     	; 0x368a <ESP_init+0x762>
    36b0:	14 c0       	rjmp	.+40     	; 0x36da <ESP_init+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b2:	6d 89       	ldd	r22, Y+21	; 0x15
    36b4:	7e 89       	ldd	r23, Y+22	; 0x16
    36b6:	8f 89       	ldd	r24, Y+23	; 0x17
    36b8:	98 8d       	ldd	r25, Y+24	; 0x18
    36ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	9c 8b       	std	Y+20, r25	; 0x14
    36c4:	8b 8b       	std	Y+19, r24	; 0x13
    36c6:	8b 89       	ldd	r24, Y+19	; 0x13
    36c8:	9c 89       	ldd	r25, Y+20	; 0x14
    36ca:	98 8b       	std	Y+16, r25	; 0x10
    36cc:	8f 87       	std	Y+15, r24	; 0x0f
    36ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d0:	98 89       	ldd	r25, Y+16	; 0x10
    36d2:	01 97       	sbiw	r24, 0x01	; 1
    36d4:	f1 f7       	brne	.-4      	; 0x36d2 <ESP_init+0x7aa>
    36d6:	98 8b       	std	Y+16, r25	; 0x10
    36d8:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(1);
		time_out++;
    36da:	de 01       	movw	r26, r28
    36dc:	ad 59       	subi	r26, 0x9D	; 157
    36de:	bf 4f       	sbci	r27, 0xFF	; 255
    36e0:	fe 01       	movw	r30, r28
    36e2:	ed 59       	subi	r30, 0x9D	; 157
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	80 81       	ld	r24, Z
    36e8:	91 81       	ldd	r25, Z+1	; 0x01
    36ea:	01 96       	adiw	r24, 0x01	; 1
    36ec:	11 96       	adiw	r26, 0x01	; 1
    36ee:	9c 93       	st	X, r25
    36f0:	8e 93       	st	-X, r24
		time_out++;
	}

	time_out=0;
	UART_SEND_string("AT+CIPMUX=0\r\n");
	while(!((time_out>2000)||Check_Respond("\r\nOK\r\n")))
    36f2:	fe 01       	movw	r30, r28
    36f4:	ed 59       	subi	r30, 0x9D	; 157
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	80 81       	ld	r24, Z
    36fa:	91 81       	ldd	r25, Z+1	; 0x01
    36fc:	27 e0       	ldi	r18, 0x07	; 7
    36fe:	81 3d       	cpi	r24, 0xD1	; 209
    3700:	92 07       	cpc	r25, r18
    3702:	38 f4       	brcc	.+14     	; 0x3712 <ESP_init+0x7ea>
    3704:	87 e6       	ldi	r24, 0x67	; 103
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    370c:	88 23       	and	r24, r24
    370e:	09 f4       	brne	.+2      	; 0x3712 <ESP_init+0x7ea>
    3710:	72 cf       	rjmp	.-284    	; 0x35f6 <ESP_init+0x6ce>
	{
		_delay_ms(1);
		time_out++;
	}

	time_out=0;
    3712:	fe 01       	movw	r30, r28
    3714:	ed 59       	subi	r30, 0x9D	; 157
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	11 82       	std	Z+1, r1	; 0x01
    371a:	10 82       	st	Z, r1
	UART_SEND_string("AT+CIPMODE=0\r\n");
    371c:	81 eb       	ldi	r24, 0xB1	; 177
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    3724:	7e c0       	rjmp	.+252    	; 0x3822 <ESP_init+0x8fa>
	while(!((time_out>2000)||Check_Respond("\r\nOK\r\n")))
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	a0 e8       	ldi	r26, 0x80	; 128
    372c:	bf e3       	ldi	r27, 0x3F	; 63
    372e:	8b 87       	std	Y+11, r24	; 0x0b
    3730:	9c 87       	std	Y+12, r25	; 0x0c
    3732:	ad 87       	std	Y+13, r26	; 0x0d
    3734:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3736:	6b 85       	ldd	r22, Y+11	; 0x0b
    3738:	7c 85       	ldd	r23, Y+12	; 0x0c
    373a:	8d 85       	ldd	r24, Y+13	; 0x0d
    373c:	9e 85       	ldd	r25, Y+14	; 0x0e
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	4a ef       	ldi	r20, 0xFA	; 250
    3744:	54 e4       	ldi	r21, 0x44	; 68
    3746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	8f 83       	std	Y+7, r24	; 0x07
    3750:	98 87       	std	Y+8, r25	; 0x08
    3752:	a9 87       	std	Y+9, r26	; 0x09
    3754:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3756:	6f 81       	ldd	r22, Y+7	; 0x07
    3758:	78 85       	ldd	r23, Y+8	; 0x08
    375a:	89 85       	ldd	r24, Y+9	; 0x09
    375c:	9a 85       	ldd	r25, Y+10	; 0x0a
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e8       	ldi	r20, 0x80	; 128
    3764:	5f e3       	ldi	r21, 0x3F	; 63
    3766:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    376a:	88 23       	and	r24, r24
    376c:	2c f4       	brge	.+10     	; 0x3778 <ESP_init+0x850>
		__ticks = 1;
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	9e 83       	std	Y+6, r25	; 0x06
    3774:	8d 83       	std	Y+5, r24	; 0x05
    3776:	3f c0       	rjmp	.+126    	; 0x37f6 <ESP_init+0x8ce>
	else if (__tmp > 65535)
    3778:	6f 81       	ldd	r22, Y+7	; 0x07
    377a:	78 85       	ldd	r23, Y+8	; 0x08
    377c:	89 85       	ldd	r24, Y+9	; 0x09
    377e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	3f ef       	ldi	r19, 0xFF	; 255
    3784:	4f e7       	ldi	r20, 0x7F	; 127
    3786:	57 e4       	ldi	r21, 0x47	; 71
    3788:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    378c:	18 16       	cp	r1, r24
    378e:	4c f5       	brge	.+82     	; 0x37e2 <ESP_init+0x8ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3790:	6b 85       	ldd	r22, Y+11	; 0x0b
    3792:	7c 85       	ldd	r23, Y+12	; 0x0c
    3794:	8d 85       	ldd	r24, Y+13	; 0x0d
    3796:	9e 85       	ldd	r25, Y+14	; 0x0e
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	40 e2       	ldi	r20, 0x20	; 32
    379e:	51 e4       	ldi	r21, 0x41	; 65
    37a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	bc 01       	movw	r22, r24
    37aa:	cd 01       	movw	r24, r26
    37ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	9e 83       	std	Y+6, r25	; 0x06
    37b6:	8d 83       	std	Y+5, r24	; 0x05
    37b8:	0f c0       	rjmp	.+30     	; 0x37d8 <ESP_init+0x8b0>
    37ba:	88 ec       	ldi	r24, 0xC8	; 200
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	9c 83       	std	Y+4, r25	; 0x04
    37c0:	8b 83       	std	Y+3, r24	; 0x03
    37c2:	8b 81       	ldd	r24, Y+3	; 0x03
    37c4:	9c 81       	ldd	r25, Y+4	; 0x04
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	f1 f7       	brne	.-4      	; 0x37c6 <ESP_init+0x89e>
    37ca:	9c 83       	std	Y+4, r25	; 0x04
    37cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ce:	8d 81       	ldd	r24, Y+5	; 0x05
    37d0:	9e 81       	ldd	r25, Y+6	; 0x06
    37d2:	01 97       	sbiw	r24, 0x01	; 1
    37d4:	9e 83       	std	Y+6, r25	; 0x06
    37d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d8:	8d 81       	ldd	r24, Y+5	; 0x05
    37da:	9e 81       	ldd	r25, Y+6	; 0x06
    37dc:	00 97       	sbiw	r24, 0x00	; 0
    37de:	69 f7       	brne	.-38     	; 0x37ba <ESP_init+0x892>
    37e0:	14 c0       	rjmp	.+40     	; 0x380a <ESP_init+0x8e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e2:	6f 81       	ldd	r22, Y+7	; 0x07
    37e4:	78 85       	ldd	r23, Y+8	; 0x08
    37e6:	89 85       	ldd	r24, Y+9	; 0x09
    37e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ee:	dc 01       	movw	r26, r24
    37f0:	cb 01       	movw	r24, r22
    37f2:	9e 83       	std	Y+6, r25	; 0x06
    37f4:	8d 83       	std	Y+5, r24	; 0x05
    37f6:	8d 81       	ldd	r24, Y+5	; 0x05
    37f8:	9e 81       	ldd	r25, Y+6	; 0x06
    37fa:	9a 83       	std	Y+2, r25	; 0x02
    37fc:	89 83       	std	Y+1, r24	; 0x01
    37fe:	89 81       	ldd	r24, Y+1	; 0x01
    3800:	9a 81       	ldd	r25, Y+2	; 0x02
    3802:	01 97       	sbiw	r24, 0x01	; 1
    3804:	f1 f7       	brne	.-4      	; 0x3802 <ESP_init+0x8da>
    3806:	9a 83       	std	Y+2, r25	; 0x02
    3808:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(1);
		time_out++;
    380a:	de 01       	movw	r26, r28
    380c:	ad 59       	subi	r26, 0x9D	; 157
    380e:	bf 4f       	sbci	r27, 0xFF	; 255
    3810:	fe 01       	movw	r30, r28
    3812:	ed 59       	subi	r30, 0x9D	; 157
    3814:	ff 4f       	sbci	r31, 0xFF	; 255
    3816:	80 81       	ld	r24, Z
    3818:	91 81       	ldd	r25, Z+1	; 0x01
    381a:	01 96       	adiw	r24, 0x01	; 1
    381c:	11 96       	adiw	r26, 0x01	; 1
    381e:	9c 93       	st	X, r25
    3820:	8e 93       	st	-X, r24
		time_out++;
	}

	time_out=0;
	UART_SEND_string("AT+CIPMODE=0\r\n");
	while(!((time_out>2000)||Check_Respond("\r\nOK\r\n")))
    3822:	fe 01       	movw	r30, r28
    3824:	ed 59       	subi	r30, 0x9D	; 157
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	80 81       	ld	r24, Z
    382a:	91 81       	ldd	r25, Z+1	; 0x01
    382c:	e7 e0       	ldi	r30, 0x07	; 7
    382e:	81 3d       	cpi	r24, 0xD1	; 209
    3830:	9e 07       	cpc	r25, r30
    3832:	38 f4       	brcc	.+14     	; 0x3842 <ESP_init+0x91a>
    3834:	87 e6       	ldi	r24, 0x67	; 103
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    383c:	88 23       	and	r24, r24
    383e:	09 f4       	brne	.+2      	; 0x3842 <ESP_init+0x91a>
    3840:	72 cf       	rjmp	.-284    	; 0x3726 <ESP_init+0x7fe>
	{
		_delay_ms(1);
		time_out++;
	}

	return TRUE;
    3842:	81 e0       	ldi	r24, 0x01	; 1

}
    3844:	cb 59       	subi	r28, 0x9B	; 155
    3846:	df 4f       	sbci	r29, 0xFF	; 255
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	f8 94       	cli
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	cf 91       	pop	r28
    3854:	df 91       	pop	r29
    3856:	1f 91       	pop	r17
    3858:	0f 91       	pop	r16
    385a:	08 95       	ret

0000385c <ESP_connect_to_AP>:



	bool ESP_connect_to_AP(char* USER_NAME,char* PASSWORD)
	{
    385c:	df 93       	push	r29
    385e:	cf 93       	push	r28
    3860:	cd b7       	in	r28, 0x3d	; 61
    3862:	de b7       	in	r29, 0x3e	; 62
    3864:	65 97       	sbiw	r28, 0x15	; 21
    3866:	0f b6       	in	r0, 0x3f	; 63
    3868:	f8 94       	cli
    386a:	de bf       	out	0x3e, r29	; 62
    386c:	0f be       	out	0x3f, r0	; 63
    386e:	cd bf       	out	0x3d, r28	; 61
    3870:	9a 8b       	std	Y+18, r25	; 0x12
    3872:	89 8b       	std	Y+17, r24	; 0x11
    3874:	7c 8b       	std	Y+20, r23	; 0x14
    3876:	6b 8b       	std	Y+19, r22	; 0x13
		unsigned int time_out=0;
    3878:	18 8a       	std	Y+16, r1	; 0x10
    387a:	1f 86       	std	Y+15, r1	; 0x0f

		UART_SEND_string( "AT+CWJAP=\"");
    387c:	80 ec       	ldi	r24, 0xC0	; 192
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
		UART_SEND_string( USER_NAME);
    3884:	89 89       	ldd	r24, Y+17	; 0x11
    3886:	9a 89       	ldd	r25, Y+18	; 0x12
    3888:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
		UART_SEND_string( "\",\"");
    388c:	8b ec       	ldi	r24, 0xCB	; 203
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
		UART_SEND_string( PASSWORD);
    3894:	8b 89       	ldd	r24, Y+19	; 0x13
    3896:	9c 89       	ldd	r25, Y+20	; 0x14
    3898:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
		UART_SEND_string( "\"\r\n");
    389c:	8f ec       	ldi	r24, 0xCF	; 207
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    38a4:	77 c0       	rjmp	.+238    	; 0x3994 <ESP_connect_to_AP+0x138>



	while(!((time_out>10000)||(Check_Respond("WIFI DISCONNECT\r\nWIFI CONNECTED\r\nWIFI GOT IP\r\n\r\nOK\r\n"))||(Check_Respond("WIFI CONNECTED\r\nWIFI GOT IP\r\n\r\nOK\r\n"))))
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	a0 e8       	ldi	r26, 0x80	; 128
    38ac:	bf e3       	ldi	r27, 0x3F	; 63
    38ae:	8b 87       	std	Y+11, r24	; 0x0b
    38b0:	9c 87       	std	Y+12, r25	; 0x0c
    38b2:	ad 87       	std	Y+13, r26	; 0x0d
    38b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    38bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	4a ef       	ldi	r20, 0xFA	; 250
    38c4:	54 e4       	ldi	r21, 0x44	; 68
    38c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ca:	dc 01       	movw	r26, r24
    38cc:	cb 01       	movw	r24, r22
    38ce:	8f 83       	std	Y+7, r24	; 0x07
    38d0:	98 87       	std	Y+8, r25	; 0x08
    38d2:	a9 87       	std	Y+9, r26	; 0x09
    38d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38d6:	6f 81       	ldd	r22, Y+7	; 0x07
    38d8:	78 85       	ldd	r23, Y+8	; 0x08
    38da:	89 85       	ldd	r24, Y+9	; 0x09
    38dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	40 e8       	ldi	r20, 0x80	; 128
    38e4:	5f e3       	ldi	r21, 0x3F	; 63
    38e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38ea:	88 23       	and	r24, r24
    38ec:	2c f4       	brge	.+10     	; 0x38f8 <ESP_connect_to_AP+0x9c>
		__ticks = 1;
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	9e 83       	std	Y+6, r25	; 0x06
    38f4:	8d 83       	std	Y+5, r24	; 0x05
    38f6:	3f c0       	rjmp	.+126    	; 0x3976 <ESP_connect_to_AP+0x11a>
	else if (__tmp > 65535)
    38f8:	6f 81       	ldd	r22, Y+7	; 0x07
    38fa:	78 85       	ldd	r23, Y+8	; 0x08
    38fc:	89 85       	ldd	r24, Y+9	; 0x09
    38fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3900:	20 e0       	ldi	r18, 0x00	; 0
    3902:	3f ef       	ldi	r19, 0xFF	; 255
    3904:	4f e7       	ldi	r20, 0x7F	; 127
    3906:	57 e4       	ldi	r21, 0x47	; 71
    3908:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    390c:	18 16       	cp	r1, r24
    390e:	4c f5       	brge	.+82     	; 0x3962 <ESP_connect_to_AP+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3910:	6b 85       	ldd	r22, Y+11	; 0x0b
    3912:	7c 85       	ldd	r23, Y+12	; 0x0c
    3914:	8d 85       	ldd	r24, Y+13	; 0x0d
    3916:	9e 85       	ldd	r25, Y+14	; 0x0e
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	40 e2       	ldi	r20, 0x20	; 32
    391e:	51 e4       	ldi	r21, 0x41	; 65
    3920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	bc 01       	movw	r22, r24
    392a:	cd 01       	movw	r24, r26
    392c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3930:	dc 01       	movw	r26, r24
    3932:	cb 01       	movw	r24, r22
    3934:	9e 83       	std	Y+6, r25	; 0x06
    3936:	8d 83       	std	Y+5, r24	; 0x05
    3938:	0f c0       	rjmp	.+30     	; 0x3958 <ESP_connect_to_AP+0xfc>
    393a:	88 ec       	ldi	r24, 0xC8	; 200
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	9c 83       	std	Y+4, r25	; 0x04
    3940:	8b 83       	std	Y+3, r24	; 0x03
    3942:	8b 81       	ldd	r24, Y+3	; 0x03
    3944:	9c 81       	ldd	r25, Y+4	; 0x04
    3946:	01 97       	sbiw	r24, 0x01	; 1
    3948:	f1 f7       	brne	.-4      	; 0x3946 <ESP_connect_to_AP+0xea>
    394a:	9c 83       	std	Y+4, r25	; 0x04
    394c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    394e:	8d 81       	ldd	r24, Y+5	; 0x05
    3950:	9e 81       	ldd	r25, Y+6	; 0x06
    3952:	01 97       	sbiw	r24, 0x01	; 1
    3954:	9e 83       	std	Y+6, r25	; 0x06
    3956:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3958:	8d 81       	ldd	r24, Y+5	; 0x05
    395a:	9e 81       	ldd	r25, Y+6	; 0x06
    395c:	00 97       	sbiw	r24, 0x00	; 0
    395e:	69 f7       	brne	.-38     	; 0x393a <ESP_connect_to_AP+0xde>
    3960:	14 c0       	rjmp	.+40     	; 0x398a <ESP_connect_to_AP+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3962:	6f 81       	ldd	r22, Y+7	; 0x07
    3964:	78 85       	ldd	r23, Y+8	; 0x08
    3966:	89 85       	ldd	r24, Y+9	; 0x09
    3968:	9a 85       	ldd	r25, Y+10	; 0x0a
    396a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	9e 83       	std	Y+6, r25	; 0x06
    3974:	8d 83       	std	Y+5, r24	; 0x05
    3976:	8d 81       	ldd	r24, Y+5	; 0x05
    3978:	9e 81       	ldd	r25, Y+6	; 0x06
    397a:	9a 83       	std	Y+2, r25	; 0x02
    397c:	89 83       	std	Y+1, r24	; 0x01
    397e:	89 81       	ldd	r24, Y+1	; 0x01
    3980:	9a 81       	ldd	r25, Y+2	; 0x02
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	f1 f7       	brne	.-4      	; 0x3982 <ESP_connect_to_AP+0x126>
    3986:	9a 83       	std	Y+2, r25	; 0x02
    3988:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(1);
		time_out++;
    398a:	8f 85       	ldd	r24, Y+15	; 0x0f
    398c:	98 89       	ldd	r25, Y+16	; 0x10
    398e:	01 96       	adiw	r24, 0x01	; 1
    3990:	98 8b       	std	Y+16, r25	; 0x10
    3992:	8f 87       	std	Y+15, r24	; 0x0f
		UART_SEND_string( PASSWORD);
		UART_SEND_string( "\"\r\n");



	while(!((time_out>10000)||(Check_Respond("WIFI DISCONNECT\r\nWIFI CONNECTED\r\nWIFI GOT IP\r\n\r\nOK\r\n"))||(Check_Respond("WIFI CONNECTED\r\nWIFI GOT IP\r\n\r\nOK\r\n"))))
    3994:	8f 85       	ldd	r24, Y+15	; 0x0f
    3996:	98 89       	ldd	r25, Y+16	; 0x10
    3998:	27 e2       	ldi	r18, 0x27	; 39
    399a:	81 31       	cpi	r24, 0x11	; 17
    399c:	92 07       	cpc	r25, r18
    399e:	68 f4       	brcc	.+26     	; 0x39ba <ESP_connect_to_AP+0x15e>
    39a0:	83 ed       	ldi	r24, 0xD3	; 211
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    39a8:	88 23       	and	r24, r24
    39aa:	39 f4       	brne	.+14     	; 0x39ba <ESP_connect_to_AP+0x15e>
    39ac:	88 e0       	ldi	r24, 0x08	; 8
    39ae:	91 e0       	ldi	r25, 0x01	; 1
    39b0:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    39b4:	88 23       	and	r24, r24
    39b6:	09 f4       	brne	.+2      	; 0x39ba <ESP_connect_to_AP+0x15e>
    39b8:	76 cf       	rjmp	.-276    	; 0x38a6 <ESP_connect_to_AP+0x4a>
		_delay_ms(1);
		time_out++;

	}

	if (time_out>10000)
    39ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    39bc:	98 89       	ldd	r25, Y+16	; 0x10
    39be:	27 e2       	ldi	r18, 0x27	; 39
    39c0:	81 31       	cpi	r24, 0x11	; 17
    39c2:	92 07       	cpc	r25, r18
    39c4:	48 f0       	brcs	.+18     	; 0x39d8 <ESP_connect_to_AP+0x17c>
	{
		if(ESP_check_connection()==ESP8266_connected_to_AP)
    39c6:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <ESP_check_connection>
    39ca:	82 30       	cpi	r24, 0x02	; 2
    39cc:	19 f4       	brne	.+6      	; 0x39d4 <ESP_connect_to_AP+0x178>
		{
			return TRUE;
    39ce:	81 e0       	ldi	r24, 0x01	; 1
    39d0:	8d 8b       	std	Y+21, r24	; 0x15
    39d2:	04 c0       	rjmp	.+8      	; 0x39dc <ESP_connect_to_AP+0x180>
		}

		return FALSE;
    39d4:	1d 8a       	std	Y+21, r1	; 0x15
    39d6:	02 c0       	rjmp	.+4      	; 0x39dc <ESP_connect_to_AP+0x180>
	}
	else                 return TRUE;
    39d8:	21 e0       	ldi	r18, 0x01	; 1
    39da:	2d 8b       	std	Y+21, r18	; 0x15
    39dc:	8d 89       	ldd	r24, Y+21	; 0x15
}
    39de:	65 96       	adiw	r28, 0x15	; 21
    39e0:	0f b6       	in	r0, 0x3f	; 63
    39e2:	f8 94       	cli
    39e4:	de bf       	out	0x3e, r29	; 62
    39e6:	0f be       	out	0x3f, r0	; 63
    39e8:	cd bf       	out	0x3d, r28	; 61
    39ea:	cf 91       	pop	r28
    39ec:	df 91       	pop	r29
    39ee:	08 95       	ret

000039f0 <ESP_error_handler>:

void ESP_error_handler(void)
{
    39f0:	df 93       	push	r29
    39f2:	cf 93       	push	r28
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62
    39f8:	6d 97       	sbiw	r28, 0x1d	; 29
    39fa:	0f b6       	in	r0, 0x3f	; 63
    39fc:	f8 94       	cli
    39fe:	de bf       	out	0x3e, r29	; 62
    3a00:	0f be       	out	0x3f, r0	; 63
    3a02:	cd bf       	out	0x3d, r28	; 61
	unsigned char connection_status=0;
    3a04:	1d 8e       	std	Y+29, r1	; 0x1d

	connection_status=ESP_check_connection();
    3a06:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <ESP_check_connection>
    3a0a:	8d 8f       	std	Y+29, r24	; 0x1d

	if(connection_status==ESP8266_created_TCP_connection)
    3a0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a0e:	83 30       	cpi	r24, 0x03	; 3
    3a10:	09 f0       	breq	.+2      	; 0x3a14 <ESP_error_handler+0x24>
    3a12:	78 c0       	rjmp	.+240    	; 0x3b04 <ESP_error_handler+0x114>
	{

		UART_SEND_string("AT+CIPCLOSE\r\n");                                    //close TCP Connection
    3a14:	8c e7       	ldi	r24, 0x7C	; 124
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	a8 ec       	ldi	r26, 0xC8	; 200
    3a22:	b3 e4       	ldi	r27, 0x43	; 67
    3a24:	89 8f       	std	Y+25, r24	; 0x19
    3a26:	9a 8f       	std	Y+26, r25	; 0x1a
    3a28:	ab 8f       	std	Y+27, r26	; 0x1b
    3a2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2c:	69 8d       	ldd	r22, Y+25	; 0x19
    3a2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	4a ef       	ldi	r20, 0xFA	; 250
    3a3a:	54 e4       	ldi	r21, 0x44	; 68
    3a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a40:	dc 01       	movw	r26, r24
    3a42:	cb 01       	movw	r24, r22
    3a44:	8d 8b       	std	Y+21, r24	; 0x15
    3a46:	9e 8b       	std	Y+22, r25	; 0x16
    3a48:	af 8b       	std	Y+23, r26	; 0x17
    3a4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a4c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a4e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a50:	8f 89       	ldd	r24, Y+23	; 0x17
    3a52:	98 8d       	ldd	r25, Y+24	; 0x18
    3a54:	20 e0       	ldi	r18, 0x00	; 0
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	40 e8       	ldi	r20, 0x80	; 128
    3a5a:	5f e3       	ldi	r21, 0x3F	; 63
    3a5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a60:	88 23       	and	r24, r24
    3a62:	2c f4       	brge	.+10     	; 0x3a6e <ESP_error_handler+0x7e>
		__ticks = 1;
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	9c 8b       	std	Y+20, r25	; 0x14
    3a6a:	8b 8b       	std	Y+19, r24	; 0x13
    3a6c:	3f c0       	rjmp	.+126    	; 0x3aec <ESP_error_handler+0xfc>
	else if (__tmp > 65535)
    3a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    3a70:	7e 89       	ldd	r23, Y+22	; 0x16
    3a72:	8f 89       	ldd	r24, Y+23	; 0x17
    3a74:	98 8d       	ldd	r25, Y+24	; 0x18
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	3f ef       	ldi	r19, 0xFF	; 255
    3a7a:	4f e7       	ldi	r20, 0x7F	; 127
    3a7c:	57 e4       	ldi	r21, 0x47	; 71
    3a7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a82:	18 16       	cp	r1, r24
    3a84:	4c f5       	brge	.+82     	; 0x3ad8 <ESP_error_handler+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a86:	69 8d       	ldd	r22, Y+25	; 0x19
    3a88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	40 e2       	ldi	r20, 0x20	; 32
    3a94:	51 e4       	ldi	r21, 0x41	; 65
    3a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	cb 01       	movw	r24, r22
    3a9e:	bc 01       	movw	r22, r24
    3aa0:	cd 01       	movw	r24, r26
    3aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	9c 8b       	std	Y+20, r25	; 0x14
    3aac:	8b 8b       	std	Y+19, r24	; 0x13
    3aae:	0f c0       	rjmp	.+30     	; 0x3ace <ESP_error_handler+0xde>
    3ab0:	88 ec       	ldi	r24, 0xC8	; 200
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	9a 8b       	std	Y+18, r25	; 0x12
    3ab6:	89 8b       	std	Y+17, r24	; 0x11
    3ab8:	89 89       	ldd	r24, Y+17	; 0x11
    3aba:	9a 89       	ldd	r25, Y+18	; 0x12
    3abc:	01 97       	sbiw	r24, 0x01	; 1
    3abe:	f1 f7       	brne	.-4      	; 0x3abc <ESP_error_handler+0xcc>
    3ac0:	9a 8b       	std	Y+18, r25	; 0x12
    3ac2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ac8:	01 97       	sbiw	r24, 0x01	; 1
    3aca:	9c 8b       	std	Y+20, r25	; 0x14
    3acc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ace:	8b 89       	ldd	r24, Y+19	; 0x13
    3ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ad2:	00 97       	sbiw	r24, 0x00	; 0
    3ad4:	69 f7       	brne	.-38     	; 0x3ab0 <ESP_error_handler+0xc0>
    3ad6:	14 c0       	rjmp	.+40     	; 0x3b00 <ESP_error_handler+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    3ada:	7e 89       	ldd	r23, Y+22	; 0x16
    3adc:	8f 89       	ldd	r24, Y+23	; 0x17
    3ade:	98 8d       	ldd	r25, Y+24	; 0x18
    3ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	9c 8b       	std	Y+20, r25	; 0x14
    3aea:	8b 8b       	std	Y+19, r24	; 0x13
    3aec:	8b 89       	ldd	r24, Y+19	; 0x13
    3aee:	9c 89       	ldd	r25, Y+20	; 0x14
    3af0:	98 8b       	std	Y+16, r25	; 0x10
    3af2:	8f 87       	std	Y+15, r24	; 0x0f
    3af4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3af6:	98 89       	ldd	r25, Y+16	; 0x10
    3af8:	01 97       	sbiw	r24, 0x01	; 1
    3afa:	f1 f7       	brne	.-4      	; 0x3af8 <ESP_error_handler+0x108>
    3afc:	98 8b       	std	Y+16, r25	; 0x10
    3afe:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(400);
		Clear_REC_Buffer();
    3b00:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
	}

	if((connection_status==ESP8266_connected_to_AP)||(connection_status==ESP8266_disconnected_TCP_connection))
    3b04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b06:	82 30       	cpi	r24, 0x02	; 2
    3b08:	21 f0       	breq	.+8      	; 0x3b12 <ESP_error_handler+0x122>
    3b0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b0c:	84 30       	cpi	r24, 0x04	; 4
    3b0e:	09 f0       	breq	.+2      	; 0x3b12 <ESP_error_handler+0x122>
    3b10:	7f c0       	rjmp	.+254    	; 0x3c10 <ESP_error_handler+0x220>
	{

		UART_SEND_string("AT+CWQAP\r\n");                                    //close wifi Connection
    3b12:	8a e8       	ldi	r24, 0x8A	; 138
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    3b1a:	80 e0       	ldi	r24, 0x00	; 0
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	a8 ec       	ldi	r26, 0xC8	; 200
    3b20:	b3 e4       	ldi	r27, 0x43	; 67
    3b22:	8b 87       	std	Y+11, r24	; 0x0b
    3b24:	9c 87       	std	Y+12, r25	; 0x0c
    3b26:	ad 87       	std	Y+13, r26	; 0x0d
    3b28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	4a ef       	ldi	r20, 0xFA	; 250
    3b38:	54 e4       	ldi	r21, 0x44	; 68
    3b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	8f 83       	std	Y+7, r24	; 0x07
    3b44:	98 87       	std	Y+8, r25	; 0x08
    3b46:	a9 87       	std	Y+9, r26	; 0x09
    3b48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b4c:	78 85       	ldd	r23, Y+8	; 0x08
    3b4e:	89 85       	ldd	r24, Y+9	; 0x09
    3b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	40 e8       	ldi	r20, 0x80	; 128
    3b58:	5f e3       	ldi	r21, 0x3F	; 63
    3b5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b5e:	88 23       	and	r24, r24
    3b60:	2c f4       	brge	.+10     	; 0x3b6c <ESP_error_handler+0x17c>
		__ticks = 1;
    3b62:	81 e0       	ldi	r24, 0x01	; 1
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	9e 83       	std	Y+6, r25	; 0x06
    3b68:	8d 83       	std	Y+5, r24	; 0x05
    3b6a:	3f c0       	rjmp	.+126    	; 0x3bea <ESP_error_handler+0x1fa>
	else if (__tmp > 65535)
    3b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b6e:	78 85       	ldd	r23, Y+8	; 0x08
    3b70:	89 85       	ldd	r24, Y+9	; 0x09
    3b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	3f ef       	ldi	r19, 0xFF	; 255
    3b78:	4f e7       	ldi	r20, 0x7F	; 127
    3b7a:	57 e4       	ldi	r21, 0x47	; 71
    3b7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b80:	18 16       	cp	r1, r24
    3b82:	4c f5       	brge	.+82     	; 0x3bd6 <ESP_error_handler+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	40 e2       	ldi	r20, 0x20	; 32
    3b92:	51 e4       	ldi	r21, 0x41	; 65
    3b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	bc 01       	movw	r22, r24
    3b9e:	cd 01       	movw	r24, r26
    3ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	cb 01       	movw	r24, r22
    3ba8:	9e 83       	std	Y+6, r25	; 0x06
    3baa:	8d 83       	std	Y+5, r24	; 0x05
    3bac:	0f c0       	rjmp	.+30     	; 0x3bcc <ESP_error_handler+0x1dc>
    3bae:	88 ec       	ldi	r24, 0xC8	; 200
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	9c 83       	std	Y+4, r25	; 0x04
    3bb4:	8b 83       	std	Y+3, r24	; 0x03
    3bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3bba:	01 97       	sbiw	r24, 0x01	; 1
    3bbc:	f1 f7       	brne	.-4      	; 0x3bba <ESP_error_handler+0x1ca>
    3bbe:	9c 83       	std	Y+4, r25	; 0x04
    3bc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc6:	01 97       	sbiw	r24, 0x01	; 1
    3bc8:	9e 83       	std	Y+6, r25	; 0x06
    3bca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bce:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd0:	00 97       	sbiw	r24, 0x00	; 0
    3bd2:	69 f7       	brne	.-38     	; 0x3bae <ESP_error_handler+0x1be>
    3bd4:	14 c0       	rjmp	.+40     	; 0x3bfe <ESP_error_handler+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd8:	78 85       	ldd	r23, Y+8	; 0x08
    3bda:	89 85       	ldd	r24, Y+9	; 0x09
    3bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	9e 83       	std	Y+6, r25	; 0x06
    3be8:	8d 83       	std	Y+5, r24	; 0x05
    3bea:	8d 81       	ldd	r24, Y+5	; 0x05
    3bec:	9e 81       	ldd	r25, Y+6	; 0x06
    3bee:	9a 83       	std	Y+2, r25	; 0x02
    3bf0:	89 83       	std	Y+1, r24	; 0x01
    3bf2:	89 81       	ldd	r24, Y+1	; 0x01
    3bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf6:	01 97       	sbiw	r24, 0x01	; 1
    3bf8:	f1 f7       	brne	.-4      	; 0x3bf6 <ESP_error_handler+0x206>
    3bfa:	9a 83       	std	Y+2, r25	; 0x02
    3bfc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400);
		Clear_REC_Buffer();
    3bfe:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
    3c02:	06 c0       	rjmp	.+12     	; 0x3c10 <ESP_error_handler+0x220>
	}


	while(!ESP_connect_to_AP(WIFI_USER_NAME,WIFI_PASSWORD))
	{
		EF_void_LCD_Clear_then_print("ESP Not Connected to AP");
    3c04:	8c e2       	ldi	r24, 0x2C	; 44
    3c06:	91 e0       	ldi	r25, 0x01	; 1
    3c08:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
		Clear_REC_Buffer();
    3c0c:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
		_delay_ms(400);
		Clear_REC_Buffer();
	}


	while(!ESP_connect_to_AP(WIFI_USER_NAME,WIFI_PASSWORD))
    3c10:	84 e4       	ldi	r24, 0x44	; 68
    3c12:	91 e0       	ldi	r25, 0x01	; 1
    3c14:	2e e4       	ldi	r18, 0x4E	; 78
    3c16:	31 e0       	ldi	r19, 0x01	; 1
    3c18:	b9 01       	movw	r22, r18
    3c1a:	0e 94 2e 1c 	call	0x385c	; 0x385c <ESP_connect_to_AP>
    3c1e:	98 2f       	mov	r25, r24
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	89 27       	eor	r24, r25
    3c24:	88 23       	and	r24, r24
    3c26:	71 f7       	brne	.-36     	; 0x3c04 <ESP_error_handler+0x214>
	{
		EF_void_LCD_Clear_then_print("ESP Not Connected to AP");
		Clear_REC_Buffer();
	};

	EF_void_LCD_Clear_then_print("ESP Connected to AP");
    3c28:	87 e5       	ldi	r24, 0x57	; 87
    3c2a:	91 e0       	ldi	r25, 0x01	; 1
    3c2c:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
    3c30:	06 c0       	rjmp	.+12     	; 0x3c3e <ESP_error_handler+0x24e>


	while(!ESP_open_socket(CONNECTION_TYPE,SERVER_IP, SERVER_PORT))
	{
		EF_void_LCD_Clear_then_print("MQTT couldn't Open Socket");
    3c32:	8b e6       	ldi	r24, 0x6B	; 107
    3c34:	91 e0       	ldi	r25, 0x01	; 1
    3c36:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
		Clear_REC_Buffer();
    3c3a:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
	};

	EF_void_LCD_Clear_then_print("ESP Connected to AP");


	while(!ESP_open_socket(CONNECTION_TYPE,SERVER_IP, SERVER_PORT))
    3c3e:	85 e8       	ldi	r24, 0x85	; 133
    3c40:	91 e0       	ldi	r25, 0x01	; 1
    3c42:	29 e8       	ldi	r18, 0x89	; 137
    3c44:	31 e0       	ldi	r19, 0x01	; 1
    3c46:	44 ea       	ldi	r20, 0xA4	; 164
    3c48:	51 e0       	ldi	r21, 0x01	; 1
    3c4a:	b9 01       	movw	r22, r18
    3c4c:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <ESP_open_socket>
    3c50:	98 2f       	mov	r25, r24
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	89 27       	eor	r24, r25
    3c56:	88 23       	and	r24, r24
    3c58:	61 f7       	brne	.-40     	; 0x3c32 <ESP_error_handler+0x242>
	{
		EF_void_LCD_Clear_then_print("MQTT couldn't Open Socket");
		Clear_REC_Buffer();
	};
	EF_void_LCD_Clear_then_print("MQTT Opened Socket");
    3c5a:	89 ea       	ldi	r24, 0xA9	; 169
    3c5c:	91 e0       	ldi	r25, 0x01	; 1
    3c5e:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
    3c62:	06 c0       	rjmp	.+12     	; 0x3c70 <ESP_error_handler+0x280>

	while(!ESP_MQTT_connect(Client_ID,User_Name,Password))
	{
		EF_void_LCD_Clear_then_print("MQTT couldn't connect to broker");
    3c64:	8c eb       	ldi	r24, 0xBC	; 188
    3c66:	91 e0       	ldi	r25, 0x01	; 1
    3c68:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
		Clear_REC_Buffer();
    3c6c:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
		EF_void_LCD_Clear_then_print("MQTT couldn't Open Socket");
		Clear_REC_Buffer();
	};
	EF_void_LCD_Clear_then_print("MQTT Opened Socket");

	while(!ESP_MQTT_connect(Client_ID,User_Name,Password))
    3c70:	8c ed       	ldi	r24, 0xDC	; 220
    3c72:	91 e0       	ldi	r25, 0x01	; 1
    3c74:	2d ee       	ldi	r18, 0xED	; 237
    3c76:	31 e0       	ldi	r19, 0x01	; 1
    3c78:	41 e1       	ldi	r20, 0x11	; 17
    3c7a:	52 e0       	ldi	r21, 0x02	; 2
    3c7c:	b9 01       	movw	r22, r18
    3c7e:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <ESP_MQTT_connect>
    3c82:	98 2f       	mov	r25, r24
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	89 27       	eor	r24, r25
    3c88:	88 23       	and	r24, r24
    3c8a:	61 f7       	brne	.-40     	; 0x3c64 <ESP_error_handler+0x274>
	{
		EF_void_LCD_Clear_then_print("MQTT couldn't connect to broker");
		Clear_REC_Buffer();
	};

	EF_void_LCD_Clear_then_print("MQTT connected to broker");
    3c8c:	83 e1       	ldi	r24, 0x13	; 19
    3c8e:	92 e0       	ldi	r25, 0x02	; 2
    3c90:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>



	ESP_MQTT_subscribe_to_topics(subscribe_TOPIC1_NAME,subscribe_TOPIC2_NAME,subscribe_TOPIC3_NAME);
    3c94:	8c e2       	ldi	r24, 0x2C	; 44
    3c96:	92 e0       	ldi	r25, 0x02	; 2
    3c98:	27 e4       	ldi	r18, 0x47	; 71
    3c9a:	32 e0       	ldi	r19, 0x02	; 2
    3c9c:	42 e6       	ldi	r20, 0x62	; 98
    3c9e:	52 e0       	ldi	r21, 0x02	; 2
    3ca0:	b9 01       	movw	r22, r18
    3ca2:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <ESP_MQTT_subscribe_to_topics>


}
    3ca6:	6d 96       	adiw	r28, 0x1d	; 29
    3ca8:	0f b6       	in	r0, 0x3f	; 63
    3caa:	f8 94       	cli
    3cac:	de bf       	out	0x3e, r29	; 62
    3cae:	0f be       	out	0x3f, r0	; 63
    3cb0:	cd bf       	out	0x3d, r28	; 61
    3cb2:	cf 91       	pop	r28
    3cb4:	df 91       	pop	r29
    3cb6:	08 95       	ret

00003cb8 <ESP_check_connection>:



char ESP_check_connection(void)
{
    3cb8:	df 93       	push	r29
    3cba:	cf 93       	push	r28
    3cbc:	cd b7       	in	r28, 0x3d	; 61
    3cbe:	de b7       	in	r29, 0x3e	; 62
    3cc0:	6f 97       	sbiw	r28, 0x1f	; 31
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	f8 94       	cli
    3cc6:	de bf       	out	0x3e, r29	; 62
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	cd bf       	out	0x3d, r28	; 61
	unsigned int time_out=0;
    3ccc:	1e 8e       	std	Y+30, r1	; 0x1e
    3cce:	1d 8e       	std	Y+29, r1	; 0x1d
	Clear_REC_Buffer();
    3cd0:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
	UART_SEND_string( "AT+CIPSTATUS\r\n");
    3cd4:	81 e8       	ldi	r24, 0x81	; 129
    3cd6:	92 e0       	ldi	r25, 0x02	; 2
    3cd8:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    3cdc:	77 c0       	rjmp	.+238    	; 0x3dcc <ESP_check_connection+0x114>

	while(!((time_out>2000)||Check_Word_in_Respond("STATUS")))
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	a0 e8       	ldi	r26, 0x80	; 128
    3ce4:	bf e3       	ldi	r27, 0x3F	; 63
    3ce6:	89 8f       	std	Y+25, r24	; 0x19
    3ce8:	9a 8f       	std	Y+26, r25	; 0x1a
    3cea:	ab 8f       	std	Y+27, r26	; 0x1b
    3cec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cee:	69 8d       	ldd	r22, Y+25	; 0x19
    3cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	4a ef       	ldi	r20, 0xFA	; 250
    3cfc:	54 e4       	ldi	r21, 0x44	; 68
    3cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	8d 8b       	std	Y+21, r24	; 0x15
    3d08:	9e 8b       	std	Y+22, r25	; 0x16
    3d0a:	af 8b       	std	Y+23, r26	; 0x17
    3d0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    3d10:	7e 89       	ldd	r23, Y+22	; 0x16
    3d12:	8f 89       	ldd	r24, Y+23	; 0x17
    3d14:	98 8d       	ldd	r25, Y+24	; 0x18
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	40 e8       	ldi	r20, 0x80	; 128
    3d1c:	5f e3       	ldi	r21, 0x3F	; 63
    3d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d22:	88 23       	and	r24, r24
    3d24:	2c f4       	brge	.+10     	; 0x3d30 <ESP_check_connection+0x78>
		__ticks = 1;
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	9c 8b       	std	Y+20, r25	; 0x14
    3d2c:	8b 8b       	std	Y+19, r24	; 0x13
    3d2e:	3f c0       	rjmp	.+126    	; 0x3dae <ESP_check_connection+0xf6>
	else if (__tmp > 65535)
    3d30:	6d 89       	ldd	r22, Y+21	; 0x15
    3d32:	7e 89       	ldd	r23, Y+22	; 0x16
    3d34:	8f 89       	ldd	r24, Y+23	; 0x17
    3d36:	98 8d       	ldd	r25, Y+24	; 0x18
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	3f ef       	ldi	r19, 0xFF	; 255
    3d3c:	4f e7       	ldi	r20, 0x7F	; 127
    3d3e:	57 e4       	ldi	r21, 0x47	; 71
    3d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d44:	18 16       	cp	r1, r24
    3d46:	4c f5       	brge	.+82     	; 0x3d9a <ESP_check_connection+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d48:	69 8d       	ldd	r22, Y+25	; 0x19
    3d4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	40 e2       	ldi	r20, 0x20	; 32
    3d56:	51 e4       	ldi	r21, 0x41	; 65
    3d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	bc 01       	movw	r22, r24
    3d62:	cd 01       	movw	r24, r26
    3d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d68:	dc 01       	movw	r26, r24
    3d6a:	cb 01       	movw	r24, r22
    3d6c:	9c 8b       	std	Y+20, r25	; 0x14
    3d6e:	8b 8b       	std	Y+19, r24	; 0x13
    3d70:	0f c0       	rjmp	.+30     	; 0x3d90 <ESP_check_connection+0xd8>
    3d72:	88 ec       	ldi	r24, 0xC8	; 200
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	9a 8b       	std	Y+18, r25	; 0x12
    3d78:	89 8b       	std	Y+17, r24	; 0x11
    3d7a:	89 89       	ldd	r24, Y+17	; 0x11
    3d7c:	9a 89       	ldd	r25, Y+18	; 0x12
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <ESP_check_connection+0xc6>
    3d82:	9a 8b       	std	Y+18, r25	; 0x12
    3d84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d86:	8b 89       	ldd	r24, Y+19	; 0x13
    3d88:	9c 89       	ldd	r25, Y+20	; 0x14
    3d8a:	01 97       	sbiw	r24, 0x01	; 1
    3d8c:	9c 8b       	std	Y+20, r25	; 0x14
    3d8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d90:	8b 89       	ldd	r24, Y+19	; 0x13
    3d92:	9c 89       	ldd	r25, Y+20	; 0x14
    3d94:	00 97       	sbiw	r24, 0x00	; 0
    3d96:	69 f7       	brne	.-38     	; 0x3d72 <ESP_check_connection+0xba>
    3d98:	14 c0       	rjmp	.+40     	; 0x3dc2 <ESP_check_connection+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    3d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    3d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    3da0:	98 8d       	ldd	r25, Y+24	; 0x18
    3da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	9c 8b       	std	Y+20, r25	; 0x14
    3dac:	8b 8b       	std	Y+19, r24	; 0x13
    3dae:	8b 89       	ldd	r24, Y+19	; 0x13
    3db0:	9c 89       	ldd	r25, Y+20	; 0x14
    3db2:	98 8b       	std	Y+16, r25	; 0x10
    3db4:	8f 87       	std	Y+15, r24	; 0x0f
    3db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3db8:	98 89       	ldd	r25, Y+16	; 0x10
    3dba:	01 97       	sbiw	r24, 0x01	; 1
    3dbc:	f1 f7       	brne	.-4      	; 0x3dba <ESP_check_connection+0x102>
    3dbe:	98 8b       	std	Y+16, r25	; 0x10
    3dc0:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(1);
		time_out++;
    3dc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3dc6:	01 96       	adiw	r24, 0x01	; 1
    3dc8:	9e 8f       	std	Y+30, r25	; 0x1e
    3dca:	8d 8f       	std	Y+29, r24	; 0x1d
{
	unsigned int time_out=0;
	Clear_REC_Buffer();
	UART_SEND_string( "AT+CIPSTATUS\r\n");

	while(!((time_out>2000)||Check_Word_in_Respond("STATUS")))
    3dcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3dd0:	27 e0       	ldi	r18, 0x07	; 7
    3dd2:	81 3d       	cpi	r24, 0xD1	; 209
    3dd4:	92 07       	cpc	r25, r18
    3dd6:	38 f4       	brcc	.+14     	; 0x3de6 <ESP_check_connection+0x12e>
    3dd8:	80 e9       	ldi	r24, 0x90	; 144
    3dda:	92 e0       	ldi	r25, 0x02	; 2
    3ddc:	0e 94 65 17 	call	0x2eca	; 0x2eca <Check_Word_in_Respond>
    3de0:	88 23       	and	r24, r24
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <ESP_check_connection+0x12e>
    3de4:	7c cf       	rjmp	.-264    	; 0x3cde <ESP_check_connection+0x26>
    3de6:	80 e0       	ldi	r24, 0x00	; 0
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	a8 e4       	ldi	r26, 0x48	; 72
    3dec:	b2 e4       	ldi	r27, 0x42	; 66
    3dee:	8b 87       	std	Y+11, r24	; 0x0b
    3df0:	9c 87       	std	Y+12, r25	; 0x0c
    3df2:	ad 87       	std	Y+13, r26	; 0x0d
    3df4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3df6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3df8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dfe:	20 e0       	ldi	r18, 0x00	; 0
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	4a ef       	ldi	r20, 0xFA	; 250
    3e04:	54 e4       	ldi	r21, 0x44	; 68
    3e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	cb 01       	movw	r24, r22
    3e0e:	8f 83       	std	Y+7, r24	; 0x07
    3e10:	98 87       	std	Y+8, r25	; 0x08
    3e12:	a9 87       	std	Y+9, r26	; 0x09
    3e14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e16:	6f 81       	ldd	r22, Y+7	; 0x07
    3e18:	78 85       	ldd	r23, Y+8	; 0x08
    3e1a:	89 85       	ldd	r24, Y+9	; 0x09
    3e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e1e:	20 e0       	ldi	r18, 0x00	; 0
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	40 e8       	ldi	r20, 0x80	; 128
    3e24:	5f e3       	ldi	r21, 0x3F	; 63
    3e26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e2a:	88 23       	and	r24, r24
    3e2c:	2c f4       	brge	.+10     	; 0x3e38 <ESP_check_connection+0x180>
		__ticks = 1;
    3e2e:	81 e0       	ldi	r24, 0x01	; 1
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	9e 83       	std	Y+6, r25	; 0x06
    3e34:	8d 83       	std	Y+5, r24	; 0x05
    3e36:	3f c0       	rjmp	.+126    	; 0x3eb6 <ESP_check_connection+0x1fe>
	else if (__tmp > 65535)
    3e38:	6f 81       	ldd	r22, Y+7	; 0x07
    3e3a:	78 85       	ldd	r23, Y+8	; 0x08
    3e3c:	89 85       	ldd	r24, Y+9	; 0x09
    3e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	3f ef       	ldi	r19, 0xFF	; 255
    3e44:	4f e7       	ldi	r20, 0x7F	; 127
    3e46:	57 e4       	ldi	r21, 0x47	; 71
    3e48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e4c:	18 16       	cp	r1, r24
    3e4e:	4c f5       	brge	.+82     	; 0x3ea2 <ESP_check_connection+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e50:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e52:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e56:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e58:	20 e0       	ldi	r18, 0x00	; 0
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	40 e2       	ldi	r20, 0x20	; 32
    3e5e:	51 e4       	ldi	r21, 0x41	; 65
    3e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	bc 01       	movw	r22, r24
    3e6a:	cd 01       	movw	r24, r26
    3e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	9e 83       	std	Y+6, r25	; 0x06
    3e76:	8d 83       	std	Y+5, r24	; 0x05
    3e78:	0f c0       	rjmp	.+30     	; 0x3e98 <ESP_check_connection+0x1e0>
    3e7a:	88 ec       	ldi	r24, 0xC8	; 200
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	9c 83       	std	Y+4, r25	; 0x04
    3e80:	8b 83       	std	Y+3, r24	; 0x03
    3e82:	8b 81       	ldd	r24, Y+3	; 0x03
    3e84:	9c 81       	ldd	r25, Y+4	; 0x04
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	f1 f7       	brne	.-4      	; 0x3e86 <ESP_check_connection+0x1ce>
    3e8a:	9c 83       	std	Y+4, r25	; 0x04
    3e8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e90:	9e 81       	ldd	r25, Y+6	; 0x06
    3e92:	01 97       	sbiw	r24, 0x01	; 1
    3e94:	9e 83       	std	Y+6, r25	; 0x06
    3e96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e98:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e9c:	00 97       	sbiw	r24, 0x00	; 0
    3e9e:	69 f7       	brne	.-38     	; 0x3e7a <ESP_check_connection+0x1c2>
    3ea0:	14 c0       	rjmp	.+40     	; 0x3eca <ESP_check_connection+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ea4:	78 85       	ldd	r23, Y+8	; 0x08
    3ea6:	89 85       	ldd	r24, Y+9	; 0x09
    3ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	9e 83       	std	Y+6, r25	; 0x06
    3eb4:	8d 83       	std	Y+5, r24	; 0x05
    3eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eba:	9a 83       	std	Y+2, r25	; 0x02
    3ebc:	89 83       	std	Y+1, r24	; 0x01
    3ebe:	89 81       	ldd	r24, Y+1	; 0x01
    3ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec2:	01 97       	sbiw	r24, 0x01	; 1
    3ec4:	f1 f7       	brne	.-4      	; 0x3ec2 <ESP_check_connection+0x20a>
    3ec6:	9a 83       	std	Y+2, r25	; 0x02
    3ec8:	89 83       	std	Y+1, r24	; 0x01
	}


	_delay_ms(50);

	if(Check_Respond(":2\r\n"))
    3eca:	87 e9       	ldi	r24, 0x97	; 151
    3ecc:	92 e0       	ldi	r25, 0x02	; 2
    3ece:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    3ed2:	88 23       	and	r24, r24
    3ed4:	19 f0       	breq	.+6      	; 0x3edc <ESP_check_connection+0x224>
	{
		return ESP8266_connected_to_AP;
    3ed6:	82 e0       	ldi	r24, 0x02	; 2
    3ed8:	8f 8f       	std	Y+31, r24	; 0x1f
    3eda:	1c c0       	rjmp	.+56     	; 0x3f14 <ESP_check_connection+0x25c>
	}
	else if(Check_Respond(":3\r\n"))
    3edc:	8c e9       	ldi	r24, 0x9C	; 156
    3ede:	92 e0       	ldi	r25, 0x02	; 2
    3ee0:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    3ee4:	88 23       	and	r24, r24
    3ee6:	19 f0       	breq	.+6      	; 0x3eee <ESP_check_connection+0x236>
	{
		return ESP8266_created_TCP_connection;
    3ee8:	23 e0       	ldi	r18, 0x03	; 3
    3eea:	2f 8f       	std	Y+31, r18	; 0x1f
    3eec:	13 c0       	rjmp	.+38     	; 0x3f14 <ESP_check_connection+0x25c>
	}
	else if(Check_Respond(":4\r\n"))
    3eee:	81 ea       	ldi	r24, 0xA1	; 161
    3ef0:	92 e0       	ldi	r25, 0x02	; 2
    3ef2:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    3ef6:	88 23       	and	r24, r24
    3ef8:	19 f0       	breq	.+6      	; 0x3f00 <ESP_check_connection+0x248>
	{
		return ESP8266_disconnected_TCP_connection;
    3efa:	84 e0       	ldi	r24, 0x04	; 4
    3efc:	8f 8f       	std	Y+31, r24	; 0x1f
    3efe:	0a c0       	rjmp	.+20     	; 0x3f14 <ESP_check_connection+0x25c>
	}
	else if(Check_Respond(":5\r\n"))
    3f00:	86 ea       	ldi	r24, 0xA6	; 166
    3f02:	92 e0       	ldi	r25, 0x02	; 2
    3f04:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    3f08:	88 23       	and	r24, r24
    3f0a:	19 f0       	breq	.+6      	; 0x3f12 <ESP_check_connection+0x25a>
	{
		return ESP8266_is_Not_connected_to_AP;
    3f0c:	25 e0       	ldi	r18, 0x05	; 5
    3f0e:	2f 8f       	std	Y+31, r18	; 0x1f
    3f10:	01 c0       	rjmp	.+2      	; 0x3f14 <ESP_check_connection+0x25c>
	}

	return FALSE;
    3f12:	1f 8e       	std	Y+31, r1	; 0x1f
    3f14:	8f 8d       	ldd	r24, Y+31	; 0x1f

}
    3f16:	6f 96       	adiw	r28, 0x1f	; 31
    3f18:	0f b6       	in	r0, 0x3f	; 63
    3f1a:	f8 94       	cli
    3f1c:	de bf       	out	0x3e, r29	; 62
    3f1e:	0f be       	out	0x3f, r0	; 63
    3f20:	cd bf       	out	0x3d, r28	; 61
    3f22:	cf 91       	pop	r28
    3f24:	df 91       	pop	r29
    3f26:	08 95       	ret

00003f28 <ESP_open_socket>:

bool ESP_open_socket(char* connection_type,char* server_ip,char* server_port)
{
    3f28:	df 93       	push	r29
    3f2a:	cf 93       	push	r28
    3f2c:	cd b7       	in	r28, 0x3d	; 61
    3f2e:	de b7       	in	r29, 0x3e	; 62
    3f30:	a5 97       	sbiw	r28, 0x25	; 37
    3f32:	0f b6       	in	r0, 0x3f	; 63
    3f34:	f8 94       	cli
    3f36:	de bf       	out	0x3e, r29	; 62
    3f38:	0f be       	out	0x3f, r0	; 63
    3f3a:	cd bf       	out	0x3d, r28	; 61
    3f3c:	98 a3       	std	Y+32, r25	; 0x20
    3f3e:	8f 8f       	std	Y+31, r24	; 0x1f
    3f40:	7a a3       	std	Y+34, r23	; 0x22
    3f42:	69 a3       	std	Y+33, r22	; 0x21
    3f44:	5c a3       	std	Y+36, r21	; 0x24
    3f46:	4b a3       	std	Y+35, r20	; 0x23
	unsigned int time_out=0;
    3f48:	1e 8e       	std	Y+30, r1	; 0x1e
    3f4a:	1d 8e       	std	Y+29, r1	; 0x1d

	UART_SEND_string( "AT+CIPSTART=\"");
    3f4c:	8b ea       	ldi	r24, 0xAB	; 171
    3f4e:	92 e0       	ldi	r25, 0x02	; 2
    3f50:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SEND_string( connection_type);
    3f54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f56:	98 a1       	ldd	r25, Y+32	; 0x20
    3f58:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SEND_string("\",\"");
    3f5c:	8b ec       	ldi	r24, 0xCB	; 203
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SEND_string( SERVER_IP);
    3f64:	89 e8       	ldi	r24, 0x89	; 137
    3f66:	91 e0       	ldi	r25, 0x01	; 1
    3f68:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SEND_string( "\",");
    3f6c:	89 eb       	ldi	r24, 0xB9	; 185
    3f6e:	92 e0       	ldi	r25, 0x02	; 2
    3f70:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SEND_string( SERVER_PORT);
    3f74:	84 ea       	ldi	r24, 0xA4	; 164
    3f76:	91 e0       	ldi	r25, 0x01	; 1
    3f78:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SEND_string( "\r\n");
    3f7c:	8c eb       	ldi	r24, 0xBC	; 188
    3f7e:	92 e0       	ldi	r25, 0x02	; 2
    3f80:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    3f84:	77 c0       	rjmp	.+238    	; 0x4074 <ESP_open_socket+0x14c>



	while(!((time_out>8000)||Check_Respond("CONNECT\r\n\r\nOK\r\n")))
    3f86:	80 e0       	ldi	r24, 0x00	; 0
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	a0 e8       	ldi	r26, 0x80	; 128
    3f8c:	bf e3       	ldi	r27, 0x3F	; 63
    3f8e:	89 8f       	std	Y+25, r24	; 0x19
    3f90:	9a 8f       	std	Y+26, r25	; 0x1a
    3f92:	ab 8f       	std	Y+27, r26	; 0x1b
    3f94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f96:	69 8d       	ldd	r22, Y+25	; 0x19
    3f98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	4a ef       	ldi	r20, 0xFA	; 250
    3fa4:	54 e4       	ldi	r21, 0x44	; 68
    3fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	8d 8b       	std	Y+21, r24	; 0x15
    3fb0:	9e 8b       	std	Y+22, r25	; 0x16
    3fb2:	af 8b       	std	Y+23, r26	; 0x17
    3fb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fb6:	6d 89       	ldd	r22, Y+21	; 0x15
    3fb8:	7e 89       	ldd	r23, Y+22	; 0x16
    3fba:	8f 89       	ldd	r24, Y+23	; 0x17
    3fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    3fbe:	20 e0       	ldi	r18, 0x00	; 0
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	40 e8       	ldi	r20, 0x80	; 128
    3fc4:	5f e3       	ldi	r21, 0x3F	; 63
    3fc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fca:	88 23       	and	r24, r24
    3fcc:	2c f4       	brge	.+10     	; 0x3fd8 <ESP_open_socket+0xb0>
		__ticks = 1;
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	9c 8b       	std	Y+20, r25	; 0x14
    3fd4:	8b 8b       	std	Y+19, r24	; 0x13
    3fd6:	3f c0       	rjmp	.+126    	; 0x4056 <ESP_open_socket+0x12e>
	else if (__tmp > 65535)
    3fd8:	6d 89       	ldd	r22, Y+21	; 0x15
    3fda:	7e 89       	ldd	r23, Y+22	; 0x16
    3fdc:	8f 89       	ldd	r24, Y+23	; 0x17
    3fde:	98 8d       	ldd	r25, Y+24	; 0x18
    3fe0:	20 e0       	ldi	r18, 0x00	; 0
    3fe2:	3f ef       	ldi	r19, 0xFF	; 255
    3fe4:	4f e7       	ldi	r20, 0x7F	; 127
    3fe6:	57 e4       	ldi	r21, 0x47	; 71
    3fe8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fec:	18 16       	cp	r1, r24
    3fee:	4c f5       	brge	.+82     	; 0x4042 <ESP_open_socket+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ff0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ff2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ff4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ff6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ff8:	20 e0       	ldi	r18, 0x00	; 0
    3ffa:	30 e0       	ldi	r19, 0x00	; 0
    3ffc:	40 e2       	ldi	r20, 0x20	; 32
    3ffe:	51 e4       	ldi	r21, 0x41	; 65
    4000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4004:	dc 01       	movw	r26, r24
    4006:	cb 01       	movw	r24, r22
    4008:	bc 01       	movw	r22, r24
    400a:	cd 01       	movw	r24, r26
    400c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22
    4014:	9c 8b       	std	Y+20, r25	; 0x14
    4016:	8b 8b       	std	Y+19, r24	; 0x13
    4018:	0f c0       	rjmp	.+30     	; 0x4038 <ESP_open_socket+0x110>
    401a:	88 ec       	ldi	r24, 0xC8	; 200
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	9a 8b       	std	Y+18, r25	; 0x12
    4020:	89 8b       	std	Y+17, r24	; 0x11
    4022:	89 89       	ldd	r24, Y+17	; 0x11
    4024:	9a 89       	ldd	r25, Y+18	; 0x12
    4026:	01 97       	sbiw	r24, 0x01	; 1
    4028:	f1 f7       	brne	.-4      	; 0x4026 <ESP_open_socket+0xfe>
    402a:	9a 8b       	std	Y+18, r25	; 0x12
    402c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    402e:	8b 89       	ldd	r24, Y+19	; 0x13
    4030:	9c 89       	ldd	r25, Y+20	; 0x14
    4032:	01 97       	sbiw	r24, 0x01	; 1
    4034:	9c 8b       	std	Y+20, r25	; 0x14
    4036:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4038:	8b 89       	ldd	r24, Y+19	; 0x13
    403a:	9c 89       	ldd	r25, Y+20	; 0x14
    403c:	00 97       	sbiw	r24, 0x00	; 0
    403e:	69 f7       	brne	.-38     	; 0x401a <ESP_open_socket+0xf2>
    4040:	14 c0       	rjmp	.+40     	; 0x406a <ESP_open_socket+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4042:	6d 89       	ldd	r22, Y+21	; 0x15
    4044:	7e 89       	ldd	r23, Y+22	; 0x16
    4046:	8f 89       	ldd	r24, Y+23	; 0x17
    4048:	98 8d       	ldd	r25, Y+24	; 0x18
    404a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    404e:	dc 01       	movw	r26, r24
    4050:	cb 01       	movw	r24, r22
    4052:	9c 8b       	std	Y+20, r25	; 0x14
    4054:	8b 8b       	std	Y+19, r24	; 0x13
    4056:	8b 89       	ldd	r24, Y+19	; 0x13
    4058:	9c 89       	ldd	r25, Y+20	; 0x14
    405a:	98 8b       	std	Y+16, r25	; 0x10
    405c:	8f 87       	std	Y+15, r24	; 0x0f
    405e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4060:	98 89       	ldd	r25, Y+16	; 0x10
    4062:	01 97       	sbiw	r24, 0x01	; 1
    4064:	f1 f7       	brne	.-4      	; 0x4062 <ESP_open_socket+0x13a>
    4066:	98 8b       	std	Y+16, r25	; 0x10
    4068:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(1);
		time_out++;
    406a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    406c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    406e:	01 96       	adiw	r24, 0x01	; 1
    4070:	9e 8f       	std	Y+30, r25	; 0x1e
    4072:	8d 8f       	std	Y+29, r24	; 0x1d
	UART_SEND_string( SERVER_PORT);
	UART_SEND_string( "\r\n");



	while(!((time_out>8000)||Check_Respond("CONNECT\r\n\r\nOK\r\n")))
    4074:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4076:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4078:	2f e1       	ldi	r18, 0x1F	; 31
    407a:	81 34       	cpi	r24, 0x41	; 65
    407c:	92 07       	cpc	r25, r18
    407e:	38 f4       	brcc	.+14     	; 0x408e <ESP_open_socket+0x166>
    4080:	8f eb       	ldi	r24, 0xBF	; 191
    4082:	92 e0       	ldi	r25, 0x02	; 2
    4084:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    4088:	88 23       	and	r24, r24
    408a:	09 f4       	brne	.+2      	; 0x408e <ESP_open_socket+0x166>
    408c:	7c cf       	rjmp	.-264    	; 0x3f86 <ESP_open_socket+0x5e>
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	a6 e9       	ldi	r26, 0x96	; 150
    4094:	b3 e4       	ldi	r27, 0x43	; 67
    4096:	8b 87       	std	Y+11, r24	; 0x0b
    4098:	9c 87       	std	Y+12, r25	; 0x0c
    409a:	ad 87       	std	Y+13, r26	; 0x0d
    409c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    409e:	6b 85       	ldd	r22, Y+11	; 0x0b
    40a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    40a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    40a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    40a6:	20 e0       	ldi	r18, 0x00	; 0
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	4a ef       	ldi	r20, 0xFA	; 250
    40ac:	54 e4       	ldi	r21, 0x44	; 68
    40ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b2:	dc 01       	movw	r26, r24
    40b4:	cb 01       	movw	r24, r22
    40b6:	8f 83       	std	Y+7, r24	; 0x07
    40b8:	98 87       	std	Y+8, r25	; 0x08
    40ba:	a9 87       	std	Y+9, r26	; 0x09
    40bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40be:	6f 81       	ldd	r22, Y+7	; 0x07
    40c0:	78 85       	ldd	r23, Y+8	; 0x08
    40c2:	89 85       	ldd	r24, Y+9	; 0x09
    40c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	40 e8       	ldi	r20, 0x80	; 128
    40cc:	5f e3       	ldi	r21, 0x3F	; 63
    40ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40d2:	88 23       	and	r24, r24
    40d4:	2c f4       	brge	.+10     	; 0x40e0 <ESP_open_socket+0x1b8>
		__ticks = 1;
    40d6:	81 e0       	ldi	r24, 0x01	; 1
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	9e 83       	std	Y+6, r25	; 0x06
    40dc:	8d 83       	std	Y+5, r24	; 0x05
    40de:	3f c0       	rjmp	.+126    	; 0x415e <ESP_open_socket+0x236>
	else if (__tmp > 65535)
    40e0:	6f 81       	ldd	r22, Y+7	; 0x07
    40e2:	78 85       	ldd	r23, Y+8	; 0x08
    40e4:	89 85       	ldd	r24, Y+9	; 0x09
    40e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e8:	20 e0       	ldi	r18, 0x00	; 0
    40ea:	3f ef       	ldi	r19, 0xFF	; 255
    40ec:	4f e7       	ldi	r20, 0x7F	; 127
    40ee:	57 e4       	ldi	r21, 0x47	; 71
    40f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40f4:	18 16       	cp	r1, r24
    40f6:	4c f5       	brge	.+82     	; 0x414a <ESP_open_socket+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    40fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    40fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    40fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4100:	20 e0       	ldi	r18, 0x00	; 0
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	40 e2       	ldi	r20, 0x20	; 32
    4106:	51 e4       	ldi	r21, 0x41	; 65
    4108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    410c:	dc 01       	movw	r26, r24
    410e:	cb 01       	movw	r24, r22
    4110:	bc 01       	movw	r22, r24
    4112:	cd 01       	movw	r24, r26
    4114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4118:	dc 01       	movw	r26, r24
    411a:	cb 01       	movw	r24, r22
    411c:	9e 83       	std	Y+6, r25	; 0x06
    411e:	8d 83       	std	Y+5, r24	; 0x05
    4120:	0f c0       	rjmp	.+30     	; 0x4140 <ESP_open_socket+0x218>
    4122:	88 ec       	ldi	r24, 0xC8	; 200
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	9c 83       	std	Y+4, r25	; 0x04
    4128:	8b 83       	std	Y+3, r24	; 0x03
    412a:	8b 81       	ldd	r24, Y+3	; 0x03
    412c:	9c 81       	ldd	r25, Y+4	; 0x04
    412e:	01 97       	sbiw	r24, 0x01	; 1
    4130:	f1 f7       	brne	.-4      	; 0x412e <ESP_open_socket+0x206>
    4132:	9c 83       	std	Y+4, r25	; 0x04
    4134:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4136:	8d 81       	ldd	r24, Y+5	; 0x05
    4138:	9e 81       	ldd	r25, Y+6	; 0x06
    413a:	01 97       	sbiw	r24, 0x01	; 1
    413c:	9e 83       	std	Y+6, r25	; 0x06
    413e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4140:	8d 81       	ldd	r24, Y+5	; 0x05
    4142:	9e 81       	ldd	r25, Y+6	; 0x06
    4144:	00 97       	sbiw	r24, 0x00	; 0
    4146:	69 f7       	brne	.-38     	; 0x4122 <ESP_open_socket+0x1fa>
    4148:	14 c0       	rjmp	.+40     	; 0x4172 <ESP_open_socket+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    414a:	6f 81       	ldd	r22, Y+7	; 0x07
    414c:	78 85       	ldd	r23, Y+8	; 0x08
    414e:	89 85       	ldd	r24, Y+9	; 0x09
    4150:	9a 85       	ldd	r25, Y+10	; 0x0a
    4152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4156:	dc 01       	movw	r26, r24
    4158:	cb 01       	movw	r24, r22
    415a:	9e 83       	std	Y+6, r25	; 0x06
    415c:	8d 83       	std	Y+5, r24	; 0x05
    415e:	8d 81       	ldd	r24, Y+5	; 0x05
    4160:	9e 81       	ldd	r25, Y+6	; 0x06
    4162:	9a 83       	std	Y+2, r25	; 0x02
    4164:	89 83       	std	Y+1, r24	; 0x01
    4166:	89 81       	ldd	r24, Y+1	; 0x01
    4168:	9a 81       	ldd	r25, Y+2	; 0x02
    416a:	01 97       	sbiw	r24, 0x01	; 1
    416c:	f1 f7       	brne	.-4      	; 0x416a <ESP_open_socket+0x242>
    416e:	9a 83       	std	Y+2, r25	; 0x02
    4170:	89 83       	std	Y+1, r24	; 0x01
		time_out++;
	}

	_delay_ms(300);

	if (time_out>8000)
    4172:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4174:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4176:	2f e1       	ldi	r18, 0x1F	; 31
    4178:	81 34       	cpi	r24, 0x41	; 65
    417a:	92 07       	cpc	r25, r18
    417c:	48 f0       	brcs	.+18     	; 0x4190 <ESP_open_socket+0x268>
	{
		if(ESP_check_connection()==ESP8266_created_TCP_connection)
    417e:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <ESP_check_connection>
    4182:	83 30       	cpi	r24, 0x03	; 3
    4184:	19 f4       	brne	.+6      	; 0x418c <ESP_open_socket+0x264>
		{
			return TRUE;
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	8d a3       	std	Y+37, r24	; 0x25
    418a:	04 c0       	rjmp	.+8      	; 0x4194 <ESP_open_socket+0x26c>
		}

		return FALSE;
    418c:	1d a2       	std	Y+37, r1	; 0x25
    418e:	02 c0       	rjmp	.+4      	; 0x4194 <ESP_open_socket+0x26c>
	}
	else                 return TRUE;
    4190:	21 e0       	ldi	r18, 0x01	; 1
    4192:	2d a3       	std	Y+37, r18	; 0x25
    4194:	8d a1       	ldd	r24, Y+37	; 0x25
}
    4196:	a5 96       	adiw	r28, 0x25	; 37
    4198:	0f b6       	in	r0, 0x3f	; 63
    419a:	f8 94       	cli
    419c:	de bf       	out	0x3e, r29	; 62
    419e:	0f be       	out	0x3f, r0	; 63
    41a0:	cd bf       	out	0x3d, r28	; 61
    41a2:	cf 91       	pop	r28
    41a4:	df 91       	pop	r29
    41a6:	08 95       	ret

000041a8 <ESP_MQTT_connect>:


bool ESP_MQTT_connect(const char * client_id,const char * user_name,const char * password)
{
    41a8:	df 93       	push	r29
    41aa:	cf 93       	push	r28
    41ac:	cd b7       	in	r28, 0x3d	; 61
    41ae:	de b7       	in	r29, 0x3e	; 62
    41b0:	e8 97       	sbiw	r28, 0x38	; 56
    41b2:	0f b6       	in	r0, 0x3f	; 63
    41b4:	f8 94       	cli
    41b6:	de bf       	out	0x3e, r29	; 62
    41b8:	0f be       	out	0x3f, r0	; 63
    41ba:	cd bf       	out	0x3d, r28	; 61
    41bc:	9b ab       	std	Y+51, r25	; 0x33
    41be:	8a ab       	std	Y+50, r24	; 0x32
    41c0:	7d ab       	std	Y+53, r23	; 0x35
    41c2:	6c ab       	std	Y+52, r22	; 0x34
    41c4:	5f ab       	std	Y+55, r21	; 0x37
    41c6:	4e ab       	std	Y+54, r20	; 0x36
	unsigned int time_out=0;
    41c8:	19 aa       	std	Y+49, r1	; 0x31
    41ca:	18 aa       	std	Y+48, r1	; 0x30
	unsigned char client_id_length=0,user_name_length=0,password_length=0;
    41cc:	1f a6       	std	Y+47, r1	; 0x2f
    41ce:	1e a6       	std	Y+46, r1	; 0x2e
    41d0:	1d a6       	std	Y+45, r1	; 0x2d
	unsigned char remeaning_length_byte=0,frame_length=0;
    41d2:	1c a6       	std	Y+44, r1	; 0x2c
    41d4:	1b a6       	std	Y+43, r1	; 0x2b

	client_id_length=strlen(client_id);
    41d6:	8a a9       	ldd	r24, Y+50	; 0x32
    41d8:	9b a9       	ldd	r25, Y+51	; 0x33
    41da:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <strlen>
    41de:	8f a7       	std	Y+47, r24	; 0x2f
	user_name_length=strlen(user_name);
    41e0:	8c a9       	ldd	r24, Y+52	; 0x34
    41e2:	9d a9       	ldd	r25, Y+53	; 0x35
    41e4:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <strlen>
    41e8:	8e a7       	std	Y+46, r24	; 0x2e
	password_length=strlen(password);
    41ea:	8e a9       	ldd	r24, Y+54	; 0x36
    41ec:	9f a9       	ldd	r25, Y+55	; 0x37
    41ee:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <strlen>
    41f2:	8d a7       	std	Y+45, r24	; 0x2d

	remeaning_length_byte=client_id_length+user_name_length+password_length+16;
    41f4:	9f a5       	ldd	r25, Y+47	; 0x2f
    41f6:	8e a5       	ldd	r24, Y+46	; 0x2e
    41f8:	98 0f       	add	r25, r24
    41fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    41fc:	89 0f       	add	r24, r25
    41fe:	80 5f       	subi	r24, 0xF0	; 240
    4200:	8c a7       	std	Y+44, r24	; 0x2c
	frame_length=remeaning_length_byte+2;
    4202:	8c a5       	ldd	r24, Y+44	; 0x2c
    4204:	8e 5f       	subi	r24, 0xFE	; 254
    4206:	8b a7       	std	Y+43, r24	; 0x2b

	Clear_REC_Buffer();
    4208:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>

	UART_SEND_string("AT+CIPSEND=");
    420c:	8f ec       	ldi	r24, 0xCF	; 207
    420e:	92 e0       	ldi	r25, 0x02	; 2
    4210:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SEND_number(frame_length);
    4214:	8b a5       	ldd	r24, Y+43	; 0x2b
    4216:	88 2f       	mov	r24, r24
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	0e 94 f7 07 	call	0xfee	; 0xfee <UART_SEND_number>
	UART_SEND_string("\r\n");
    421e:	8c eb       	ldi	r24, 0xBC	; 188
    4220:	92 e0       	ldi	r25, 0x02	; 2
    4222:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    4226:	77 c0       	rjmp	.+238    	; 0x4316 <ESP_MQTT_connect+0x16e>

	while(!((time_out>2000)||Check_Respond("\r\nOK\r\n> ")))
    4228:	80 e0       	ldi	r24, 0x00	; 0
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	a0 e8       	ldi	r26, 0x80	; 128
    422e:	bf e3       	ldi	r27, 0x3F	; 63
    4230:	8f a3       	std	Y+39, r24	; 0x27
    4232:	98 a7       	std	Y+40, r25	; 0x28
    4234:	a9 a7       	std	Y+41, r26	; 0x29
    4236:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4238:	6f a1       	ldd	r22, Y+39	; 0x27
    423a:	78 a5       	ldd	r23, Y+40	; 0x28
    423c:	89 a5       	ldd	r24, Y+41	; 0x29
    423e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	4a ef       	ldi	r20, 0xFA	; 250
    4246:	54 e4       	ldi	r21, 0x44	; 68
    4248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    424c:	dc 01       	movw	r26, r24
    424e:	cb 01       	movw	r24, r22
    4250:	8b a3       	std	Y+35, r24	; 0x23
    4252:	9c a3       	std	Y+36, r25	; 0x24
    4254:	ad a3       	std	Y+37, r26	; 0x25
    4256:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4258:	6b a1       	ldd	r22, Y+35	; 0x23
    425a:	7c a1       	ldd	r23, Y+36	; 0x24
    425c:	8d a1       	ldd	r24, Y+37	; 0x25
    425e:	9e a1       	ldd	r25, Y+38	; 0x26
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	40 e8       	ldi	r20, 0x80	; 128
    4266:	5f e3       	ldi	r21, 0x3F	; 63
    4268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    426c:	88 23       	and	r24, r24
    426e:	2c f4       	brge	.+10     	; 0x427a <ESP_MQTT_connect+0xd2>
		__ticks = 1;
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	9a a3       	std	Y+34, r25	; 0x22
    4276:	89 a3       	std	Y+33, r24	; 0x21
    4278:	3f c0       	rjmp	.+126    	; 0x42f8 <ESP_MQTT_connect+0x150>
	else if (__tmp > 65535)
    427a:	6b a1       	ldd	r22, Y+35	; 0x23
    427c:	7c a1       	ldd	r23, Y+36	; 0x24
    427e:	8d a1       	ldd	r24, Y+37	; 0x25
    4280:	9e a1       	ldd	r25, Y+38	; 0x26
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	3f ef       	ldi	r19, 0xFF	; 255
    4286:	4f e7       	ldi	r20, 0x7F	; 127
    4288:	57 e4       	ldi	r21, 0x47	; 71
    428a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    428e:	18 16       	cp	r1, r24
    4290:	4c f5       	brge	.+82     	; 0x42e4 <ESP_MQTT_connect+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4292:	6f a1       	ldd	r22, Y+39	; 0x27
    4294:	78 a5       	ldd	r23, Y+40	; 0x28
    4296:	89 a5       	ldd	r24, Y+41	; 0x29
    4298:	9a a5       	ldd	r25, Y+42	; 0x2a
    429a:	20 e0       	ldi	r18, 0x00	; 0
    429c:	30 e0       	ldi	r19, 0x00	; 0
    429e:	40 e2       	ldi	r20, 0x20	; 32
    42a0:	51 e4       	ldi	r21, 0x41	; 65
    42a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42a6:	dc 01       	movw	r26, r24
    42a8:	cb 01       	movw	r24, r22
    42aa:	bc 01       	movw	r22, r24
    42ac:	cd 01       	movw	r24, r26
    42ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b2:	dc 01       	movw	r26, r24
    42b4:	cb 01       	movw	r24, r22
    42b6:	9a a3       	std	Y+34, r25	; 0x22
    42b8:	89 a3       	std	Y+33, r24	; 0x21
    42ba:	0f c0       	rjmp	.+30     	; 0x42da <ESP_MQTT_connect+0x132>
    42bc:	88 ec       	ldi	r24, 0xC8	; 200
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	98 a3       	std	Y+32, r25	; 0x20
    42c2:	8f 8f       	std	Y+31, r24	; 0x1f
    42c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42c6:	98 a1       	ldd	r25, Y+32	; 0x20
    42c8:	01 97       	sbiw	r24, 0x01	; 1
    42ca:	f1 f7       	brne	.-4      	; 0x42c8 <ESP_MQTT_connect+0x120>
    42cc:	98 a3       	std	Y+32, r25	; 0x20
    42ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42d0:	89 a1       	ldd	r24, Y+33	; 0x21
    42d2:	9a a1       	ldd	r25, Y+34	; 0x22
    42d4:	01 97       	sbiw	r24, 0x01	; 1
    42d6:	9a a3       	std	Y+34, r25	; 0x22
    42d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42da:	89 a1       	ldd	r24, Y+33	; 0x21
    42dc:	9a a1       	ldd	r25, Y+34	; 0x22
    42de:	00 97       	sbiw	r24, 0x00	; 0
    42e0:	69 f7       	brne	.-38     	; 0x42bc <ESP_MQTT_connect+0x114>
    42e2:	14 c0       	rjmp	.+40     	; 0x430c <ESP_MQTT_connect+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42e4:	6b a1       	ldd	r22, Y+35	; 0x23
    42e6:	7c a1       	ldd	r23, Y+36	; 0x24
    42e8:	8d a1       	ldd	r24, Y+37	; 0x25
    42ea:	9e a1       	ldd	r25, Y+38	; 0x26
    42ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42f0:	dc 01       	movw	r26, r24
    42f2:	cb 01       	movw	r24, r22
    42f4:	9a a3       	std	Y+34, r25	; 0x22
    42f6:	89 a3       	std	Y+33, r24	; 0x21
    42f8:	89 a1       	ldd	r24, Y+33	; 0x21
    42fa:	9a a1       	ldd	r25, Y+34	; 0x22
    42fc:	9e 8f       	std	Y+30, r25	; 0x1e
    42fe:	8d 8f       	std	Y+29, r24	; 0x1d
    4300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4302:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4304:	01 97       	sbiw	r24, 0x01	; 1
    4306:	f1 f7       	brne	.-4      	; 0x4304 <ESP_MQTT_connect+0x15c>
    4308:	9e 8f       	std	Y+30, r25	; 0x1e
    430a:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		_delay_ms(1);
		time_out++;
    430c:	88 a9       	ldd	r24, Y+48	; 0x30
    430e:	99 a9       	ldd	r25, Y+49	; 0x31
    4310:	01 96       	adiw	r24, 0x01	; 1
    4312:	99 ab       	std	Y+49, r25	; 0x31
    4314:	88 ab       	std	Y+48, r24	; 0x30

	UART_SEND_string("AT+CIPSEND=");
	UART_SEND_number(frame_length);
	UART_SEND_string("\r\n");

	while(!((time_out>2000)||Check_Respond("\r\nOK\r\n> ")))
    4316:	88 a9       	ldd	r24, Y+48	; 0x30
    4318:	99 a9       	ldd	r25, Y+49	; 0x31
    431a:	27 e0       	ldi	r18, 0x07	; 7
    431c:	81 3d       	cpi	r24, 0xD1	; 209
    431e:	92 07       	cpc	r25, r18
    4320:	38 f4       	brcc	.+14     	; 0x4330 <ESP_MQTT_connect+0x188>
    4322:	8b ed       	ldi	r24, 0xDB	; 219
    4324:	92 e0       	ldi	r25, 0x02	; 2
    4326:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    432a:	88 23       	and	r24, r24
    432c:	09 f4       	brne	.+2      	; 0x4330 <ESP_MQTT_connect+0x188>
    432e:	7c cf       	rjmp	.-264    	; 0x4228 <ESP_MQTT_connect+0x80>
	{
		_delay_ms(1);
		time_out++;
	}

	UART_SendChar(0x10);
    4330:	80 e1       	ldi	r24, 0x10	; 16
    4332:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(remeaning_length_byte);  // 68 char will be send
    4336:	8c a5       	ldd	r24, Y+44	; 0x2c
    4338:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(0x00);
    433c:	80 e0       	ldi	r24, 0x00	; 0
    433e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(0x04);
    4342:	84 e0       	ldi	r24, 0x04	; 4
    4344:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SEND_string("MQTT");       //4
    4348:	84 ee       	ldi	r24, 0xE4	; 228
    434a:	92 e0       	ldi	r25, 0x02	; 2
    434c:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SendChar(0x04);
    4350:	84 e0       	ldi	r24, 0x04	; 4
    4352:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(0xC2);     //C2   CA
    4356:	82 ec       	ldi	r24, 0xC2	; 194
    4358:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(0x8C);    // keep alive 10 hours
    435c:	8c e8       	ldi	r24, 0x8C	; 140
    435e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(0xA0);    // keep alive 10 hours
    4362:	80 ea       	ldi	r24, 0xA0	; 160
    4364:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(0x00);
    4368:	80 e0       	ldi	r24, 0x00	; 0
    436a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(client_id_length);
    436e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4370:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SEND_string((char *)Client_ID);   //16 char
    4374:	8c ed       	ldi	r24, 0xDC	; 220
    4376:	91 e0       	ldi	r25, 0x01	; 1
    4378:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SendChar(0x00);
    437c:	80 e0       	ldi	r24, 0x00	; 0
    437e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(user_name_length);
    4382:	8e a5       	ldd	r24, Y+46	; 0x2e
    4384:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SEND_string((char *)User_Name);  // 35 char
    4388:	8d ee       	ldi	r24, 0xED	; 237
    438a:	91 e0       	ldi	r25, 0x01	; 1
    438c:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SendChar(0x00);
    4390:	80 e0       	ldi	r24, 0x00	; 0
    4392:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(password_length);
    4396:	8d a5       	ldd	r24, Y+45	; 0x2d
    4398:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SEND_string((char *)Password);   //1 char
    439c:	81 e1       	ldi	r24, 0x11	; 17
    439e:	92 e0       	ldi	r25, 0x02	; 2
    43a0:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    43a4:	77 c0       	rjmp	.+238    	; 0x4494 <ESP_MQTT_connect+0x2ec>

	while(!((time_out>2000)||Check_Word_in_Respond("+IPD")))
    43a6:	80 e0       	ldi	r24, 0x00	; 0
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	a0 e8       	ldi	r26, 0x80	; 128
    43ac:	bf e3       	ldi	r27, 0x3F	; 63
    43ae:	89 8f       	std	Y+25, r24	; 0x19
    43b0:	9a 8f       	std	Y+26, r25	; 0x1a
    43b2:	ab 8f       	std	Y+27, r26	; 0x1b
    43b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43b6:	69 8d       	ldd	r22, Y+25	; 0x19
    43b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43be:	20 e0       	ldi	r18, 0x00	; 0
    43c0:	30 e0       	ldi	r19, 0x00	; 0
    43c2:	4a ef       	ldi	r20, 0xFA	; 250
    43c4:	54 e4       	ldi	r21, 0x44	; 68
    43c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ca:	dc 01       	movw	r26, r24
    43cc:	cb 01       	movw	r24, r22
    43ce:	8d 8b       	std	Y+21, r24	; 0x15
    43d0:	9e 8b       	std	Y+22, r25	; 0x16
    43d2:	af 8b       	std	Y+23, r26	; 0x17
    43d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    43d6:	6d 89       	ldd	r22, Y+21	; 0x15
    43d8:	7e 89       	ldd	r23, Y+22	; 0x16
    43da:	8f 89       	ldd	r24, Y+23	; 0x17
    43dc:	98 8d       	ldd	r25, Y+24	; 0x18
    43de:	20 e0       	ldi	r18, 0x00	; 0
    43e0:	30 e0       	ldi	r19, 0x00	; 0
    43e2:	40 e8       	ldi	r20, 0x80	; 128
    43e4:	5f e3       	ldi	r21, 0x3F	; 63
    43e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43ea:	88 23       	and	r24, r24
    43ec:	2c f4       	brge	.+10     	; 0x43f8 <ESP_MQTT_connect+0x250>
		__ticks = 1;
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	9c 8b       	std	Y+20, r25	; 0x14
    43f4:	8b 8b       	std	Y+19, r24	; 0x13
    43f6:	3f c0       	rjmp	.+126    	; 0x4476 <ESP_MQTT_connect+0x2ce>
	else if (__tmp > 65535)
    43f8:	6d 89       	ldd	r22, Y+21	; 0x15
    43fa:	7e 89       	ldd	r23, Y+22	; 0x16
    43fc:	8f 89       	ldd	r24, Y+23	; 0x17
    43fe:	98 8d       	ldd	r25, Y+24	; 0x18
    4400:	20 e0       	ldi	r18, 0x00	; 0
    4402:	3f ef       	ldi	r19, 0xFF	; 255
    4404:	4f e7       	ldi	r20, 0x7F	; 127
    4406:	57 e4       	ldi	r21, 0x47	; 71
    4408:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    440c:	18 16       	cp	r1, r24
    440e:	4c f5       	brge	.+82     	; 0x4462 <ESP_MQTT_connect+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4410:	69 8d       	ldd	r22, Y+25	; 0x19
    4412:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4414:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4416:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4418:	20 e0       	ldi	r18, 0x00	; 0
    441a:	30 e0       	ldi	r19, 0x00	; 0
    441c:	40 e2       	ldi	r20, 0x20	; 32
    441e:	51 e4       	ldi	r21, 0x41	; 65
    4420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4424:	dc 01       	movw	r26, r24
    4426:	cb 01       	movw	r24, r22
    4428:	bc 01       	movw	r22, r24
    442a:	cd 01       	movw	r24, r26
    442c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4430:	dc 01       	movw	r26, r24
    4432:	cb 01       	movw	r24, r22
    4434:	9c 8b       	std	Y+20, r25	; 0x14
    4436:	8b 8b       	std	Y+19, r24	; 0x13
    4438:	0f c0       	rjmp	.+30     	; 0x4458 <ESP_MQTT_connect+0x2b0>
    443a:	88 ec       	ldi	r24, 0xC8	; 200
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	9a 8b       	std	Y+18, r25	; 0x12
    4440:	89 8b       	std	Y+17, r24	; 0x11
    4442:	89 89       	ldd	r24, Y+17	; 0x11
    4444:	9a 89       	ldd	r25, Y+18	; 0x12
    4446:	01 97       	sbiw	r24, 0x01	; 1
    4448:	f1 f7       	brne	.-4      	; 0x4446 <ESP_MQTT_connect+0x29e>
    444a:	9a 8b       	std	Y+18, r25	; 0x12
    444c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    444e:	8b 89       	ldd	r24, Y+19	; 0x13
    4450:	9c 89       	ldd	r25, Y+20	; 0x14
    4452:	01 97       	sbiw	r24, 0x01	; 1
    4454:	9c 8b       	std	Y+20, r25	; 0x14
    4456:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4458:	8b 89       	ldd	r24, Y+19	; 0x13
    445a:	9c 89       	ldd	r25, Y+20	; 0x14
    445c:	00 97       	sbiw	r24, 0x00	; 0
    445e:	69 f7       	brne	.-38     	; 0x443a <ESP_MQTT_connect+0x292>
    4460:	14 c0       	rjmp	.+40     	; 0x448a <ESP_MQTT_connect+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4462:	6d 89       	ldd	r22, Y+21	; 0x15
    4464:	7e 89       	ldd	r23, Y+22	; 0x16
    4466:	8f 89       	ldd	r24, Y+23	; 0x17
    4468:	98 8d       	ldd	r25, Y+24	; 0x18
    446a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    446e:	dc 01       	movw	r26, r24
    4470:	cb 01       	movw	r24, r22
    4472:	9c 8b       	std	Y+20, r25	; 0x14
    4474:	8b 8b       	std	Y+19, r24	; 0x13
    4476:	8b 89       	ldd	r24, Y+19	; 0x13
    4478:	9c 89       	ldd	r25, Y+20	; 0x14
    447a:	98 8b       	std	Y+16, r25	; 0x10
    447c:	8f 87       	std	Y+15, r24	; 0x0f
    447e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4480:	98 89       	ldd	r25, Y+16	; 0x10
    4482:	01 97       	sbiw	r24, 0x01	; 1
    4484:	f1 f7       	brne	.-4      	; 0x4482 <ESP_MQTT_connect+0x2da>
    4486:	98 8b       	std	Y+16, r25	; 0x10
    4488:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(1);
		time_out++;
    448a:	88 a9       	ldd	r24, Y+48	; 0x30
    448c:	99 a9       	ldd	r25, Y+49	; 0x31
    448e:	01 96       	adiw	r24, 0x01	; 1
    4490:	99 ab       	std	Y+49, r25	; 0x31
    4492:	88 ab       	std	Y+48, r24	; 0x30
	UART_SEND_string((char *)User_Name);  // 35 char
	UART_SendChar(0x00);
	UART_SendChar(password_length);
	UART_SEND_string((char *)Password);   //1 char

	while(!((time_out>2000)||Check_Word_in_Respond("+IPD")))
    4494:	88 a9       	ldd	r24, Y+48	; 0x30
    4496:	99 a9       	ldd	r25, Y+49	; 0x31
    4498:	27 e0       	ldi	r18, 0x07	; 7
    449a:	81 3d       	cpi	r24, 0xD1	; 209
    449c:	92 07       	cpc	r25, r18
    449e:	38 f4       	brcc	.+14     	; 0x44ae <ESP_MQTT_connect+0x306>
    44a0:	89 ee       	ldi	r24, 0xE9	; 233
    44a2:	92 e0       	ldi	r25, 0x02	; 2
    44a4:	0e 94 65 17 	call	0x2eca	; 0x2eca <Check_Word_in_Respond>
    44a8:	88 23       	and	r24, r24
    44aa:	09 f4       	brne	.+2      	; 0x44ae <ESP_MQTT_connect+0x306>
    44ac:	7c cf       	rjmp	.-264    	; 0x43a6 <ESP_MQTT_connect+0x1fe>
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	a6 e9       	ldi	r26, 0x96	; 150
    44b4:	b3 e4       	ldi	r27, 0x43	; 67
    44b6:	8b 87       	std	Y+11, r24	; 0x0b
    44b8:	9c 87       	std	Y+12, r25	; 0x0c
    44ba:	ad 87       	std	Y+13, r26	; 0x0d
    44bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44be:	6b 85       	ldd	r22, Y+11	; 0x0b
    44c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    44c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    44c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	4a ef       	ldi	r20, 0xFA	; 250
    44cc:	54 e4       	ldi	r21, 0x44	; 68
    44ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d2:	dc 01       	movw	r26, r24
    44d4:	cb 01       	movw	r24, r22
    44d6:	8f 83       	std	Y+7, r24	; 0x07
    44d8:	98 87       	std	Y+8, r25	; 0x08
    44da:	a9 87       	std	Y+9, r26	; 0x09
    44dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44de:	6f 81       	ldd	r22, Y+7	; 0x07
    44e0:	78 85       	ldd	r23, Y+8	; 0x08
    44e2:	89 85       	ldd	r24, Y+9	; 0x09
    44e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	40 e8       	ldi	r20, 0x80	; 128
    44ec:	5f e3       	ldi	r21, 0x3F	; 63
    44ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44f2:	88 23       	and	r24, r24
    44f4:	2c f4       	brge	.+10     	; 0x4500 <ESP_MQTT_connect+0x358>
		__ticks = 1;
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	9e 83       	std	Y+6, r25	; 0x06
    44fc:	8d 83       	std	Y+5, r24	; 0x05
    44fe:	3f c0       	rjmp	.+126    	; 0x457e <ESP_MQTT_connect+0x3d6>
	else if (__tmp > 65535)
    4500:	6f 81       	ldd	r22, Y+7	; 0x07
    4502:	78 85       	ldd	r23, Y+8	; 0x08
    4504:	89 85       	ldd	r24, Y+9	; 0x09
    4506:	9a 85       	ldd	r25, Y+10	; 0x0a
    4508:	20 e0       	ldi	r18, 0x00	; 0
    450a:	3f ef       	ldi	r19, 0xFF	; 255
    450c:	4f e7       	ldi	r20, 0x7F	; 127
    450e:	57 e4       	ldi	r21, 0x47	; 71
    4510:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4514:	18 16       	cp	r1, r24
    4516:	4c f5       	brge	.+82     	; 0x456a <ESP_MQTT_connect+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4518:	6b 85       	ldd	r22, Y+11	; 0x0b
    451a:	7c 85       	ldd	r23, Y+12	; 0x0c
    451c:	8d 85       	ldd	r24, Y+13	; 0x0d
    451e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	40 e2       	ldi	r20, 0x20	; 32
    4526:	51 e4       	ldi	r21, 0x41	; 65
    4528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    452c:	dc 01       	movw	r26, r24
    452e:	cb 01       	movw	r24, r22
    4530:	bc 01       	movw	r22, r24
    4532:	cd 01       	movw	r24, r26
    4534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	9e 83       	std	Y+6, r25	; 0x06
    453e:	8d 83       	std	Y+5, r24	; 0x05
    4540:	0f c0       	rjmp	.+30     	; 0x4560 <ESP_MQTT_connect+0x3b8>
    4542:	88 ec       	ldi	r24, 0xC8	; 200
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	9c 83       	std	Y+4, r25	; 0x04
    4548:	8b 83       	std	Y+3, r24	; 0x03
    454a:	8b 81       	ldd	r24, Y+3	; 0x03
    454c:	9c 81       	ldd	r25, Y+4	; 0x04
    454e:	01 97       	sbiw	r24, 0x01	; 1
    4550:	f1 f7       	brne	.-4      	; 0x454e <ESP_MQTT_connect+0x3a6>
    4552:	9c 83       	std	Y+4, r25	; 0x04
    4554:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4556:	8d 81       	ldd	r24, Y+5	; 0x05
    4558:	9e 81       	ldd	r25, Y+6	; 0x06
    455a:	01 97       	sbiw	r24, 0x01	; 1
    455c:	9e 83       	std	Y+6, r25	; 0x06
    455e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4560:	8d 81       	ldd	r24, Y+5	; 0x05
    4562:	9e 81       	ldd	r25, Y+6	; 0x06
    4564:	00 97       	sbiw	r24, 0x00	; 0
    4566:	69 f7       	brne	.-38     	; 0x4542 <ESP_MQTT_connect+0x39a>
    4568:	14 c0       	rjmp	.+40     	; 0x4592 <ESP_MQTT_connect+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    456a:	6f 81       	ldd	r22, Y+7	; 0x07
    456c:	78 85       	ldd	r23, Y+8	; 0x08
    456e:	89 85       	ldd	r24, Y+9	; 0x09
    4570:	9a 85       	ldd	r25, Y+10	; 0x0a
    4572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4576:	dc 01       	movw	r26, r24
    4578:	cb 01       	movw	r24, r22
    457a:	9e 83       	std	Y+6, r25	; 0x06
    457c:	8d 83       	std	Y+5, r24	; 0x05
    457e:	8d 81       	ldd	r24, Y+5	; 0x05
    4580:	9e 81       	ldd	r25, Y+6	; 0x06
    4582:	9a 83       	std	Y+2, r25	; 0x02
    4584:	89 83       	std	Y+1, r24	; 0x01
    4586:	89 81       	ldd	r24, Y+1	; 0x01
    4588:	9a 81       	ldd	r25, Y+2	; 0x02
    458a:	01 97       	sbiw	r24, 0x01	; 1
    458c:	f1 f7       	brne	.-4      	; 0x458a <ESP_MQTT_connect+0x3e2>
    458e:	9a 83       	std	Y+2, r25	; 0x02
    4590:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		time_out++;
	}
	_delay_ms(300);

	if (time_out>2000)  return FALSE;
    4592:	88 a9       	ldd	r24, Y+48	; 0x30
    4594:	99 a9       	ldd	r25, Y+49	; 0x31
    4596:	27 e0       	ldi	r18, 0x07	; 7
    4598:	81 3d       	cpi	r24, 0xD1	; 209
    459a:	92 07       	cpc	r25, r18
    459c:	10 f0       	brcs	.+4      	; 0x45a2 <ESP_MQTT_connect+0x3fa>
    459e:	18 ae       	std	Y+56, r1	; 0x38
    45a0:	02 c0       	rjmp	.+4      	; 0x45a6 <ESP_MQTT_connect+0x3fe>
	else                 return TRUE;
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	88 af       	std	Y+56, r24	; 0x38
    45a6:	88 ad       	ldd	r24, Y+56	; 0x38

}
    45a8:	e8 96       	adiw	r28, 0x38	; 56
    45aa:	0f b6       	in	r0, 0x3f	; 63
    45ac:	f8 94       	cli
    45ae:	de bf       	out	0x3e, r29	; 62
    45b0:	0f be       	out	0x3f, r0	; 63
    45b2:	cd bf       	out	0x3d, r28	; 61
    45b4:	cf 91       	pop	r28
    45b6:	df 91       	pop	r29
    45b8:	08 95       	ret

000045ba <ESP_MQTT_ping>:

bool ESP_MQTT_ping(void)
{
    45ba:	df 93       	push	r29
    45bc:	cf 93       	push	r28
    45be:	cd b7       	in	r28, 0x3d	; 61
    45c0:	de b7       	in	r29, 0x3e	; 62
    45c2:	ad 97       	sbiw	r28, 0x2d	; 45
    45c4:	0f b6       	in	r0, 0x3f	; 63
    45c6:	f8 94       	cli
    45c8:	de bf       	out	0x3e, r29	; 62
    45ca:	0f be       	out	0x3f, r0	; 63
    45cc:	cd bf       	out	0x3d, r28	; 61
	unsigned int time_out=0;
    45ce:	1c a6       	std	Y+44, r1	; 0x2c
    45d0:	1b a6       	std	Y+43, r1	; 0x2b
	UART_SEND_string("AT+CIPSEND=2\r\n");
    45d2:	8e ee       	ldi	r24, 0xEE	; 238
    45d4:	92 e0       	ldi	r25, 0x02	; 2
    45d6:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    45da:	77 c0       	rjmp	.+238    	; 0x46ca <ESP_MQTT_ping+0x110>
	while(!((time_out>2000)||Check_Respond("\r\nOK\r\n> ")))
    45dc:	80 e0       	ldi	r24, 0x00	; 0
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	a0 e8       	ldi	r26, 0x80	; 128
    45e2:	bf e3       	ldi	r27, 0x3F	; 63
    45e4:	8f a3       	std	Y+39, r24	; 0x27
    45e6:	98 a7       	std	Y+40, r25	; 0x28
    45e8:	a9 a7       	std	Y+41, r26	; 0x29
    45ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45ec:	6f a1       	ldd	r22, Y+39	; 0x27
    45ee:	78 a5       	ldd	r23, Y+40	; 0x28
    45f0:	89 a5       	ldd	r24, Y+41	; 0x29
    45f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    45f4:	20 e0       	ldi	r18, 0x00	; 0
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	4a ef       	ldi	r20, 0xFA	; 250
    45fa:	54 e4       	ldi	r21, 0x44	; 68
    45fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	8b a3       	std	Y+35, r24	; 0x23
    4606:	9c a3       	std	Y+36, r25	; 0x24
    4608:	ad a3       	std	Y+37, r26	; 0x25
    460a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    460c:	6b a1       	ldd	r22, Y+35	; 0x23
    460e:	7c a1       	ldd	r23, Y+36	; 0x24
    4610:	8d a1       	ldd	r24, Y+37	; 0x25
    4612:	9e a1       	ldd	r25, Y+38	; 0x26
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	40 e8       	ldi	r20, 0x80	; 128
    461a:	5f e3       	ldi	r21, 0x3F	; 63
    461c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4620:	88 23       	and	r24, r24
    4622:	2c f4       	brge	.+10     	; 0x462e <ESP_MQTT_ping+0x74>
		__ticks = 1;
    4624:	81 e0       	ldi	r24, 0x01	; 1
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	9a a3       	std	Y+34, r25	; 0x22
    462a:	89 a3       	std	Y+33, r24	; 0x21
    462c:	3f c0       	rjmp	.+126    	; 0x46ac <ESP_MQTT_ping+0xf2>
	else if (__tmp > 65535)
    462e:	6b a1       	ldd	r22, Y+35	; 0x23
    4630:	7c a1       	ldd	r23, Y+36	; 0x24
    4632:	8d a1       	ldd	r24, Y+37	; 0x25
    4634:	9e a1       	ldd	r25, Y+38	; 0x26
    4636:	20 e0       	ldi	r18, 0x00	; 0
    4638:	3f ef       	ldi	r19, 0xFF	; 255
    463a:	4f e7       	ldi	r20, 0x7F	; 127
    463c:	57 e4       	ldi	r21, 0x47	; 71
    463e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4642:	18 16       	cp	r1, r24
    4644:	4c f5       	brge	.+82     	; 0x4698 <ESP_MQTT_ping+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4646:	6f a1       	ldd	r22, Y+39	; 0x27
    4648:	78 a5       	ldd	r23, Y+40	; 0x28
    464a:	89 a5       	ldd	r24, Y+41	; 0x29
    464c:	9a a5       	ldd	r25, Y+42	; 0x2a
    464e:	20 e0       	ldi	r18, 0x00	; 0
    4650:	30 e0       	ldi	r19, 0x00	; 0
    4652:	40 e2       	ldi	r20, 0x20	; 32
    4654:	51 e4       	ldi	r21, 0x41	; 65
    4656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    465a:	dc 01       	movw	r26, r24
    465c:	cb 01       	movw	r24, r22
    465e:	bc 01       	movw	r22, r24
    4660:	cd 01       	movw	r24, r26
    4662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4666:	dc 01       	movw	r26, r24
    4668:	cb 01       	movw	r24, r22
    466a:	9a a3       	std	Y+34, r25	; 0x22
    466c:	89 a3       	std	Y+33, r24	; 0x21
    466e:	0f c0       	rjmp	.+30     	; 0x468e <ESP_MQTT_ping+0xd4>
    4670:	88 ec       	ldi	r24, 0xC8	; 200
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	98 a3       	std	Y+32, r25	; 0x20
    4676:	8f 8f       	std	Y+31, r24	; 0x1f
    4678:	8f 8d       	ldd	r24, Y+31	; 0x1f
    467a:	98 a1       	ldd	r25, Y+32	; 0x20
    467c:	01 97       	sbiw	r24, 0x01	; 1
    467e:	f1 f7       	brne	.-4      	; 0x467c <ESP_MQTT_ping+0xc2>
    4680:	98 a3       	std	Y+32, r25	; 0x20
    4682:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4684:	89 a1       	ldd	r24, Y+33	; 0x21
    4686:	9a a1       	ldd	r25, Y+34	; 0x22
    4688:	01 97       	sbiw	r24, 0x01	; 1
    468a:	9a a3       	std	Y+34, r25	; 0x22
    468c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    468e:	89 a1       	ldd	r24, Y+33	; 0x21
    4690:	9a a1       	ldd	r25, Y+34	; 0x22
    4692:	00 97       	sbiw	r24, 0x00	; 0
    4694:	69 f7       	brne	.-38     	; 0x4670 <ESP_MQTT_ping+0xb6>
    4696:	14 c0       	rjmp	.+40     	; 0x46c0 <ESP_MQTT_ping+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4698:	6b a1       	ldd	r22, Y+35	; 0x23
    469a:	7c a1       	ldd	r23, Y+36	; 0x24
    469c:	8d a1       	ldd	r24, Y+37	; 0x25
    469e:	9e a1       	ldd	r25, Y+38	; 0x26
    46a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46a4:	dc 01       	movw	r26, r24
    46a6:	cb 01       	movw	r24, r22
    46a8:	9a a3       	std	Y+34, r25	; 0x22
    46aa:	89 a3       	std	Y+33, r24	; 0x21
    46ac:	89 a1       	ldd	r24, Y+33	; 0x21
    46ae:	9a a1       	ldd	r25, Y+34	; 0x22
    46b0:	9e 8f       	std	Y+30, r25	; 0x1e
    46b2:	8d 8f       	std	Y+29, r24	; 0x1d
    46b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46b8:	01 97       	sbiw	r24, 0x01	; 1
    46ba:	f1 f7       	brne	.-4      	; 0x46b8 <ESP_MQTT_ping+0xfe>
    46bc:	9e 8f       	std	Y+30, r25	; 0x1e
    46be:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		_delay_ms(1);
		time_out++;
    46c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    46c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    46c4:	01 96       	adiw	r24, 0x01	; 1
    46c6:	9c a7       	std	Y+44, r25	; 0x2c
    46c8:	8b a7       	std	Y+43, r24	; 0x2b

bool ESP_MQTT_ping(void)
{
	unsigned int time_out=0;
	UART_SEND_string("AT+CIPSEND=2\r\n");
	while(!((time_out>2000)||Check_Respond("\r\nOK\r\n> ")))
    46ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    46cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    46ce:	27 e0       	ldi	r18, 0x07	; 7
    46d0:	81 3d       	cpi	r24, 0xD1	; 209
    46d2:	92 07       	cpc	r25, r18
    46d4:	38 f4       	brcc	.+14     	; 0x46e4 <ESP_MQTT_ping+0x12a>
    46d6:	8b ed       	ldi	r24, 0xDB	; 219
    46d8:	92 e0       	ldi	r25, 0x02	; 2
    46da:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    46de:	88 23       	and	r24, r24
    46e0:	09 f4       	brne	.+2      	; 0x46e4 <ESP_MQTT_ping+0x12a>
    46e2:	7c cf       	rjmp	.-264    	; 0x45dc <ESP_MQTT_ping+0x22>
	{
		_delay_ms(1);
		time_out++;
	}

	UART_SendChar(0xC0);
    46e4:	80 ec       	ldi	r24, 0xC0	; 192
    46e6:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(0x00);
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
    46f0:	77 c0       	rjmp	.+238    	; 0x47e0 <ESP_MQTT_ping+0x226>

	while(!((time_out>2000)||Check_Word_in_Respond("+IPD")))
    46f2:	80 e0       	ldi	r24, 0x00	; 0
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	a0 e8       	ldi	r26, 0x80	; 128
    46f8:	bf e3       	ldi	r27, 0x3F	; 63
    46fa:	89 8f       	std	Y+25, r24	; 0x19
    46fc:	9a 8f       	std	Y+26, r25	; 0x1a
    46fe:	ab 8f       	std	Y+27, r26	; 0x1b
    4700:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4702:	69 8d       	ldd	r22, Y+25	; 0x19
    4704:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4706:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4708:	9c 8d       	ldd	r25, Y+28	; 0x1c
    470a:	20 e0       	ldi	r18, 0x00	; 0
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	4a ef       	ldi	r20, 0xFA	; 250
    4710:	54 e4       	ldi	r21, 0x44	; 68
    4712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4716:	dc 01       	movw	r26, r24
    4718:	cb 01       	movw	r24, r22
    471a:	8d 8b       	std	Y+21, r24	; 0x15
    471c:	9e 8b       	std	Y+22, r25	; 0x16
    471e:	af 8b       	std	Y+23, r26	; 0x17
    4720:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4722:	6d 89       	ldd	r22, Y+21	; 0x15
    4724:	7e 89       	ldd	r23, Y+22	; 0x16
    4726:	8f 89       	ldd	r24, Y+23	; 0x17
    4728:	98 8d       	ldd	r25, Y+24	; 0x18
    472a:	20 e0       	ldi	r18, 0x00	; 0
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	40 e8       	ldi	r20, 0x80	; 128
    4730:	5f e3       	ldi	r21, 0x3F	; 63
    4732:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4736:	88 23       	and	r24, r24
    4738:	2c f4       	brge	.+10     	; 0x4744 <ESP_MQTT_ping+0x18a>
		__ticks = 1;
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	9c 8b       	std	Y+20, r25	; 0x14
    4740:	8b 8b       	std	Y+19, r24	; 0x13
    4742:	3f c0       	rjmp	.+126    	; 0x47c2 <ESP_MQTT_ping+0x208>
	else if (__tmp > 65535)
    4744:	6d 89       	ldd	r22, Y+21	; 0x15
    4746:	7e 89       	ldd	r23, Y+22	; 0x16
    4748:	8f 89       	ldd	r24, Y+23	; 0x17
    474a:	98 8d       	ldd	r25, Y+24	; 0x18
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	3f ef       	ldi	r19, 0xFF	; 255
    4750:	4f e7       	ldi	r20, 0x7F	; 127
    4752:	57 e4       	ldi	r21, 0x47	; 71
    4754:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4758:	18 16       	cp	r1, r24
    475a:	4c f5       	brge	.+82     	; 0x47ae <ESP_MQTT_ping+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    475c:	69 8d       	ldd	r22, Y+25	; 0x19
    475e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4760:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4762:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4764:	20 e0       	ldi	r18, 0x00	; 0
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	40 e2       	ldi	r20, 0x20	; 32
    476a:	51 e4       	ldi	r21, 0x41	; 65
    476c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4770:	dc 01       	movw	r26, r24
    4772:	cb 01       	movw	r24, r22
    4774:	bc 01       	movw	r22, r24
    4776:	cd 01       	movw	r24, r26
    4778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    477c:	dc 01       	movw	r26, r24
    477e:	cb 01       	movw	r24, r22
    4780:	9c 8b       	std	Y+20, r25	; 0x14
    4782:	8b 8b       	std	Y+19, r24	; 0x13
    4784:	0f c0       	rjmp	.+30     	; 0x47a4 <ESP_MQTT_ping+0x1ea>
    4786:	88 ec       	ldi	r24, 0xC8	; 200
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	9a 8b       	std	Y+18, r25	; 0x12
    478c:	89 8b       	std	Y+17, r24	; 0x11
    478e:	89 89       	ldd	r24, Y+17	; 0x11
    4790:	9a 89       	ldd	r25, Y+18	; 0x12
    4792:	01 97       	sbiw	r24, 0x01	; 1
    4794:	f1 f7       	brne	.-4      	; 0x4792 <ESP_MQTT_ping+0x1d8>
    4796:	9a 8b       	std	Y+18, r25	; 0x12
    4798:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    479a:	8b 89       	ldd	r24, Y+19	; 0x13
    479c:	9c 89       	ldd	r25, Y+20	; 0x14
    479e:	01 97       	sbiw	r24, 0x01	; 1
    47a0:	9c 8b       	std	Y+20, r25	; 0x14
    47a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47a4:	8b 89       	ldd	r24, Y+19	; 0x13
    47a6:	9c 89       	ldd	r25, Y+20	; 0x14
    47a8:	00 97       	sbiw	r24, 0x00	; 0
    47aa:	69 f7       	brne	.-38     	; 0x4786 <ESP_MQTT_ping+0x1cc>
    47ac:	14 c0       	rjmp	.+40     	; 0x47d6 <ESP_MQTT_ping+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ae:	6d 89       	ldd	r22, Y+21	; 0x15
    47b0:	7e 89       	ldd	r23, Y+22	; 0x16
    47b2:	8f 89       	ldd	r24, Y+23	; 0x17
    47b4:	98 8d       	ldd	r25, Y+24	; 0x18
    47b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ba:	dc 01       	movw	r26, r24
    47bc:	cb 01       	movw	r24, r22
    47be:	9c 8b       	std	Y+20, r25	; 0x14
    47c0:	8b 8b       	std	Y+19, r24	; 0x13
    47c2:	8b 89       	ldd	r24, Y+19	; 0x13
    47c4:	9c 89       	ldd	r25, Y+20	; 0x14
    47c6:	98 8b       	std	Y+16, r25	; 0x10
    47c8:	8f 87       	std	Y+15, r24	; 0x0f
    47ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    47cc:	98 89       	ldd	r25, Y+16	; 0x10
    47ce:	01 97       	sbiw	r24, 0x01	; 1
    47d0:	f1 f7       	brne	.-4      	; 0x47ce <ESP_MQTT_ping+0x214>
    47d2:	98 8b       	std	Y+16, r25	; 0x10
    47d4:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(1);
		time_out++;
    47d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    47d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    47da:	01 96       	adiw	r24, 0x01	; 1
    47dc:	9c a7       	std	Y+44, r25	; 0x2c
    47de:	8b a7       	std	Y+43, r24	; 0x2b
	}

	UART_SendChar(0xC0);
	UART_SendChar(0x00);

	while(!((time_out>2000)||Check_Word_in_Respond("+IPD")))
    47e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    47e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    47e4:	27 e0       	ldi	r18, 0x07	; 7
    47e6:	81 3d       	cpi	r24, 0xD1	; 209
    47e8:	92 07       	cpc	r25, r18
    47ea:	38 f4       	brcc	.+14     	; 0x47fa <ESP_MQTT_ping+0x240>
    47ec:	89 ee       	ldi	r24, 0xE9	; 233
    47ee:	92 e0       	ldi	r25, 0x02	; 2
    47f0:	0e 94 65 17 	call	0x2eca	; 0x2eca <Check_Word_in_Respond>
    47f4:	88 23       	and	r24, r24
    47f6:	09 f4       	brne	.+2      	; 0x47fa <ESP_MQTT_ping+0x240>
    47f8:	7c cf       	rjmp	.-264    	; 0x46f2 <ESP_MQTT_ping+0x138>
    47fa:	80 e0       	ldi	r24, 0x00	; 0
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	a6 e9       	ldi	r26, 0x96	; 150
    4800:	b3 e4       	ldi	r27, 0x43	; 67
    4802:	8b 87       	std	Y+11, r24	; 0x0b
    4804:	9c 87       	std	Y+12, r25	; 0x0c
    4806:	ad 87       	std	Y+13, r26	; 0x0d
    4808:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    480a:	6b 85       	ldd	r22, Y+11	; 0x0b
    480c:	7c 85       	ldd	r23, Y+12	; 0x0c
    480e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4810:	9e 85       	ldd	r25, Y+14	; 0x0e
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	4a ef       	ldi	r20, 0xFA	; 250
    4818:	54 e4       	ldi	r21, 0x44	; 68
    481a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    481e:	dc 01       	movw	r26, r24
    4820:	cb 01       	movw	r24, r22
    4822:	8f 83       	std	Y+7, r24	; 0x07
    4824:	98 87       	std	Y+8, r25	; 0x08
    4826:	a9 87       	std	Y+9, r26	; 0x09
    4828:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    482a:	6f 81       	ldd	r22, Y+7	; 0x07
    482c:	78 85       	ldd	r23, Y+8	; 0x08
    482e:	89 85       	ldd	r24, Y+9	; 0x09
    4830:	9a 85       	ldd	r25, Y+10	; 0x0a
    4832:	20 e0       	ldi	r18, 0x00	; 0
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	40 e8       	ldi	r20, 0x80	; 128
    4838:	5f e3       	ldi	r21, 0x3F	; 63
    483a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    483e:	88 23       	and	r24, r24
    4840:	2c f4       	brge	.+10     	; 0x484c <ESP_MQTT_ping+0x292>
		__ticks = 1;
    4842:	81 e0       	ldi	r24, 0x01	; 1
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	9e 83       	std	Y+6, r25	; 0x06
    4848:	8d 83       	std	Y+5, r24	; 0x05
    484a:	3f c0       	rjmp	.+126    	; 0x48ca <ESP_MQTT_ping+0x310>
	else if (__tmp > 65535)
    484c:	6f 81       	ldd	r22, Y+7	; 0x07
    484e:	78 85       	ldd	r23, Y+8	; 0x08
    4850:	89 85       	ldd	r24, Y+9	; 0x09
    4852:	9a 85       	ldd	r25, Y+10	; 0x0a
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	3f ef       	ldi	r19, 0xFF	; 255
    4858:	4f e7       	ldi	r20, 0x7F	; 127
    485a:	57 e4       	ldi	r21, 0x47	; 71
    485c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4860:	18 16       	cp	r1, r24
    4862:	4c f5       	brge	.+82     	; 0x48b6 <ESP_MQTT_ping+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4864:	6b 85       	ldd	r22, Y+11	; 0x0b
    4866:	7c 85       	ldd	r23, Y+12	; 0x0c
    4868:	8d 85       	ldd	r24, Y+13	; 0x0d
    486a:	9e 85       	ldd	r25, Y+14	; 0x0e
    486c:	20 e0       	ldi	r18, 0x00	; 0
    486e:	30 e0       	ldi	r19, 0x00	; 0
    4870:	40 e2       	ldi	r20, 0x20	; 32
    4872:	51 e4       	ldi	r21, 0x41	; 65
    4874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4878:	dc 01       	movw	r26, r24
    487a:	cb 01       	movw	r24, r22
    487c:	bc 01       	movw	r22, r24
    487e:	cd 01       	movw	r24, r26
    4880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4884:	dc 01       	movw	r26, r24
    4886:	cb 01       	movw	r24, r22
    4888:	9e 83       	std	Y+6, r25	; 0x06
    488a:	8d 83       	std	Y+5, r24	; 0x05
    488c:	0f c0       	rjmp	.+30     	; 0x48ac <ESP_MQTT_ping+0x2f2>
    488e:	88 ec       	ldi	r24, 0xC8	; 200
    4890:	90 e0       	ldi	r25, 0x00	; 0
    4892:	9c 83       	std	Y+4, r25	; 0x04
    4894:	8b 83       	std	Y+3, r24	; 0x03
    4896:	8b 81       	ldd	r24, Y+3	; 0x03
    4898:	9c 81       	ldd	r25, Y+4	; 0x04
    489a:	01 97       	sbiw	r24, 0x01	; 1
    489c:	f1 f7       	brne	.-4      	; 0x489a <ESP_MQTT_ping+0x2e0>
    489e:	9c 83       	std	Y+4, r25	; 0x04
    48a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48a2:	8d 81       	ldd	r24, Y+5	; 0x05
    48a4:	9e 81       	ldd	r25, Y+6	; 0x06
    48a6:	01 97       	sbiw	r24, 0x01	; 1
    48a8:	9e 83       	std	Y+6, r25	; 0x06
    48aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ac:	8d 81       	ldd	r24, Y+5	; 0x05
    48ae:	9e 81       	ldd	r25, Y+6	; 0x06
    48b0:	00 97       	sbiw	r24, 0x00	; 0
    48b2:	69 f7       	brne	.-38     	; 0x488e <ESP_MQTT_ping+0x2d4>
    48b4:	14 c0       	rjmp	.+40     	; 0x48de <ESP_MQTT_ping+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48b6:	6f 81       	ldd	r22, Y+7	; 0x07
    48b8:	78 85       	ldd	r23, Y+8	; 0x08
    48ba:	89 85       	ldd	r24, Y+9	; 0x09
    48bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    48be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c2:	dc 01       	movw	r26, r24
    48c4:	cb 01       	movw	r24, r22
    48c6:	9e 83       	std	Y+6, r25	; 0x06
    48c8:	8d 83       	std	Y+5, r24	; 0x05
    48ca:	8d 81       	ldd	r24, Y+5	; 0x05
    48cc:	9e 81       	ldd	r25, Y+6	; 0x06
    48ce:	9a 83       	std	Y+2, r25	; 0x02
    48d0:	89 83       	std	Y+1, r24	; 0x01
    48d2:	89 81       	ldd	r24, Y+1	; 0x01
    48d4:	9a 81       	ldd	r25, Y+2	; 0x02
    48d6:	01 97       	sbiw	r24, 0x01	; 1
    48d8:	f1 f7       	brne	.-4      	; 0x48d6 <ESP_MQTT_ping+0x31c>
    48da:	9a 83       	std	Y+2, r25	; 0x02
    48dc:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(1);
		time_out++;
	}
	_delay_ms(300);
	Clear_REC_Buffer();
    48de:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>

	if (time_out>2000)  return FALSE;
    48e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    48e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    48e6:	27 e0       	ldi	r18, 0x07	; 7
    48e8:	81 3d       	cpi	r24, 0xD1	; 209
    48ea:	92 07       	cpc	r25, r18
    48ec:	10 f0       	brcs	.+4      	; 0x48f2 <ESP_MQTT_ping+0x338>
    48ee:	1d a6       	std	Y+45, r1	; 0x2d
    48f0:	02 c0       	rjmp	.+4      	; 0x48f6 <ESP_MQTT_ping+0x33c>
	else                 return TRUE;
    48f2:	81 e0       	ldi	r24, 0x01	; 1
    48f4:	8d a7       	std	Y+45, r24	; 0x2d
    48f6:	8d a5       	ldd	r24, Y+45	; 0x2d

}
    48f8:	ad 96       	adiw	r28, 0x2d	; 45
    48fa:	0f b6       	in	r0, 0x3f	; 63
    48fc:	f8 94       	cli
    48fe:	de bf       	out	0x3e, r29	; 62
    4900:	0f be       	out	0x3f, r0	; 63
    4902:	cd bf       	out	0x3d, r28	; 61
    4904:	cf 91       	pop	r28
    4906:	df 91       	pop	r29
    4908:	08 95       	ret

0000490a <ESP_MQTT_publish>:


bool ESP_MQTT_publish(const char* _topic,const char* _sub_topic,unsigned int _data)
{
    490a:	df 93       	push	r29
    490c:	cf 93       	push	r28
    490e:	cd b7       	in	r28, 0x3d	; 61
    4910:	de b7       	in	r29, 0x3e	; 62
    4912:	c2 54       	subi	r28, 0x42	; 66
    4914:	d0 40       	sbci	r29, 0x00	; 0
    4916:	0f b6       	in	r0, 0x3f	; 63
    4918:	f8 94       	cli
    491a:	de bf       	out	0x3e, r29	; 62
    491c:	0f be       	out	0x3f, r0	; 63
    491e:	cd bf       	out	0x3d, r28	; 61
    4920:	9d af       	std	Y+61, r25	; 0x3d
    4922:	8c af       	std	Y+60, r24	; 0x3c
    4924:	7f af       	std	Y+63, r23	; 0x3f
    4926:	6e af       	std	Y+62, r22	; 0x3e
    4928:	fe 01       	movw	r30, r28
    492a:	e0 5c       	subi	r30, 0xC0	; 192
    492c:	ff 4f       	sbci	r31, 0xFF	; 255
    492e:	51 83       	std	Z+1, r21	; 0x01
    4930:	40 83       	st	Z, r20
	unsigned char topic_length_byte=0,remeaning_length_byte=0,data_length=0,frame_length=0;
    4932:	19 aa       	std	Y+49, r1	; 0x31
    4934:	18 aa       	std	Y+48, r1	; 0x30
    4936:	1f a6       	std	Y+47, r1	; 0x2f
    4938:	1e a6       	std	Y+46, r1	; 0x2e
	unsigned char sub_topic_length=0;
    493a:	1d a6       	std	Y+45, r1	; 0x2d
	char buffer[10];
	unsigned int time_out=0;
    493c:	1c a6       	std	Y+44, r1	; 0x2c
    493e:	1b a6       	std	Y+43, r1	; 0x2b

	itoa(_data,buffer,10);
    4940:	fe 01       	movw	r30, r28
    4942:	e0 5c       	subi	r30, 0xC0	; 192
    4944:	ff 4f       	sbci	r31, 0xFF	; 255
    4946:	80 81       	ld	r24, Z
    4948:	91 81       	ldd	r25, Z+1	; 0x01
    494a:	9e 01       	movw	r18, r28
    494c:	2e 5c       	subi	r18, 0xCE	; 206
    494e:	3f 4f       	sbci	r19, 0xFF	; 255
    4950:	b9 01       	movw	r22, r18
    4952:	4a e0       	ldi	r20, 0x0A	; 10
    4954:	50 e0       	ldi	r21, 0x00	; 0
    4956:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <itoa>

	topic_length_byte=strlen(_topic);
    495a:	8c ad       	ldd	r24, Y+60	; 0x3c
    495c:	9d ad       	ldd	r25, Y+61	; 0x3d
    495e:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <strlen>
    4962:	89 ab       	std	Y+49, r24	; 0x31
	data_length      =strlen(buffer);
    4964:	ce 01       	movw	r24, r28
    4966:	c2 96       	adiw	r24, 0x32	; 50
    4968:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <strlen>
    496c:	8f a7       	std	Y+47, r24	; 0x2f
	sub_topic_length =strlen(_sub_topic);
    496e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4970:	9f ad       	ldd	r25, Y+63	; 0x3f
    4972:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <strlen>
    4976:	8d a7       	std	Y+45, r24	; 0x2d
	remeaning_length_byte=topic_length_byte+data_length+3+sub_topic_length;
    4978:	99 a9       	ldd	r25, Y+49	; 0x31
    497a:	8f a5       	ldd	r24, Y+47	; 0x2f
    497c:	98 0f       	add	r25, r24
    497e:	8d a5       	ldd	r24, Y+45	; 0x2d
    4980:	89 0f       	add	r24, r25
    4982:	8d 5f       	subi	r24, 0xFD	; 253
    4984:	88 ab       	std	Y+48, r24	; 0x30
	frame_length=remeaning_length_byte+2;
    4986:	88 a9       	ldd	r24, Y+48	; 0x30
    4988:	8e 5f       	subi	r24, 0xFE	; 254
    498a:	8e a7       	std	Y+46, r24	; 0x2e

	Clear_REC_Buffer();
    498c:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
	UART_SEND_string("AT+CIPSEND=");
    4990:	8f ec       	ldi	r24, 0xCF	; 207
    4992:	92 e0       	ldi	r25, 0x02	; 2
    4994:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SEND_number(frame_length);
    4998:	8e a5       	ldd	r24, Y+46	; 0x2e
    499a:	88 2f       	mov	r24, r24
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	0e 94 f7 07 	call	0xfee	; 0xfee <UART_SEND_number>
	UART_SEND_string("\r\n");
    49a2:	8c eb       	ldi	r24, 0xBC	; 188
    49a4:	92 e0       	ldi	r25, 0x02	; 2
    49a6:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    49aa:	77 c0       	rjmp	.+238    	; 0x4a9a <ESP_MQTT_publish+0x190>
	while(!((time_out>2000)||Check_Respond("\r\nOK\r\n> ")))
    49ac:	80 e0       	ldi	r24, 0x00	; 0
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	a0 e8       	ldi	r26, 0x80	; 128
    49b2:	bf e3       	ldi	r27, 0x3F	; 63
    49b4:	8f a3       	std	Y+39, r24	; 0x27
    49b6:	98 a7       	std	Y+40, r25	; 0x28
    49b8:	a9 a7       	std	Y+41, r26	; 0x29
    49ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49bc:	6f a1       	ldd	r22, Y+39	; 0x27
    49be:	78 a5       	ldd	r23, Y+40	; 0x28
    49c0:	89 a5       	ldd	r24, Y+41	; 0x29
    49c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    49c4:	20 e0       	ldi	r18, 0x00	; 0
    49c6:	30 e0       	ldi	r19, 0x00	; 0
    49c8:	4a ef       	ldi	r20, 0xFA	; 250
    49ca:	54 e4       	ldi	r21, 0x44	; 68
    49cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49d0:	dc 01       	movw	r26, r24
    49d2:	cb 01       	movw	r24, r22
    49d4:	8b a3       	std	Y+35, r24	; 0x23
    49d6:	9c a3       	std	Y+36, r25	; 0x24
    49d8:	ad a3       	std	Y+37, r26	; 0x25
    49da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    49dc:	6b a1       	ldd	r22, Y+35	; 0x23
    49de:	7c a1       	ldd	r23, Y+36	; 0x24
    49e0:	8d a1       	ldd	r24, Y+37	; 0x25
    49e2:	9e a1       	ldd	r25, Y+38	; 0x26
    49e4:	20 e0       	ldi	r18, 0x00	; 0
    49e6:	30 e0       	ldi	r19, 0x00	; 0
    49e8:	40 e8       	ldi	r20, 0x80	; 128
    49ea:	5f e3       	ldi	r21, 0x3F	; 63
    49ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49f0:	88 23       	and	r24, r24
    49f2:	2c f4       	brge	.+10     	; 0x49fe <ESP_MQTT_publish+0xf4>
		__ticks = 1;
    49f4:	81 e0       	ldi	r24, 0x01	; 1
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	9a a3       	std	Y+34, r25	; 0x22
    49fa:	89 a3       	std	Y+33, r24	; 0x21
    49fc:	3f c0       	rjmp	.+126    	; 0x4a7c <ESP_MQTT_publish+0x172>
	else if (__tmp > 65535)
    49fe:	6b a1       	ldd	r22, Y+35	; 0x23
    4a00:	7c a1       	ldd	r23, Y+36	; 0x24
    4a02:	8d a1       	ldd	r24, Y+37	; 0x25
    4a04:	9e a1       	ldd	r25, Y+38	; 0x26
    4a06:	20 e0       	ldi	r18, 0x00	; 0
    4a08:	3f ef       	ldi	r19, 0xFF	; 255
    4a0a:	4f e7       	ldi	r20, 0x7F	; 127
    4a0c:	57 e4       	ldi	r21, 0x47	; 71
    4a0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a12:	18 16       	cp	r1, r24
    4a14:	4c f5       	brge	.+82     	; 0x4a68 <ESP_MQTT_publish+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a16:	6f a1       	ldd	r22, Y+39	; 0x27
    4a18:	78 a5       	ldd	r23, Y+40	; 0x28
    4a1a:	89 a5       	ldd	r24, Y+41	; 0x29
    4a1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a1e:	20 e0       	ldi	r18, 0x00	; 0
    4a20:	30 e0       	ldi	r19, 0x00	; 0
    4a22:	40 e2       	ldi	r20, 0x20	; 32
    4a24:	51 e4       	ldi	r21, 0x41	; 65
    4a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a2a:	dc 01       	movw	r26, r24
    4a2c:	cb 01       	movw	r24, r22
    4a2e:	bc 01       	movw	r22, r24
    4a30:	cd 01       	movw	r24, r26
    4a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a36:	dc 01       	movw	r26, r24
    4a38:	cb 01       	movw	r24, r22
    4a3a:	9a a3       	std	Y+34, r25	; 0x22
    4a3c:	89 a3       	std	Y+33, r24	; 0x21
    4a3e:	0f c0       	rjmp	.+30     	; 0x4a5e <ESP_MQTT_publish+0x154>
    4a40:	88 ec       	ldi	r24, 0xC8	; 200
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	98 a3       	std	Y+32, r25	; 0x20
    4a46:	8f 8f       	std	Y+31, r24	; 0x1f
    4a48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a4a:	98 a1       	ldd	r25, Y+32	; 0x20
    4a4c:	01 97       	sbiw	r24, 0x01	; 1
    4a4e:	f1 f7       	brne	.-4      	; 0x4a4c <ESP_MQTT_publish+0x142>
    4a50:	98 a3       	std	Y+32, r25	; 0x20
    4a52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a54:	89 a1       	ldd	r24, Y+33	; 0x21
    4a56:	9a a1       	ldd	r25, Y+34	; 0x22
    4a58:	01 97       	sbiw	r24, 0x01	; 1
    4a5a:	9a a3       	std	Y+34, r25	; 0x22
    4a5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a5e:	89 a1       	ldd	r24, Y+33	; 0x21
    4a60:	9a a1       	ldd	r25, Y+34	; 0x22
    4a62:	00 97       	sbiw	r24, 0x00	; 0
    4a64:	69 f7       	brne	.-38     	; 0x4a40 <ESP_MQTT_publish+0x136>
    4a66:	14 c0       	rjmp	.+40     	; 0x4a90 <ESP_MQTT_publish+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a68:	6b a1       	ldd	r22, Y+35	; 0x23
    4a6a:	7c a1       	ldd	r23, Y+36	; 0x24
    4a6c:	8d a1       	ldd	r24, Y+37	; 0x25
    4a6e:	9e a1       	ldd	r25, Y+38	; 0x26
    4a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a74:	dc 01       	movw	r26, r24
    4a76:	cb 01       	movw	r24, r22
    4a78:	9a a3       	std	Y+34, r25	; 0x22
    4a7a:	89 a3       	std	Y+33, r24	; 0x21
    4a7c:	89 a1       	ldd	r24, Y+33	; 0x21
    4a7e:	9a a1       	ldd	r25, Y+34	; 0x22
    4a80:	9e 8f       	std	Y+30, r25	; 0x1e
    4a82:	8d 8f       	std	Y+29, r24	; 0x1d
    4a84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4a88:	01 97       	sbiw	r24, 0x01	; 1
    4a8a:	f1 f7       	brne	.-4      	; 0x4a88 <ESP_MQTT_publish+0x17e>
    4a8c:	9e 8f       	std	Y+30, r25	; 0x1e
    4a8e:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		_delay_ms(1);
		time_out++;
    4a90:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a92:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a94:	01 96       	adiw	r24, 0x01	; 1
    4a96:	9c a7       	std	Y+44, r25	; 0x2c
    4a98:	8b a7       	std	Y+43, r24	; 0x2b

	Clear_REC_Buffer();
	UART_SEND_string("AT+CIPSEND=");
	UART_SEND_number(frame_length);
	UART_SEND_string("\r\n");
	while(!((time_out>2000)||Check_Respond("\r\nOK\r\n> ")))
    4a9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a9e:	27 e0       	ldi	r18, 0x07	; 7
    4aa0:	81 3d       	cpi	r24, 0xD1	; 209
    4aa2:	92 07       	cpc	r25, r18
    4aa4:	38 f4       	brcc	.+14     	; 0x4ab4 <ESP_MQTT_publish+0x1aa>
    4aa6:	8b ed       	ldi	r24, 0xDB	; 219
    4aa8:	92 e0       	ldi	r25, 0x02	; 2
    4aaa:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    4aae:	88 23       	and	r24, r24
    4ab0:	09 f4       	brne	.+2      	; 0x4ab4 <ESP_MQTT_publish+0x1aa>
    4ab2:	7c cf       	rjmp	.-264    	; 0x49ac <ESP_MQTT_publish+0xa2>
		_delay_ms(1);
		time_out++;
	}


	UART_SendChar(0x30);    //0x30   32
    4ab4:	80 e3       	ldi	r24, 0x30	; 48
    4ab6:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(remeaning_length_byte);     //remaining data length  48
    4aba:	88 a9       	ldd	r24, Y+48	; 0x30
    4abc:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(0x00);
    4ac0:	80 e0       	ldi	r24, 0x00	; 0
    4ac2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(topic_length_byte);     //topic length
    4ac6:	89 a9       	ldd	r24, Y+49	; 0x31
    4ac8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>

	UART_SEND_string((char*)_topic);   //18 char
    4acc:	8c ad       	ldd	r24, Y+60	; 0x3c
    4ace:	9d ad       	ldd	r25, Y+61	; 0x3d
    4ad0:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SEND_string((char*)_sub_topic);
    4ad4:	8e ad       	ldd	r24, Y+62	; 0x3e
    4ad6:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ad8:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SEND_number(_data);    //28 char
    4adc:	fe 01       	movw	r30, r28
    4ade:	e0 5c       	subi	r30, 0xC0	; 192
    4ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae2:	80 81       	ld	r24, Z
    4ae4:	91 81       	ldd	r25, Z+1	; 0x01
    4ae6:	0e 94 f7 07 	call	0xfee	; 0xfee <UART_SEND_number>
	UART_SEND_string("}");    //28 char
    4aea:	8d ef       	ldi	r24, 0xFD	; 253
    4aec:	92 e0       	ldi	r25, 0x02	; 2
    4aee:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    4af2:	77 c0       	rjmp	.+238    	; 0x4be2 <ESP_MQTT_publish+0x2d8>

	while(!((time_out>2000)||Check_Word_in_Respond("SEND OK\r\n")))
    4af4:	80 e0       	ldi	r24, 0x00	; 0
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	a0 e8       	ldi	r26, 0x80	; 128
    4afa:	bf e3       	ldi	r27, 0x3F	; 63
    4afc:	89 8f       	std	Y+25, r24	; 0x19
    4afe:	9a 8f       	std	Y+26, r25	; 0x1a
    4b00:	ab 8f       	std	Y+27, r26	; 0x1b
    4b02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b04:	69 8d       	ldd	r22, Y+25	; 0x19
    4b06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b0c:	20 e0       	ldi	r18, 0x00	; 0
    4b0e:	30 e0       	ldi	r19, 0x00	; 0
    4b10:	4a ef       	ldi	r20, 0xFA	; 250
    4b12:	54 e4       	ldi	r21, 0x44	; 68
    4b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b18:	dc 01       	movw	r26, r24
    4b1a:	cb 01       	movw	r24, r22
    4b1c:	8d 8b       	std	Y+21, r24	; 0x15
    4b1e:	9e 8b       	std	Y+22, r25	; 0x16
    4b20:	af 8b       	std	Y+23, r26	; 0x17
    4b22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b24:	6d 89       	ldd	r22, Y+21	; 0x15
    4b26:	7e 89       	ldd	r23, Y+22	; 0x16
    4b28:	8f 89       	ldd	r24, Y+23	; 0x17
    4b2a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b2c:	20 e0       	ldi	r18, 0x00	; 0
    4b2e:	30 e0       	ldi	r19, 0x00	; 0
    4b30:	40 e8       	ldi	r20, 0x80	; 128
    4b32:	5f e3       	ldi	r21, 0x3F	; 63
    4b34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b38:	88 23       	and	r24, r24
    4b3a:	2c f4       	brge	.+10     	; 0x4b46 <ESP_MQTT_publish+0x23c>
		__ticks = 1;
    4b3c:	81 e0       	ldi	r24, 0x01	; 1
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	9c 8b       	std	Y+20, r25	; 0x14
    4b42:	8b 8b       	std	Y+19, r24	; 0x13
    4b44:	3f c0       	rjmp	.+126    	; 0x4bc4 <ESP_MQTT_publish+0x2ba>
	else if (__tmp > 65535)
    4b46:	6d 89       	ldd	r22, Y+21	; 0x15
    4b48:	7e 89       	ldd	r23, Y+22	; 0x16
    4b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    4b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    4b4e:	20 e0       	ldi	r18, 0x00	; 0
    4b50:	3f ef       	ldi	r19, 0xFF	; 255
    4b52:	4f e7       	ldi	r20, 0x7F	; 127
    4b54:	57 e4       	ldi	r21, 0x47	; 71
    4b56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b5a:	18 16       	cp	r1, r24
    4b5c:	4c f5       	brge	.+82     	; 0x4bb0 <ESP_MQTT_publish+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b5e:	69 8d       	ldd	r22, Y+25	; 0x19
    4b60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b66:	20 e0       	ldi	r18, 0x00	; 0
    4b68:	30 e0       	ldi	r19, 0x00	; 0
    4b6a:	40 e2       	ldi	r20, 0x20	; 32
    4b6c:	51 e4       	ldi	r21, 0x41	; 65
    4b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b72:	dc 01       	movw	r26, r24
    4b74:	cb 01       	movw	r24, r22
    4b76:	bc 01       	movw	r22, r24
    4b78:	cd 01       	movw	r24, r26
    4b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b7e:	dc 01       	movw	r26, r24
    4b80:	cb 01       	movw	r24, r22
    4b82:	9c 8b       	std	Y+20, r25	; 0x14
    4b84:	8b 8b       	std	Y+19, r24	; 0x13
    4b86:	0f c0       	rjmp	.+30     	; 0x4ba6 <ESP_MQTT_publish+0x29c>
    4b88:	88 ec       	ldi	r24, 0xC8	; 200
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	9a 8b       	std	Y+18, r25	; 0x12
    4b8e:	89 8b       	std	Y+17, r24	; 0x11
    4b90:	89 89       	ldd	r24, Y+17	; 0x11
    4b92:	9a 89       	ldd	r25, Y+18	; 0x12
    4b94:	01 97       	sbiw	r24, 0x01	; 1
    4b96:	f1 f7       	brne	.-4      	; 0x4b94 <ESP_MQTT_publish+0x28a>
    4b98:	9a 8b       	std	Y+18, r25	; 0x12
    4b9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b9c:	8b 89       	ldd	r24, Y+19	; 0x13
    4b9e:	9c 89       	ldd	r25, Y+20	; 0x14
    4ba0:	01 97       	sbiw	r24, 0x01	; 1
    4ba2:	9c 8b       	std	Y+20, r25	; 0x14
    4ba4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    4ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    4baa:	00 97       	sbiw	r24, 0x00	; 0
    4bac:	69 f7       	brne	.-38     	; 0x4b88 <ESP_MQTT_publish+0x27e>
    4bae:	14 c0       	rjmp	.+40     	; 0x4bd8 <ESP_MQTT_publish+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bb0:	6d 89       	ldd	r22, Y+21	; 0x15
    4bb2:	7e 89       	ldd	r23, Y+22	; 0x16
    4bb4:	8f 89       	ldd	r24, Y+23	; 0x17
    4bb6:	98 8d       	ldd	r25, Y+24	; 0x18
    4bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bbc:	dc 01       	movw	r26, r24
    4bbe:	cb 01       	movw	r24, r22
    4bc0:	9c 8b       	std	Y+20, r25	; 0x14
    4bc2:	8b 8b       	std	Y+19, r24	; 0x13
    4bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    4bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    4bc8:	98 8b       	std	Y+16, r25	; 0x10
    4bca:	8f 87       	std	Y+15, r24	; 0x0f
    4bcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bce:	98 89       	ldd	r25, Y+16	; 0x10
    4bd0:	01 97       	sbiw	r24, 0x01	; 1
    4bd2:	f1 f7       	brne	.-4      	; 0x4bd0 <ESP_MQTT_publish+0x2c6>
    4bd4:	98 8b       	std	Y+16, r25	; 0x10
    4bd6:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(1);
		time_out++;
    4bd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    4bda:	9c a5       	ldd	r25, Y+44	; 0x2c
    4bdc:	01 96       	adiw	r24, 0x01	; 1
    4bde:	9c a7       	std	Y+44, r25	; 0x2c
    4be0:	8b a7       	std	Y+43, r24	; 0x2b
	UART_SEND_string((char*)_topic);   //18 char
	UART_SEND_string((char*)_sub_topic);
	UART_SEND_number(_data);    //28 char
	UART_SEND_string("}");    //28 char

	while(!((time_out>2000)||Check_Word_in_Respond("SEND OK\r\n")))
    4be2:	8b a5       	ldd	r24, Y+43	; 0x2b
    4be4:	9c a5       	ldd	r25, Y+44	; 0x2c
    4be6:	27 e0       	ldi	r18, 0x07	; 7
    4be8:	81 3d       	cpi	r24, 0xD1	; 209
    4bea:	92 07       	cpc	r25, r18
    4bec:	38 f4       	brcc	.+14     	; 0x4bfc <ESP_MQTT_publish+0x2f2>
    4bee:	8f ef       	ldi	r24, 0xFF	; 255
    4bf0:	92 e0       	ldi	r25, 0x02	; 2
    4bf2:	0e 94 65 17 	call	0x2eca	; 0x2eca <Check_Word_in_Respond>
    4bf6:	88 23       	and	r24, r24
    4bf8:	09 f4       	brne	.+2      	; 0x4bfc <ESP_MQTT_publish+0x2f2>
    4bfa:	7c cf       	rjmp	.-264    	; 0x4af4 <ESP_MQTT_publish+0x1ea>
    4bfc:	80 e0       	ldi	r24, 0x00	; 0
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	a6 e9       	ldi	r26, 0x96	; 150
    4c02:	b3 e4       	ldi	r27, 0x43	; 67
    4c04:	8b 87       	std	Y+11, r24	; 0x0b
    4c06:	9c 87       	std	Y+12, r25	; 0x0c
    4c08:	ad 87       	std	Y+13, r26	; 0x0d
    4c0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c12:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c14:	20 e0       	ldi	r18, 0x00	; 0
    4c16:	30 e0       	ldi	r19, 0x00	; 0
    4c18:	4a ef       	ldi	r20, 0xFA	; 250
    4c1a:	54 e4       	ldi	r21, 0x44	; 68
    4c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c20:	dc 01       	movw	r26, r24
    4c22:	cb 01       	movw	r24, r22
    4c24:	8f 83       	std	Y+7, r24	; 0x07
    4c26:	98 87       	std	Y+8, r25	; 0x08
    4c28:	a9 87       	std	Y+9, r26	; 0x09
    4c2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    4c2e:	78 85       	ldd	r23, Y+8	; 0x08
    4c30:	89 85       	ldd	r24, Y+9	; 0x09
    4c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c34:	20 e0       	ldi	r18, 0x00	; 0
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	40 e8       	ldi	r20, 0x80	; 128
    4c3a:	5f e3       	ldi	r21, 0x3F	; 63
    4c3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c40:	88 23       	and	r24, r24
    4c42:	2c f4       	brge	.+10     	; 0x4c4e <ESP_MQTT_publish+0x344>
		__ticks = 1;
    4c44:	81 e0       	ldi	r24, 0x01	; 1
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	9e 83       	std	Y+6, r25	; 0x06
    4c4a:	8d 83       	std	Y+5, r24	; 0x05
    4c4c:	3f c0       	rjmp	.+126    	; 0x4ccc <ESP_MQTT_publish+0x3c2>
	else if (__tmp > 65535)
    4c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c50:	78 85       	ldd	r23, Y+8	; 0x08
    4c52:	89 85       	ldd	r24, Y+9	; 0x09
    4c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c56:	20 e0       	ldi	r18, 0x00	; 0
    4c58:	3f ef       	ldi	r19, 0xFF	; 255
    4c5a:	4f e7       	ldi	r20, 0x7F	; 127
    4c5c:	57 e4       	ldi	r21, 0x47	; 71
    4c5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c62:	18 16       	cp	r1, r24
    4c64:	4c f5       	brge	.+82     	; 0x4cb8 <ESP_MQTT_publish+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c66:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c68:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c6e:	20 e0       	ldi	r18, 0x00	; 0
    4c70:	30 e0       	ldi	r19, 0x00	; 0
    4c72:	40 e2       	ldi	r20, 0x20	; 32
    4c74:	51 e4       	ldi	r21, 0x41	; 65
    4c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	bc 01       	movw	r22, r24
    4c80:	cd 01       	movw	r24, r26
    4c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c86:	dc 01       	movw	r26, r24
    4c88:	cb 01       	movw	r24, r22
    4c8a:	9e 83       	std	Y+6, r25	; 0x06
    4c8c:	8d 83       	std	Y+5, r24	; 0x05
    4c8e:	0f c0       	rjmp	.+30     	; 0x4cae <ESP_MQTT_publish+0x3a4>
    4c90:	88 ec       	ldi	r24, 0xC8	; 200
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	9c 83       	std	Y+4, r25	; 0x04
    4c96:	8b 83       	std	Y+3, r24	; 0x03
    4c98:	8b 81       	ldd	r24, Y+3	; 0x03
    4c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c9c:	01 97       	sbiw	r24, 0x01	; 1
    4c9e:	f1 f7       	brne	.-4      	; 0x4c9c <ESP_MQTT_publish+0x392>
    4ca0:	9c 83       	std	Y+4, r25	; 0x04
    4ca2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ca8:	01 97       	sbiw	r24, 0x01	; 1
    4caa:	9e 83       	std	Y+6, r25	; 0x06
    4cac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cae:	8d 81       	ldd	r24, Y+5	; 0x05
    4cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb2:	00 97       	sbiw	r24, 0x00	; 0
    4cb4:	69 f7       	brne	.-38     	; 0x4c90 <ESP_MQTT_publish+0x386>
    4cb6:	14 c0       	rjmp	.+40     	; 0x4ce0 <ESP_MQTT_publish+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    4cba:	78 85       	ldd	r23, Y+8	; 0x08
    4cbc:	89 85       	ldd	r24, Y+9	; 0x09
    4cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cc4:	dc 01       	movw	r26, r24
    4cc6:	cb 01       	movw	r24, r22
    4cc8:	9e 83       	std	Y+6, r25	; 0x06
    4cca:	8d 83       	std	Y+5, r24	; 0x05
    4ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    4cce:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd0:	9a 83       	std	Y+2, r25	; 0x02
    4cd2:	89 83       	std	Y+1, r24	; 0x01
    4cd4:	89 81       	ldd	r24, Y+1	; 0x01
    4cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd8:	01 97       	sbiw	r24, 0x01	; 1
    4cda:	f1 f7       	brne	.-4      	; 0x4cd8 <ESP_MQTT_publish+0x3ce>
    4cdc:	9a 83       	std	Y+2, r25	; 0x02
    4cde:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(1);
		time_out++;
	}
	_delay_ms(300);
	Clear_REC_Buffer();
    4ce0:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>

	if (time_out>2000)  return FALSE;
    4ce4:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ce6:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ce8:	27 e0       	ldi	r18, 0x07	; 7
    4cea:	81 3d       	cpi	r24, 0xD1	; 209
    4cec:	92 07       	cpc	r25, r18
    4cee:	20 f0       	brcs	.+8      	; 0x4cf8 <ESP_MQTT_publish+0x3ee>
    4cf0:	23 96       	adiw	r28, 0x03	; 3
    4cf2:	1f ae       	std	Y+63, r1	; 0x3f
    4cf4:	23 97       	sbiw	r28, 0x03	; 3
    4cf6:	04 c0       	rjmp	.+8      	; 0x4d00 <ESP_MQTT_publish+0x3f6>
	else                 return TRUE;
    4cf8:	81 e0       	ldi	r24, 0x01	; 1
    4cfa:	23 96       	adiw	r28, 0x03	; 3
    4cfc:	8f af       	std	Y+63, r24	; 0x3f
    4cfe:	23 97       	sbiw	r28, 0x03	; 3
    4d00:	23 96       	adiw	r28, 0x03	; 3
    4d02:	8f ad       	ldd	r24, Y+63	; 0x3f
    4d04:	23 97       	sbiw	r28, 0x03	; 3

}
    4d06:	ce 5b       	subi	r28, 0xBE	; 190
    4d08:	df 4f       	sbci	r29, 0xFF	; 255
    4d0a:	0f b6       	in	r0, 0x3f	; 63
    4d0c:	f8 94       	cli
    4d0e:	de bf       	out	0x3e, r29	; 62
    4d10:	0f be       	out	0x3f, r0	; 63
    4d12:	cd bf       	out	0x3d, r28	; 61
    4d14:	cf 91       	pop	r28
    4d16:	df 91       	pop	r29
    4d18:	08 95       	ret

00004d1a <ESP_MQTT_subscribe_to_topics>:


void ESP_MQTT_subscribe_to_topics(const char* _topic1,const char* _topic2,const char* _topic3)
{
    4d1a:	df 93       	push	r29
    4d1c:	cf 93       	push	r28
    4d1e:	cd b7       	in	r28, 0x3d	; 61
    4d20:	de b7       	in	r29, 0x3e	; 62
    4d22:	64 97       	sbiw	r28, 0x14	; 20
    4d24:	0f b6       	in	r0, 0x3f	; 63
    4d26:	f8 94       	cli
    4d28:	de bf       	out	0x3e, r29	; 62
    4d2a:	0f be       	out	0x3f, r0	; 63
    4d2c:	cd bf       	out	0x3d, r28	; 61
    4d2e:	98 8b       	std	Y+16, r25	; 0x10
    4d30:	8f 87       	std	Y+15, r24	; 0x0f
    4d32:	7a 8b       	std	Y+18, r23	; 0x12
    4d34:	69 8b       	std	Y+17, r22	; 0x11
    4d36:	5c 8b       	std	Y+20, r21	; 0x14
    4d38:	4b 8b       	std	Y+19, r20	; 0x13
    4d3a:	06 c0       	rjmp	.+12     	; 0x4d48 <ESP_MQTT_subscribe_to_topics+0x2e>

	while(!ESP_MQTT_subscribe(_topic1))
	{
		EF_void_LCD_Clear_then_print("couldn't S TOPIC1");
    4d3c:	89 e0       	ldi	r24, 0x09	; 9
    4d3e:	93 e0       	ldi	r25, 0x03	; 3
    4d40:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
		Clear_REC_Buffer();
    4d44:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>


void ESP_MQTT_subscribe_to_topics(const char* _topic1,const char* _topic2,const char* _topic3)
{

	while(!ESP_MQTT_subscribe(_topic1))
    4d48:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d4a:	98 89       	ldd	r25, Y+16	; 0x10
    4d4c:	0e 94 56 27 	call	0x4eac	; 0x4eac <ESP_MQTT_subscribe>
    4d50:	98 2f       	mov	r25, r24
    4d52:	81 e0       	ldi	r24, 0x01	; 1
    4d54:	89 27       	eor	r24, r25
    4d56:	88 23       	and	r24, r24
    4d58:	89 f7       	brne	.-30     	; 0x4d3c <ESP_MQTT_subscribe_to_topics+0x22>
	{
		EF_void_LCD_Clear_then_print("couldn't S TOPIC1");
		Clear_REC_Buffer();
	};
	EF_void_LCD_Clear_then_print("MQTT S topic1");
    4d5a:	8b e1       	ldi	r24, 0x1B	; 27
    4d5c:	93 e0       	ldi	r25, 0x03	; 3
    4d5e:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
    4d62:	06 c0       	rjmp	.+12     	; 0x4d70 <ESP_MQTT_subscribe_to_topics+0x56>

	while(!ESP_MQTT_subscribe(_topic2))
	{
		EF_void_LCD_Clear_then_print("couldn't S TOPIC2");
    4d64:	89 e2       	ldi	r24, 0x29	; 41
    4d66:	93 e0       	ldi	r25, 0x03	; 3
    4d68:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
		Clear_REC_Buffer();
    4d6c:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
		EF_void_LCD_Clear_then_print("couldn't S TOPIC1");
		Clear_REC_Buffer();
	};
	EF_void_LCD_Clear_then_print("MQTT S topic1");

	while(!ESP_MQTT_subscribe(_topic2))
    4d70:	89 89       	ldd	r24, Y+17	; 0x11
    4d72:	9a 89       	ldd	r25, Y+18	; 0x12
    4d74:	0e 94 56 27 	call	0x4eac	; 0x4eac <ESP_MQTT_subscribe>
    4d78:	98 2f       	mov	r25, r24
    4d7a:	81 e0       	ldi	r24, 0x01	; 1
    4d7c:	89 27       	eor	r24, r25
    4d7e:	88 23       	and	r24, r24
    4d80:	89 f7       	brne	.-30     	; 0x4d64 <ESP_MQTT_subscribe_to_topics+0x4a>
	{
		EF_void_LCD_Clear_then_print("couldn't S TOPIC2");
		Clear_REC_Buffer();
	};
	EF_void_LCD_Clear_then_print("MQTT S topic2");
    4d82:	8b e3       	ldi	r24, 0x3B	; 59
    4d84:	93 e0       	ldi	r25, 0x03	; 3
    4d86:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
    4d8a:	06 c0       	rjmp	.+12     	; 0x4d98 <ESP_MQTT_subscribe_to_topics+0x7e>

	while(!ESP_MQTT_subscribe(_topic3))
	{
		EF_void_LCD_Clear_then_print("couldn't S TOPIC3");
    4d8c:	89 e4       	ldi	r24, 0x49	; 73
    4d8e:	93 e0       	ldi	r25, 0x03	; 3
    4d90:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
		Clear_REC_Buffer();
    4d94:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
		EF_void_LCD_Clear_then_print("couldn't S TOPIC2");
		Clear_REC_Buffer();
	};
	EF_void_LCD_Clear_then_print("MQTT S topic2");

	while(!ESP_MQTT_subscribe(_topic3))
    4d98:	8b 89       	ldd	r24, Y+19	; 0x13
    4d9a:	9c 89       	ldd	r25, Y+20	; 0x14
    4d9c:	0e 94 56 27 	call	0x4eac	; 0x4eac <ESP_MQTT_subscribe>
    4da0:	98 2f       	mov	r25, r24
    4da2:	81 e0       	ldi	r24, 0x01	; 1
    4da4:	89 27       	eor	r24, r25
    4da6:	88 23       	and	r24, r24
    4da8:	89 f7       	brne	.-30     	; 0x4d8c <ESP_MQTT_subscribe_to_topics+0x72>
	{
		EF_void_LCD_Clear_then_print("couldn't S TOPIC3");
		Clear_REC_Buffer();
	};
	EF_void_LCD_Clear_then_print("MQTT S topic3");
    4daa:	8b e5       	ldi	r24, 0x5B	; 91
    4dac:	93 e0       	ldi	r25, 0x03	; 3
    4dae:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
    4db2:	80 e0       	ldi	r24, 0x00	; 0
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	aa ef       	ldi	r26, 0xFA	; 250
    4db8:	b4 e4       	ldi	r27, 0x44	; 68
    4dba:	8b 87       	std	Y+11, r24	; 0x0b
    4dbc:	9c 87       	std	Y+12, r25	; 0x0c
    4dbe:	ad 87       	std	Y+13, r26	; 0x0d
    4dc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dca:	20 e0       	ldi	r18, 0x00	; 0
    4dcc:	30 e0       	ldi	r19, 0x00	; 0
    4dce:	4a ef       	ldi	r20, 0xFA	; 250
    4dd0:	54 e4       	ldi	r21, 0x44	; 68
    4dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dd6:	dc 01       	movw	r26, r24
    4dd8:	cb 01       	movw	r24, r22
    4dda:	8f 83       	std	Y+7, r24	; 0x07
    4ddc:	98 87       	std	Y+8, r25	; 0x08
    4dde:	a9 87       	std	Y+9, r26	; 0x09
    4de0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4de2:	6f 81       	ldd	r22, Y+7	; 0x07
    4de4:	78 85       	ldd	r23, Y+8	; 0x08
    4de6:	89 85       	ldd	r24, Y+9	; 0x09
    4de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dea:	20 e0       	ldi	r18, 0x00	; 0
    4dec:	30 e0       	ldi	r19, 0x00	; 0
    4dee:	40 e8       	ldi	r20, 0x80	; 128
    4df0:	5f e3       	ldi	r21, 0x3F	; 63
    4df2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4df6:	88 23       	and	r24, r24
    4df8:	2c f4       	brge	.+10     	; 0x4e04 <ESP_MQTT_subscribe_to_topics+0xea>
		__ticks = 1;
    4dfa:	81 e0       	ldi	r24, 0x01	; 1
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	9e 83       	std	Y+6, r25	; 0x06
    4e00:	8d 83       	std	Y+5, r24	; 0x05
    4e02:	3f c0       	rjmp	.+126    	; 0x4e82 <ESP_MQTT_subscribe_to_topics+0x168>
	else if (__tmp > 65535)
    4e04:	6f 81       	ldd	r22, Y+7	; 0x07
    4e06:	78 85       	ldd	r23, Y+8	; 0x08
    4e08:	89 85       	ldd	r24, Y+9	; 0x09
    4e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e0c:	20 e0       	ldi	r18, 0x00	; 0
    4e0e:	3f ef       	ldi	r19, 0xFF	; 255
    4e10:	4f e7       	ldi	r20, 0x7F	; 127
    4e12:	57 e4       	ldi	r21, 0x47	; 71
    4e14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e18:	18 16       	cp	r1, r24
    4e1a:	4c f5       	brge	.+82     	; 0x4e6e <ESP_MQTT_subscribe_to_topics+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e24:	20 e0       	ldi	r18, 0x00	; 0
    4e26:	30 e0       	ldi	r19, 0x00	; 0
    4e28:	40 e2       	ldi	r20, 0x20	; 32
    4e2a:	51 e4       	ldi	r21, 0x41	; 65
    4e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e30:	dc 01       	movw	r26, r24
    4e32:	cb 01       	movw	r24, r22
    4e34:	bc 01       	movw	r22, r24
    4e36:	cd 01       	movw	r24, r26
    4e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e3c:	dc 01       	movw	r26, r24
    4e3e:	cb 01       	movw	r24, r22
    4e40:	9e 83       	std	Y+6, r25	; 0x06
    4e42:	8d 83       	std	Y+5, r24	; 0x05
    4e44:	0f c0       	rjmp	.+30     	; 0x4e64 <ESP_MQTT_subscribe_to_topics+0x14a>
    4e46:	88 ec       	ldi	r24, 0xC8	; 200
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	9c 83       	std	Y+4, r25	; 0x04
    4e4c:	8b 83       	std	Y+3, r24	; 0x03
    4e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e50:	9c 81       	ldd	r25, Y+4	; 0x04
    4e52:	01 97       	sbiw	r24, 0x01	; 1
    4e54:	f1 f7       	brne	.-4      	; 0x4e52 <ESP_MQTT_subscribe_to_topics+0x138>
    4e56:	9c 83       	std	Y+4, r25	; 0x04
    4e58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e5e:	01 97       	sbiw	r24, 0x01	; 1
    4e60:	9e 83       	std	Y+6, r25	; 0x06
    4e62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e64:	8d 81       	ldd	r24, Y+5	; 0x05
    4e66:	9e 81       	ldd	r25, Y+6	; 0x06
    4e68:	00 97       	sbiw	r24, 0x00	; 0
    4e6a:	69 f7       	brne	.-38     	; 0x4e46 <ESP_MQTT_subscribe_to_topics+0x12c>
    4e6c:	14 c0       	rjmp	.+40     	; 0x4e96 <ESP_MQTT_subscribe_to_topics+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e6e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e70:	78 85       	ldd	r23, Y+8	; 0x08
    4e72:	89 85       	ldd	r24, Y+9	; 0x09
    4e74:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e7a:	dc 01       	movw	r26, r24
    4e7c:	cb 01       	movw	r24, r22
    4e7e:	9e 83       	std	Y+6, r25	; 0x06
    4e80:	8d 83       	std	Y+5, r24	; 0x05
    4e82:	8d 81       	ldd	r24, Y+5	; 0x05
    4e84:	9e 81       	ldd	r25, Y+6	; 0x06
    4e86:	9a 83       	std	Y+2, r25	; 0x02
    4e88:	89 83       	std	Y+1, r24	; 0x01
    4e8a:	89 81       	ldd	r24, Y+1	; 0x01
    4e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e8e:	01 97       	sbiw	r24, 0x01	; 1
    4e90:	f1 f7       	brne	.-4      	; 0x4e8e <ESP_MQTT_subscribe_to_topics+0x174>
    4e92:	9a 83       	std	Y+2, r25	; 0x02
    4e94:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(2000);
	Clear_REC_Buffer();
    4e96:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
}
    4e9a:	64 96       	adiw	r28, 0x14	; 20
    4e9c:	0f b6       	in	r0, 0x3f	; 63
    4e9e:	f8 94       	cli
    4ea0:	de bf       	out	0x3e, r29	; 62
    4ea2:	0f be       	out	0x3f, r0	; 63
    4ea4:	cd bf       	out	0x3d, r28	; 61
    4ea6:	cf 91       	pop	r28
    4ea8:	df 91       	pop	r29
    4eaa:	08 95       	ret

00004eac <ESP_MQTT_subscribe>:



bool ESP_MQTT_subscribe(const char* _topic)
{
    4eac:	df 93       	push	r29
    4eae:	cf 93       	push	r28
    4eb0:	cd b7       	in	r28, 0x3d	; 61
    4eb2:	de b7       	in	r29, 0x3e	; 62
    4eb4:	e2 97       	sbiw	r28, 0x32	; 50
    4eb6:	0f b6       	in	r0, 0x3f	; 63
    4eb8:	f8 94       	cli
    4eba:	de bf       	out	0x3e, r29	; 62
    4ebc:	0f be       	out	0x3f, r0	; 63
    4ebe:	cd bf       	out	0x3d, r28	; 61
    4ec0:	99 ab       	std	Y+49, r25	; 0x31
    4ec2:	88 ab       	std	Y+48, r24	; 0x30
	unsigned char topic_length_byte=0,remeaning_length_byte=0,frame_length=0;
    4ec4:	1f a6       	std	Y+47, r1	; 0x2f
    4ec6:	1e a6       	std	Y+46, r1	; 0x2e
    4ec8:	1d a6       	std	Y+45, r1	; 0x2d

	unsigned int time_out=0;
    4eca:	1c a6       	std	Y+44, r1	; 0x2c
    4ecc:	1b a6       	std	Y+43, r1	; 0x2b


	topic_length_byte=strlen(_topic);
    4ece:	88 a9       	ldd	r24, Y+48	; 0x30
    4ed0:	99 a9       	ldd	r25, Y+49	; 0x31
    4ed2:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <strlen>
    4ed6:	8f a7       	std	Y+47, r24	; 0x2f
	remeaning_length_byte=topic_length_byte+5;
    4ed8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4eda:	8b 5f       	subi	r24, 0xFB	; 251
    4edc:	8e a7       	std	Y+46, r24	; 0x2e
	frame_length=remeaning_length_byte+2;
    4ede:	8e a5       	ldd	r24, Y+46	; 0x2e
    4ee0:	8e 5f       	subi	r24, 0xFE	; 254
    4ee2:	8d a7       	std	Y+45, r24	; 0x2d



	Clear_REC_Buffer();
    4ee4:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
	UART_SEND_string("AT+CIPSEND=");
    4ee8:	8f ec       	ldi	r24, 0xCF	; 207
    4eea:	92 e0       	ldi	r25, 0x02	; 2
    4eec:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SEND_number(frame_length);
    4ef0:	8d a5       	ldd	r24, Y+45	; 0x2d
    4ef2:	88 2f       	mov	r24, r24
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	0e 94 f7 07 	call	0xfee	; 0xfee <UART_SEND_number>
	UART_SEND_string("\r\n");
    4efa:	8c eb       	ldi	r24, 0xBC	; 188
    4efc:	92 e0       	ldi	r25, 0x02	; 2
    4efe:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
    4f02:	77 c0       	rjmp	.+238    	; 0x4ff2 <ESP_MQTT_subscribe+0x146>
	while(!((time_out>2000)||Check_Respond("\r\nOK\r\n> ")))
    4f04:	80 e0       	ldi	r24, 0x00	; 0
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	a0 e8       	ldi	r26, 0x80	; 128
    4f0a:	bf e3       	ldi	r27, 0x3F	; 63
    4f0c:	8f a3       	std	Y+39, r24	; 0x27
    4f0e:	98 a7       	std	Y+40, r25	; 0x28
    4f10:	a9 a7       	std	Y+41, r26	; 0x29
    4f12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f14:	6f a1       	ldd	r22, Y+39	; 0x27
    4f16:	78 a5       	ldd	r23, Y+40	; 0x28
    4f18:	89 a5       	ldd	r24, Y+41	; 0x29
    4f1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4f1c:	20 e0       	ldi	r18, 0x00	; 0
    4f1e:	30 e0       	ldi	r19, 0x00	; 0
    4f20:	4a ef       	ldi	r20, 0xFA	; 250
    4f22:	54 e4       	ldi	r21, 0x44	; 68
    4f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f28:	dc 01       	movw	r26, r24
    4f2a:	cb 01       	movw	r24, r22
    4f2c:	8b a3       	std	Y+35, r24	; 0x23
    4f2e:	9c a3       	std	Y+36, r25	; 0x24
    4f30:	ad a3       	std	Y+37, r26	; 0x25
    4f32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4f34:	6b a1       	ldd	r22, Y+35	; 0x23
    4f36:	7c a1       	ldd	r23, Y+36	; 0x24
    4f38:	8d a1       	ldd	r24, Y+37	; 0x25
    4f3a:	9e a1       	ldd	r25, Y+38	; 0x26
    4f3c:	20 e0       	ldi	r18, 0x00	; 0
    4f3e:	30 e0       	ldi	r19, 0x00	; 0
    4f40:	40 e8       	ldi	r20, 0x80	; 128
    4f42:	5f e3       	ldi	r21, 0x3F	; 63
    4f44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f48:	88 23       	and	r24, r24
    4f4a:	2c f4       	brge	.+10     	; 0x4f56 <ESP_MQTT_subscribe+0xaa>
		__ticks = 1;
    4f4c:	81 e0       	ldi	r24, 0x01	; 1
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	9a a3       	std	Y+34, r25	; 0x22
    4f52:	89 a3       	std	Y+33, r24	; 0x21
    4f54:	3f c0       	rjmp	.+126    	; 0x4fd4 <ESP_MQTT_subscribe+0x128>
	else if (__tmp > 65535)
    4f56:	6b a1       	ldd	r22, Y+35	; 0x23
    4f58:	7c a1       	ldd	r23, Y+36	; 0x24
    4f5a:	8d a1       	ldd	r24, Y+37	; 0x25
    4f5c:	9e a1       	ldd	r25, Y+38	; 0x26
    4f5e:	20 e0       	ldi	r18, 0x00	; 0
    4f60:	3f ef       	ldi	r19, 0xFF	; 255
    4f62:	4f e7       	ldi	r20, 0x7F	; 127
    4f64:	57 e4       	ldi	r21, 0x47	; 71
    4f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f6a:	18 16       	cp	r1, r24
    4f6c:	4c f5       	brge	.+82     	; 0x4fc0 <ESP_MQTT_subscribe+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f6e:	6f a1       	ldd	r22, Y+39	; 0x27
    4f70:	78 a5       	ldd	r23, Y+40	; 0x28
    4f72:	89 a5       	ldd	r24, Y+41	; 0x29
    4f74:	9a a5       	ldd	r25, Y+42	; 0x2a
    4f76:	20 e0       	ldi	r18, 0x00	; 0
    4f78:	30 e0       	ldi	r19, 0x00	; 0
    4f7a:	40 e2       	ldi	r20, 0x20	; 32
    4f7c:	51 e4       	ldi	r21, 0x41	; 65
    4f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f82:	dc 01       	movw	r26, r24
    4f84:	cb 01       	movw	r24, r22
    4f86:	bc 01       	movw	r22, r24
    4f88:	cd 01       	movw	r24, r26
    4f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f8e:	dc 01       	movw	r26, r24
    4f90:	cb 01       	movw	r24, r22
    4f92:	9a a3       	std	Y+34, r25	; 0x22
    4f94:	89 a3       	std	Y+33, r24	; 0x21
    4f96:	0f c0       	rjmp	.+30     	; 0x4fb6 <ESP_MQTT_subscribe+0x10a>
    4f98:	88 ec       	ldi	r24, 0xC8	; 200
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	98 a3       	std	Y+32, r25	; 0x20
    4f9e:	8f 8f       	std	Y+31, r24	; 0x1f
    4fa0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4fa2:	98 a1       	ldd	r25, Y+32	; 0x20
    4fa4:	01 97       	sbiw	r24, 0x01	; 1
    4fa6:	f1 f7       	brne	.-4      	; 0x4fa4 <ESP_MQTT_subscribe+0xf8>
    4fa8:	98 a3       	std	Y+32, r25	; 0x20
    4faa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fac:	89 a1       	ldd	r24, Y+33	; 0x21
    4fae:	9a a1       	ldd	r25, Y+34	; 0x22
    4fb0:	01 97       	sbiw	r24, 0x01	; 1
    4fb2:	9a a3       	std	Y+34, r25	; 0x22
    4fb4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fb6:	89 a1       	ldd	r24, Y+33	; 0x21
    4fb8:	9a a1       	ldd	r25, Y+34	; 0x22
    4fba:	00 97       	sbiw	r24, 0x00	; 0
    4fbc:	69 f7       	brne	.-38     	; 0x4f98 <ESP_MQTT_subscribe+0xec>
    4fbe:	14 c0       	rjmp	.+40     	; 0x4fe8 <ESP_MQTT_subscribe+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fc0:	6b a1       	ldd	r22, Y+35	; 0x23
    4fc2:	7c a1       	ldd	r23, Y+36	; 0x24
    4fc4:	8d a1       	ldd	r24, Y+37	; 0x25
    4fc6:	9e a1       	ldd	r25, Y+38	; 0x26
    4fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fcc:	dc 01       	movw	r26, r24
    4fce:	cb 01       	movw	r24, r22
    4fd0:	9a a3       	std	Y+34, r25	; 0x22
    4fd2:	89 a3       	std	Y+33, r24	; 0x21
    4fd4:	89 a1       	ldd	r24, Y+33	; 0x21
    4fd6:	9a a1       	ldd	r25, Y+34	; 0x22
    4fd8:	9e 8f       	std	Y+30, r25	; 0x1e
    4fda:	8d 8f       	std	Y+29, r24	; 0x1d
    4fdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4fde:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4fe0:	01 97       	sbiw	r24, 0x01	; 1
    4fe2:	f1 f7       	brne	.-4      	; 0x4fe0 <ESP_MQTT_subscribe+0x134>
    4fe4:	9e 8f       	std	Y+30, r25	; 0x1e
    4fe6:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		_delay_ms(1);
		time_out++;
    4fe8:	8b a5       	ldd	r24, Y+43	; 0x2b
    4fea:	9c a5       	ldd	r25, Y+44	; 0x2c
    4fec:	01 96       	adiw	r24, 0x01	; 1
    4fee:	9c a7       	std	Y+44, r25	; 0x2c
    4ff0:	8b a7       	std	Y+43, r24	; 0x2b

	Clear_REC_Buffer();
	UART_SEND_string("AT+CIPSEND=");
	UART_SEND_number(frame_length);
	UART_SEND_string("\r\n");
	while(!((time_out>2000)||Check_Respond("\r\nOK\r\n> ")))
    4ff2:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ff4:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ff6:	27 e0       	ldi	r18, 0x07	; 7
    4ff8:	81 3d       	cpi	r24, 0xD1	; 209
    4ffa:	92 07       	cpc	r25, r18
    4ffc:	38 f4       	brcc	.+14     	; 0x500c <ESP_MQTT_subscribe+0x160>
    4ffe:	8b ed       	ldi	r24, 0xDB	; 219
    5000:	92 e0       	ldi	r25, 0x02	; 2
    5002:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <Check_Respond>
    5006:	88 23       	and	r24, r24
    5008:	09 f4       	brne	.+2      	; 0x500c <ESP_MQTT_subscribe+0x160>
    500a:	7c cf       	rjmp	.-264    	; 0x4f04 <ESP_MQTT_subscribe+0x58>
	{
		_delay_ms(1);
		time_out++;
	}

	UART_SendChar(0x82);
    500c:	82 e8       	ldi	r24, 0x82	; 130
    500e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(remeaning_length_byte);     //31
    5012:	8e a5       	ldd	r24, Y+46	; 0x2e
    5014:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(0x00);
    5018:	80 e0       	ldi	r24, 0x00	; 0
    501a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(0x0A);
    501e:	8a e0       	ldi	r24, 0x0A	; 10
    5020:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(0x00);
    5024:	80 e0       	ldi	r24, 0x00	; 0
    5026:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
	UART_SendChar(topic_length_byte);
    502a:	8f a5       	ldd	r24, Y+47	; 0x2f
    502c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>


	UART_SEND_string((char*)_topic);  //26
    5030:	88 a9       	ldd	r24, Y+48	; 0x30
    5032:	99 a9       	ldd	r25, Y+49	; 0x31
    5034:	0e 94 cc 07 	call	0xf98	; 0xf98 <UART_SEND_string>
	UART_SendChar(0x00);
    5038:	80 e0       	ldi	r24, 0x00	; 0
    503a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <UART_SendChar>
    503e:	77 c0       	rjmp	.+238    	; 0x512e <ESP_MQTT_subscribe+0x282>

	while(!((time_out>3000)||Check_Word_in_Respond("SEND OK\r\n")))
    5040:	80 e0       	ldi	r24, 0x00	; 0
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	a0 e8       	ldi	r26, 0x80	; 128
    5046:	bf e3       	ldi	r27, 0x3F	; 63
    5048:	89 8f       	std	Y+25, r24	; 0x19
    504a:	9a 8f       	std	Y+26, r25	; 0x1a
    504c:	ab 8f       	std	Y+27, r26	; 0x1b
    504e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5050:	69 8d       	ldd	r22, Y+25	; 0x19
    5052:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5058:	20 e0       	ldi	r18, 0x00	; 0
    505a:	30 e0       	ldi	r19, 0x00	; 0
    505c:	4a ef       	ldi	r20, 0xFA	; 250
    505e:	54 e4       	ldi	r21, 0x44	; 68
    5060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5064:	dc 01       	movw	r26, r24
    5066:	cb 01       	movw	r24, r22
    5068:	8d 8b       	std	Y+21, r24	; 0x15
    506a:	9e 8b       	std	Y+22, r25	; 0x16
    506c:	af 8b       	std	Y+23, r26	; 0x17
    506e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5070:	6d 89       	ldd	r22, Y+21	; 0x15
    5072:	7e 89       	ldd	r23, Y+22	; 0x16
    5074:	8f 89       	ldd	r24, Y+23	; 0x17
    5076:	98 8d       	ldd	r25, Y+24	; 0x18
    5078:	20 e0       	ldi	r18, 0x00	; 0
    507a:	30 e0       	ldi	r19, 0x00	; 0
    507c:	40 e8       	ldi	r20, 0x80	; 128
    507e:	5f e3       	ldi	r21, 0x3F	; 63
    5080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5084:	88 23       	and	r24, r24
    5086:	2c f4       	brge	.+10     	; 0x5092 <ESP_MQTT_subscribe+0x1e6>
		__ticks = 1;
    5088:	81 e0       	ldi	r24, 0x01	; 1
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	9c 8b       	std	Y+20, r25	; 0x14
    508e:	8b 8b       	std	Y+19, r24	; 0x13
    5090:	3f c0       	rjmp	.+126    	; 0x5110 <ESP_MQTT_subscribe+0x264>
	else if (__tmp > 65535)
    5092:	6d 89       	ldd	r22, Y+21	; 0x15
    5094:	7e 89       	ldd	r23, Y+22	; 0x16
    5096:	8f 89       	ldd	r24, Y+23	; 0x17
    5098:	98 8d       	ldd	r25, Y+24	; 0x18
    509a:	20 e0       	ldi	r18, 0x00	; 0
    509c:	3f ef       	ldi	r19, 0xFF	; 255
    509e:	4f e7       	ldi	r20, 0x7F	; 127
    50a0:	57 e4       	ldi	r21, 0x47	; 71
    50a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50a6:	18 16       	cp	r1, r24
    50a8:	4c f5       	brge	.+82     	; 0x50fc <ESP_MQTT_subscribe+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50aa:	69 8d       	ldd	r22, Y+25	; 0x19
    50ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50b2:	20 e0       	ldi	r18, 0x00	; 0
    50b4:	30 e0       	ldi	r19, 0x00	; 0
    50b6:	40 e2       	ldi	r20, 0x20	; 32
    50b8:	51 e4       	ldi	r21, 0x41	; 65
    50ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50be:	dc 01       	movw	r26, r24
    50c0:	cb 01       	movw	r24, r22
    50c2:	bc 01       	movw	r22, r24
    50c4:	cd 01       	movw	r24, r26
    50c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ca:	dc 01       	movw	r26, r24
    50cc:	cb 01       	movw	r24, r22
    50ce:	9c 8b       	std	Y+20, r25	; 0x14
    50d0:	8b 8b       	std	Y+19, r24	; 0x13
    50d2:	0f c0       	rjmp	.+30     	; 0x50f2 <ESP_MQTT_subscribe+0x246>
    50d4:	88 ec       	ldi	r24, 0xC8	; 200
    50d6:	90 e0       	ldi	r25, 0x00	; 0
    50d8:	9a 8b       	std	Y+18, r25	; 0x12
    50da:	89 8b       	std	Y+17, r24	; 0x11
    50dc:	89 89       	ldd	r24, Y+17	; 0x11
    50de:	9a 89       	ldd	r25, Y+18	; 0x12
    50e0:	01 97       	sbiw	r24, 0x01	; 1
    50e2:	f1 f7       	brne	.-4      	; 0x50e0 <ESP_MQTT_subscribe+0x234>
    50e4:	9a 8b       	std	Y+18, r25	; 0x12
    50e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50e8:	8b 89       	ldd	r24, Y+19	; 0x13
    50ea:	9c 89       	ldd	r25, Y+20	; 0x14
    50ec:	01 97       	sbiw	r24, 0x01	; 1
    50ee:	9c 8b       	std	Y+20, r25	; 0x14
    50f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50f2:	8b 89       	ldd	r24, Y+19	; 0x13
    50f4:	9c 89       	ldd	r25, Y+20	; 0x14
    50f6:	00 97       	sbiw	r24, 0x00	; 0
    50f8:	69 f7       	brne	.-38     	; 0x50d4 <ESP_MQTT_subscribe+0x228>
    50fa:	14 c0       	rjmp	.+40     	; 0x5124 <ESP_MQTT_subscribe+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50fc:	6d 89       	ldd	r22, Y+21	; 0x15
    50fe:	7e 89       	ldd	r23, Y+22	; 0x16
    5100:	8f 89       	ldd	r24, Y+23	; 0x17
    5102:	98 8d       	ldd	r25, Y+24	; 0x18
    5104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5108:	dc 01       	movw	r26, r24
    510a:	cb 01       	movw	r24, r22
    510c:	9c 8b       	std	Y+20, r25	; 0x14
    510e:	8b 8b       	std	Y+19, r24	; 0x13
    5110:	8b 89       	ldd	r24, Y+19	; 0x13
    5112:	9c 89       	ldd	r25, Y+20	; 0x14
    5114:	98 8b       	std	Y+16, r25	; 0x10
    5116:	8f 87       	std	Y+15, r24	; 0x0f
    5118:	8f 85       	ldd	r24, Y+15	; 0x0f
    511a:	98 89       	ldd	r25, Y+16	; 0x10
    511c:	01 97       	sbiw	r24, 0x01	; 1
    511e:	f1 f7       	brne	.-4      	; 0x511c <ESP_MQTT_subscribe+0x270>
    5120:	98 8b       	std	Y+16, r25	; 0x10
    5122:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(1);
		time_out++;
    5124:	8b a5       	ldd	r24, Y+43	; 0x2b
    5126:	9c a5       	ldd	r25, Y+44	; 0x2c
    5128:	01 96       	adiw	r24, 0x01	; 1
    512a:	9c a7       	std	Y+44, r25	; 0x2c
    512c:	8b a7       	std	Y+43, r24	; 0x2b


	UART_SEND_string((char*)_topic);  //26
	UART_SendChar(0x00);

	while(!((time_out>3000)||Check_Word_in_Respond("SEND OK\r\n")))
    512e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5130:	9c a5       	ldd	r25, Y+44	; 0x2c
    5132:	2b e0       	ldi	r18, 0x0B	; 11
    5134:	89 3b       	cpi	r24, 0xB9	; 185
    5136:	92 07       	cpc	r25, r18
    5138:	38 f4       	brcc	.+14     	; 0x5148 <ESP_MQTT_subscribe+0x29c>
    513a:	8f ef       	ldi	r24, 0xFF	; 255
    513c:	92 e0       	ldi	r25, 0x02	; 2
    513e:	0e 94 65 17 	call	0x2eca	; 0x2eca <Check_Word_in_Respond>
    5142:	88 23       	and	r24, r24
    5144:	09 f4       	brne	.+2      	; 0x5148 <ESP_MQTT_subscribe+0x29c>
    5146:	7c cf       	rjmp	.-264    	; 0x5040 <ESP_MQTT_subscribe+0x194>
    5148:	80 e0       	ldi	r24, 0x00	; 0
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	a6 e9       	ldi	r26, 0x96	; 150
    514e:	b3 e4       	ldi	r27, 0x43	; 67
    5150:	8b 87       	std	Y+11, r24	; 0x0b
    5152:	9c 87       	std	Y+12, r25	; 0x0c
    5154:	ad 87       	std	Y+13, r26	; 0x0d
    5156:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5158:	6b 85       	ldd	r22, Y+11	; 0x0b
    515a:	7c 85       	ldd	r23, Y+12	; 0x0c
    515c:	8d 85       	ldd	r24, Y+13	; 0x0d
    515e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5160:	20 e0       	ldi	r18, 0x00	; 0
    5162:	30 e0       	ldi	r19, 0x00	; 0
    5164:	4a ef       	ldi	r20, 0xFA	; 250
    5166:	54 e4       	ldi	r21, 0x44	; 68
    5168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    516c:	dc 01       	movw	r26, r24
    516e:	cb 01       	movw	r24, r22
    5170:	8f 83       	std	Y+7, r24	; 0x07
    5172:	98 87       	std	Y+8, r25	; 0x08
    5174:	a9 87       	std	Y+9, r26	; 0x09
    5176:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5178:	6f 81       	ldd	r22, Y+7	; 0x07
    517a:	78 85       	ldd	r23, Y+8	; 0x08
    517c:	89 85       	ldd	r24, Y+9	; 0x09
    517e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5180:	20 e0       	ldi	r18, 0x00	; 0
    5182:	30 e0       	ldi	r19, 0x00	; 0
    5184:	40 e8       	ldi	r20, 0x80	; 128
    5186:	5f e3       	ldi	r21, 0x3F	; 63
    5188:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    518c:	88 23       	and	r24, r24
    518e:	2c f4       	brge	.+10     	; 0x519a <ESP_MQTT_subscribe+0x2ee>
		__ticks = 1;
    5190:	81 e0       	ldi	r24, 0x01	; 1
    5192:	90 e0       	ldi	r25, 0x00	; 0
    5194:	9e 83       	std	Y+6, r25	; 0x06
    5196:	8d 83       	std	Y+5, r24	; 0x05
    5198:	3f c0       	rjmp	.+126    	; 0x5218 <ESP_MQTT_subscribe+0x36c>
	else if (__tmp > 65535)
    519a:	6f 81       	ldd	r22, Y+7	; 0x07
    519c:	78 85       	ldd	r23, Y+8	; 0x08
    519e:	89 85       	ldd	r24, Y+9	; 0x09
    51a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    51a2:	20 e0       	ldi	r18, 0x00	; 0
    51a4:	3f ef       	ldi	r19, 0xFF	; 255
    51a6:	4f e7       	ldi	r20, 0x7F	; 127
    51a8:	57 e4       	ldi	r21, 0x47	; 71
    51aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51ae:	18 16       	cp	r1, r24
    51b0:	4c f5       	brge	.+82     	; 0x5204 <ESP_MQTT_subscribe+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    51b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    51b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    51b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    51ba:	20 e0       	ldi	r18, 0x00	; 0
    51bc:	30 e0       	ldi	r19, 0x00	; 0
    51be:	40 e2       	ldi	r20, 0x20	; 32
    51c0:	51 e4       	ldi	r21, 0x41	; 65
    51c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51c6:	dc 01       	movw	r26, r24
    51c8:	cb 01       	movw	r24, r22
    51ca:	bc 01       	movw	r22, r24
    51cc:	cd 01       	movw	r24, r26
    51ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51d2:	dc 01       	movw	r26, r24
    51d4:	cb 01       	movw	r24, r22
    51d6:	9e 83       	std	Y+6, r25	; 0x06
    51d8:	8d 83       	std	Y+5, r24	; 0x05
    51da:	0f c0       	rjmp	.+30     	; 0x51fa <ESP_MQTT_subscribe+0x34e>
    51dc:	88 ec       	ldi	r24, 0xC8	; 200
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	9c 83       	std	Y+4, r25	; 0x04
    51e2:	8b 83       	std	Y+3, r24	; 0x03
    51e4:	8b 81       	ldd	r24, Y+3	; 0x03
    51e6:	9c 81       	ldd	r25, Y+4	; 0x04
    51e8:	01 97       	sbiw	r24, 0x01	; 1
    51ea:	f1 f7       	brne	.-4      	; 0x51e8 <ESP_MQTT_subscribe+0x33c>
    51ec:	9c 83       	std	Y+4, r25	; 0x04
    51ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51f0:	8d 81       	ldd	r24, Y+5	; 0x05
    51f2:	9e 81       	ldd	r25, Y+6	; 0x06
    51f4:	01 97       	sbiw	r24, 0x01	; 1
    51f6:	9e 83       	std	Y+6, r25	; 0x06
    51f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51fa:	8d 81       	ldd	r24, Y+5	; 0x05
    51fc:	9e 81       	ldd	r25, Y+6	; 0x06
    51fe:	00 97       	sbiw	r24, 0x00	; 0
    5200:	69 f7       	brne	.-38     	; 0x51dc <ESP_MQTT_subscribe+0x330>
    5202:	14 c0       	rjmp	.+40     	; 0x522c <ESP_MQTT_subscribe+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5204:	6f 81       	ldd	r22, Y+7	; 0x07
    5206:	78 85       	ldd	r23, Y+8	; 0x08
    5208:	89 85       	ldd	r24, Y+9	; 0x09
    520a:	9a 85       	ldd	r25, Y+10	; 0x0a
    520c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5210:	dc 01       	movw	r26, r24
    5212:	cb 01       	movw	r24, r22
    5214:	9e 83       	std	Y+6, r25	; 0x06
    5216:	8d 83       	std	Y+5, r24	; 0x05
    5218:	8d 81       	ldd	r24, Y+5	; 0x05
    521a:	9e 81       	ldd	r25, Y+6	; 0x06
    521c:	9a 83       	std	Y+2, r25	; 0x02
    521e:	89 83       	std	Y+1, r24	; 0x01
    5220:	89 81       	ldd	r24, Y+1	; 0x01
    5222:	9a 81       	ldd	r25, Y+2	; 0x02
    5224:	01 97       	sbiw	r24, 0x01	; 1
    5226:	f1 f7       	brne	.-4      	; 0x5224 <ESP_MQTT_subscribe+0x378>
    5228:	9a 83       	std	Y+2, r25	; 0x02
    522a:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(1);
		time_out++;
	}
	_delay_ms(300);
	Clear_REC_Buffer();
    522c:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>

	if (time_out>3000)  return FALSE;
    5230:	8b a5       	ldd	r24, Y+43	; 0x2b
    5232:	9c a5       	ldd	r25, Y+44	; 0x2c
    5234:	2b e0       	ldi	r18, 0x0B	; 11
    5236:	89 3b       	cpi	r24, 0xB9	; 185
    5238:	92 07       	cpc	r25, r18
    523a:	10 f0       	brcs	.+4      	; 0x5240 <ESP_MQTT_subscribe+0x394>
    523c:	1a aa       	std	Y+50, r1	; 0x32
    523e:	02 c0       	rjmp	.+4      	; 0x5244 <ESP_MQTT_subscribe+0x398>
	else                 return TRUE;
    5240:	81 e0       	ldi	r24, 0x01	; 1
    5242:	8a ab       	std	Y+50, r24	; 0x32
    5244:	8a a9       	ldd	r24, Y+50	; 0x32

}
    5246:	e2 96       	adiw	r28, 0x32	; 50
    5248:	0f b6       	in	r0, 0x3f	; 63
    524a:	f8 94       	cli
    524c:	de bf       	out	0x3e, r29	; 62
    524e:	0f be       	out	0x3f, r0	; 63
    5250:	cd bf       	out	0x3d, r28	; 61
    5252:	cf 91       	pop	r28
    5254:	df 91       	pop	r29
    5256:	08 95       	ret

00005258 <check_receiving_new_data_from_server>:


bool check_receiving_new_data_from_server(const char * topic1,const char * topic2,const char * topic3,data_from_server* topics)
{
    5258:	df 93       	push	r29
    525a:	cf 93       	push	r28
    525c:	cd b7       	in	r28, 0x3d	; 61
    525e:	de b7       	in	r29, 0x3e	; 62
    5260:	a5 97       	sbiw	r28, 0x25	; 37
    5262:	0f b6       	in	r0, 0x3f	; 63
    5264:	f8 94       	cli
    5266:	de bf       	out	0x3e, r29	; 62
    5268:	0f be       	out	0x3f, r0	; 63
    526a:	cd bf       	out	0x3d, r28	; 61
    526c:	9e 8f       	std	Y+30, r25	; 0x1e
    526e:	8d 8f       	std	Y+29, r24	; 0x1d
    5270:	78 a3       	std	Y+32, r23	; 0x20
    5272:	6f 8f       	std	Y+31, r22	; 0x1f
    5274:	5a a3       	std	Y+34, r21	; 0x22
    5276:	49 a3       	std	Y+33, r20	; 0x21
    5278:	3c a3       	std	Y+36, r19	; 0x24
    527a:	2b a3       	std	Y+35, r18	; 0x23
	unsigned char i=0,j=0,k=0;
    527c:	1c 8e       	std	Y+28, r1	; 0x1c
    527e:	1b 8e       	std	Y+27, r1	; 0x1b
    5280:	1a 8e       	std	Y+26, r1	; 0x1a
	unsigned char topic_name_length1=0;
    5282:	19 8e       	std	Y+25, r1	; 0x19
	unsigned char topic_name_length2=0;
    5284:	18 8e       	std	Y+24, r1	; 0x18
	unsigned char topic_name_length3=0;
    5286:	1f 8a       	std	Y+23, r1	; 0x17
	unsigned char correct_charracters_1st_topic=0;
    5288:	1e 8a       	std	Y+22, r1	; 0x16
	unsigned char correct_charracters_2nd_topic=0;
    528a:	1d 8a       	std	Y+21, r1	; 0x15
	unsigned char correct_charracters_3rd_topic=0;
    528c:	1c 8a       	std	Y+20, r1	; 0x14
	bool found_topic=FALSE;
    528e:	1b 8a       	std	Y+19, r1	; 0x13

	topic_name_length1=strlen(topic1);
    5290:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5292:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5294:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <strlen>
    5298:	89 8f       	std	Y+25, r24	; 0x19
	topic_name_length2=strlen(topic2);
    529a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    529c:	98 a1       	ldd	r25, Y+32	; 0x20
    529e:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <strlen>
    52a2:	88 8f       	std	Y+24, r24	; 0x18
	topic_name_length3=strlen(topic3);
    52a4:	89 a1       	ldd	r24, Y+33	; 0x21
    52a6:	9a a1       	ldd	r25, Y+34	; 0x22
    52a8:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <strlen>
    52ac:	8f 8b       	std	Y+23, r24	; 0x17

	char *ptr_detect_new_data=strstr(Rec_Data,"\r\n+IPD");
    52ae:	83 e3       	ldi	r24, 0x33	; 51
    52b0:	96 e0       	ldi	r25, 0x06	; 6
    52b2:	29 e6       	ldi	r18, 0x69	; 105
    52b4:	33 e0       	ldi	r19, 0x03	; 3
    52b6:	b9 01       	movw	r22, r18
    52b8:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <strstr>
    52bc:	9a 8b       	std	Y+18, r25	; 0x12
    52be:	89 8b       	std	Y+17, r24	; 0x11
	char *ptr_detect_lost_connection=strstr(Rec_Data,"CLOSED\r\n");
    52c0:	83 e3       	ldi	r24, 0x33	; 51
    52c2:	96 e0       	ldi	r25, 0x06	; 6
    52c4:	20 e7       	ldi	r18, 0x70	; 112
    52c6:	33 e0       	ldi	r19, 0x03	; 3
    52c8:	b9 01       	movw	r22, r18
    52ca:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <strstr>
    52ce:	98 8b       	std	Y+16, r25	; 0x10
    52d0:	8f 87       	std	Y+15, r24	; 0x0f
	if(ptr_detect_new_data!=0)
    52d2:	89 89       	ldd	r24, Y+17	; 0x11
    52d4:	9a 89       	ldd	r25, Y+18	; 0x12
    52d6:	00 97       	sbiw	r24, 0x00	; 0
    52d8:	09 f4       	brne	.+2      	; 0x52dc <check_receiving_new_data_from_server+0x84>
    52da:	94 c1       	rjmp	.+808    	; 0x5604 <check_receiving_new_data_from_server+0x3ac>
	{

		for(i=0;i<100;i++)
    52dc:	1c 8e       	std	Y+28, r1	; 0x1c
    52de:	8e c1       	rjmp	.+796    	; 0x55fc <check_receiving_new_data_from_server+0x3a4>
		{

			if(topic1!="0000")
    52e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52e4:	23 e0       	ldi	r18, 0x03	; 3
    52e6:	89 37       	cpi	r24, 0x79	; 121
    52e8:	92 07       	cpc	r25, r18
    52ea:	09 f4       	brne	.+2      	; 0x52ee <check_receiving_new_data_from_server+0x96>
    52ec:	7a c0       	rjmp	.+244    	; 0x53e2 <check_receiving_new_data_from_server+0x18a>
			{
				correct_charracters_1st_topic=0;
    52ee:	1e 8a       	std	Y+22, r1	; 0x16
				for(j=0;j<topic_name_length1;j++)
    52f0:	1b 8e       	std	Y+27, r1	; 0x1b
    52f2:	72 c0       	rjmp	.+228    	; 0x53d8 <check_receiving_new_data_from_server+0x180>
				{
					if(Rec_Data[i+j]==topic1[j])
    52f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    52f6:	28 2f       	mov	r18, r24
    52f8:	30 e0       	ldi	r19, 0x00	; 0
    52fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52fc:	88 2f       	mov	r24, r24
    52fe:	90 e0       	ldi	r25, 0x00	; 0
    5300:	82 0f       	add	r24, r18
    5302:	93 1f       	adc	r25, r19
    5304:	fc 01       	movw	r30, r24
    5306:	ed 5c       	subi	r30, 0xCD	; 205
    5308:	f9 4f       	sbci	r31, 0xF9	; 249
    530a:	40 81       	ld	r20, Z
    530c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    530e:	28 2f       	mov	r18, r24
    5310:	30 e0       	ldi	r19, 0x00	; 0
    5312:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5314:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5316:	fc 01       	movw	r30, r24
    5318:	e2 0f       	add	r30, r18
    531a:	f3 1f       	adc	r31, r19
    531c:	80 81       	ld	r24, Z
    531e:	48 17       	cp	r20, r24
    5320:	09 f0       	breq	.+2      	; 0x5324 <check_receiving_new_data_from_server+0xcc>
    5322:	57 c0       	rjmp	.+174    	; 0x53d2 <check_receiving_new_data_from_server+0x17a>
					{
						correct_charracters_1st_topic++;
    5324:	8e 89       	ldd	r24, Y+22	; 0x16
    5326:	8f 5f       	subi	r24, 0xFF	; 255
    5328:	8e 8b       	std	Y+22, r24	; 0x16
						if(correct_charracters_1st_topic==topic_name_length1)
    532a:	9e 89       	ldd	r25, Y+22	; 0x16
    532c:	89 8d       	ldd	r24, Y+25	; 0x19
    532e:	98 17       	cp	r25, r24
    5330:	09 f0       	breq	.+2      	; 0x5334 <check_receiving_new_data_from_server+0xdc>
    5332:	4f c0       	rjmp	.+158    	; 0x53d2 <check_receiving_new_data_from_server+0x17a>
						{
							found_topic=TRUE;
    5334:	81 e0       	ldi	r24, 0x01	; 1
    5336:	8b 8b       	std	Y+19, r24	; 0x13

							k=0;
    5338:	1a 8e       	std	Y+26, r1	; 0x1a
    533a:	37 c0       	rjmp	.+110    	; 0x53aa <check_receiving_new_data_from_server+0x152>
							while((Rec_Data[i+j]!='\0')&&(k<topic_data_size))
							{
								j++;
    533c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    533e:	8f 5f       	subi	r24, 0xFF	; 255
    5340:	8b 8f       	std	Y+27, r24	; 0x1b
								if((Rec_Data[i+j]==0x30)||(Rec_Data[i+j]==0x31))
    5342:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5344:	28 2f       	mov	r18, r24
    5346:	30 e0       	ldi	r19, 0x00	; 0
    5348:	8b 8d       	ldd	r24, Y+27	; 0x1b
    534a:	88 2f       	mov	r24, r24
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	82 0f       	add	r24, r18
    5350:	93 1f       	adc	r25, r19
    5352:	fc 01       	movw	r30, r24
    5354:	ed 5c       	subi	r30, 0xCD	; 205
    5356:	f9 4f       	sbci	r31, 0xF9	; 249
    5358:	80 81       	ld	r24, Z
    535a:	80 33       	cpi	r24, 0x30	; 48
    535c:	71 f0       	breq	.+28     	; 0x537a <check_receiving_new_data_from_server+0x122>
    535e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5360:	28 2f       	mov	r18, r24
    5362:	30 e0       	ldi	r19, 0x00	; 0
    5364:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5366:	88 2f       	mov	r24, r24
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	82 0f       	add	r24, r18
    536c:	93 1f       	adc	r25, r19
    536e:	fc 01       	movw	r30, r24
    5370:	ed 5c       	subi	r30, 0xCD	; 205
    5372:	f9 4f       	sbci	r31, 0xF9	; 249
    5374:	80 81       	ld	r24, Z
    5376:	81 33       	cpi	r24, 0x31	; 49
    5378:	c1 f4       	brne	.+48     	; 0x53aa <check_receiving_new_data_from_server+0x152>
								topics->topic1_data[k++]=Rec_Data[i+j];
    537a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    537c:	48 2f       	mov	r20, r24
    537e:	50 e0       	ldi	r21, 0x00	; 0
    5380:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5382:	28 2f       	mov	r18, r24
    5384:	30 e0       	ldi	r19, 0x00	; 0
    5386:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5388:	88 2f       	mov	r24, r24
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	82 0f       	add	r24, r18
    538e:	93 1f       	adc	r25, r19
    5390:	fc 01       	movw	r30, r24
    5392:	ed 5c       	subi	r30, 0xCD	; 205
    5394:	f9 4f       	sbci	r31, 0xF9	; 249
    5396:	20 81       	ld	r18, Z
    5398:	8b a1       	ldd	r24, Y+35	; 0x23
    539a:	9c a1       	ldd	r25, Y+36	; 0x24
    539c:	fc 01       	movw	r30, r24
    539e:	e4 0f       	add	r30, r20
    53a0:	f5 1f       	adc	r31, r21
    53a2:	20 83       	st	Z, r18
    53a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    53a6:	8f 5f       	subi	r24, 0xFF	; 255
    53a8:	8a 8f       	std	Y+26, r24	; 0x1a
						if(correct_charracters_1st_topic==topic_name_length1)
						{
							found_topic=TRUE;

							k=0;
							while((Rec_Data[i+j]!='\0')&&(k<topic_data_size))
    53aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    53ac:	28 2f       	mov	r18, r24
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53b2:	88 2f       	mov	r24, r24
    53b4:	90 e0       	ldi	r25, 0x00	; 0
    53b6:	82 0f       	add	r24, r18
    53b8:	93 1f       	adc	r25, r19
    53ba:	fc 01       	movw	r30, r24
    53bc:	ed 5c       	subi	r30, 0xCD	; 205
    53be:	f9 4f       	sbci	r31, 0xF9	; 249
    53c0:	80 81       	ld	r24, Z
    53c2:	88 23       	and	r24, r24
    53c4:	21 f0       	breq	.+8      	; 0x53ce <check_receiving_new_data_from_server+0x176>
    53c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    53c8:	85 30       	cpi	r24, 0x05	; 5
    53ca:	08 f4       	brcc	.+2      	; 0x53ce <check_receiving_new_data_from_server+0x176>
    53cc:	b7 cf       	rjmp	.-146    	; 0x533c <check_receiving_new_data_from_server+0xe4>
								topics->topic1_data[k++]=Rec_Data[i+j];
							}



							Clear_REC_Buffer();
    53ce:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
		{

			if(topic1!="0000")
			{
				correct_charracters_1st_topic=0;
				for(j=0;j<topic_name_length1;j++)
    53d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53d4:	8f 5f       	subi	r24, 0xFF	; 255
    53d6:	8b 8f       	std	Y+27, r24	; 0x1b
    53d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    53da:	89 8d       	ldd	r24, Y+25	; 0x19
    53dc:	98 17       	cp	r25, r24
    53de:	08 f4       	brcc	.+2      	; 0x53e2 <check_receiving_new_data_from_server+0x18a>
    53e0:	89 cf       	rjmp	.-238    	; 0x52f4 <check_receiving_new_data_from_server+0x9c>
					}


				}
			}
			if(topic2!="0000")
    53e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    53e4:	98 a1       	ldd	r25, Y+32	; 0x20
    53e6:	23 e0       	ldi	r18, 0x03	; 3
    53e8:	89 37       	cpi	r24, 0x79	; 121
    53ea:	92 07       	cpc	r25, r18
    53ec:	09 f4       	brne	.+2      	; 0x53f0 <check_receiving_new_data_from_server+0x198>
    53ee:	7b c0       	rjmp	.+246    	; 0x54e6 <check_receiving_new_data_from_server+0x28e>
			{
				correct_charracters_2nd_topic=0;
    53f0:	1d 8a       	std	Y+21, r1	; 0x15
				for(j=0;j<topic_name_length2;j++)
    53f2:	1b 8e       	std	Y+27, r1	; 0x1b
    53f4:	73 c0       	rjmp	.+230    	; 0x54dc <check_receiving_new_data_from_server+0x284>
				{

					if(Rec_Data[i+j]==topic2[j])
    53f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    53f8:	28 2f       	mov	r18, r24
    53fa:	30 e0       	ldi	r19, 0x00	; 0
    53fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53fe:	88 2f       	mov	r24, r24
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	82 0f       	add	r24, r18
    5404:	93 1f       	adc	r25, r19
    5406:	fc 01       	movw	r30, r24
    5408:	ed 5c       	subi	r30, 0xCD	; 205
    540a:	f9 4f       	sbci	r31, 0xF9	; 249
    540c:	40 81       	ld	r20, Z
    540e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5410:	28 2f       	mov	r18, r24
    5412:	30 e0       	ldi	r19, 0x00	; 0
    5414:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5416:	98 a1       	ldd	r25, Y+32	; 0x20
    5418:	fc 01       	movw	r30, r24
    541a:	e2 0f       	add	r30, r18
    541c:	f3 1f       	adc	r31, r19
    541e:	80 81       	ld	r24, Z
    5420:	48 17       	cp	r20, r24
    5422:	09 f0       	breq	.+2      	; 0x5426 <check_receiving_new_data_from_server+0x1ce>
    5424:	58 c0       	rjmp	.+176    	; 0x54d6 <check_receiving_new_data_from_server+0x27e>
					{
						correct_charracters_2nd_topic++;
    5426:	8d 89       	ldd	r24, Y+21	; 0x15
    5428:	8f 5f       	subi	r24, 0xFF	; 255
    542a:	8d 8b       	std	Y+21, r24	; 0x15
						if(correct_charracters_2nd_topic==topic_name_length2)
    542c:	9d 89       	ldd	r25, Y+21	; 0x15
    542e:	88 8d       	ldd	r24, Y+24	; 0x18
    5430:	98 17       	cp	r25, r24
    5432:	09 f0       	breq	.+2      	; 0x5436 <check_receiving_new_data_from_server+0x1de>
    5434:	50 c0       	rjmp	.+160    	; 0x54d6 <check_receiving_new_data_from_server+0x27e>
						{
							found_topic=TRUE;
    5436:	81 e0       	ldi	r24, 0x01	; 1
    5438:	8b 8b       	std	Y+19, r24	; 0x13

							k=0;
    543a:	1a 8e       	std	Y+26, r1	; 0x1a
    543c:	38 c0       	rjmp	.+112    	; 0x54ae <check_receiving_new_data_from_server+0x256>
							while((Rec_Data[i+j]!='\0')&&(k<topic_data_size))
							{
								j++;
    543e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5440:	8f 5f       	subi	r24, 0xFF	; 255
    5442:	8b 8f       	std	Y+27, r24	; 0x1b
								if((Rec_Data[i+j]==0x30)||(Rec_Data[i+j]==0x31))
    5444:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5446:	28 2f       	mov	r18, r24
    5448:	30 e0       	ldi	r19, 0x00	; 0
    544a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    544c:	88 2f       	mov	r24, r24
    544e:	90 e0       	ldi	r25, 0x00	; 0
    5450:	82 0f       	add	r24, r18
    5452:	93 1f       	adc	r25, r19
    5454:	fc 01       	movw	r30, r24
    5456:	ed 5c       	subi	r30, 0xCD	; 205
    5458:	f9 4f       	sbci	r31, 0xF9	; 249
    545a:	80 81       	ld	r24, Z
    545c:	80 33       	cpi	r24, 0x30	; 48
    545e:	71 f0       	breq	.+28     	; 0x547c <check_receiving_new_data_from_server+0x224>
    5460:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5462:	28 2f       	mov	r18, r24
    5464:	30 e0       	ldi	r19, 0x00	; 0
    5466:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5468:	88 2f       	mov	r24, r24
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	82 0f       	add	r24, r18
    546e:	93 1f       	adc	r25, r19
    5470:	fc 01       	movw	r30, r24
    5472:	ed 5c       	subi	r30, 0xCD	; 205
    5474:	f9 4f       	sbci	r31, 0xF9	; 249
    5476:	80 81       	ld	r24, Z
    5478:	81 33       	cpi	r24, 0x31	; 49
    547a:	c9 f4       	brne	.+50     	; 0x54ae <check_receiving_new_data_from_server+0x256>
								topics->topic2_data[k++]=Rec_Data[i+j];
    547c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    547e:	48 2f       	mov	r20, r24
    5480:	50 e0       	ldi	r21, 0x00	; 0
    5482:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5484:	28 2f       	mov	r18, r24
    5486:	30 e0       	ldi	r19, 0x00	; 0
    5488:	8b 8d       	ldd	r24, Y+27	; 0x1b
    548a:	88 2f       	mov	r24, r24
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	82 0f       	add	r24, r18
    5490:	93 1f       	adc	r25, r19
    5492:	fc 01       	movw	r30, r24
    5494:	ed 5c       	subi	r30, 0xCD	; 205
    5496:	f9 4f       	sbci	r31, 0xF9	; 249
    5498:	20 81       	ld	r18, Z
    549a:	8b a1       	ldd	r24, Y+35	; 0x23
    549c:	9c a1       	ldd	r25, Y+36	; 0x24
    549e:	84 0f       	add	r24, r20
    54a0:	95 1f       	adc	r25, r21
    54a2:	fc 01       	movw	r30, r24
    54a4:	35 96       	adiw	r30, 0x05	; 5
    54a6:	20 83       	st	Z, r18
    54a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    54aa:	8f 5f       	subi	r24, 0xFF	; 255
    54ac:	8a 8f       	std	Y+26, r24	; 0x1a
						if(correct_charracters_2nd_topic==topic_name_length2)
						{
							found_topic=TRUE;

							k=0;
							while((Rec_Data[i+j]!='\0')&&(k<topic_data_size))
    54ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    54b0:	28 2f       	mov	r18, r24
    54b2:	30 e0       	ldi	r19, 0x00	; 0
    54b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54b6:	88 2f       	mov	r24, r24
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	82 0f       	add	r24, r18
    54bc:	93 1f       	adc	r25, r19
    54be:	fc 01       	movw	r30, r24
    54c0:	ed 5c       	subi	r30, 0xCD	; 205
    54c2:	f9 4f       	sbci	r31, 0xF9	; 249
    54c4:	80 81       	ld	r24, Z
    54c6:	88 23       	and	r24, r24
    54c8:	21 f0       	breq	.+8      	; 0x54d2 <check_receiving_new_data_from_server+0x27a>
    54ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    54cc:	85 30       	cpi	r24, 0x05	; 5
    54ce:	08 f4       	brcc	.+2      	; 0x54d2 <check_receiving_new_data_from_server+0x27a>
    54d0:	b6 cf       	rjmp	.-148    	; 0x543e <check_receiving_new_data_from_server+0x1e6>
							}




							Clear_REC_Buffer();
    54d2:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
				}
			}
			if(topic2!="0000")
			{
				correct_charracters_2nd_topic=0;
				for(j=0;j<topic_name_length2;j++)
    54d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54d8:	8f 5f       	subi	r24, 0xFF	; 255
    54da:	8b 8f       	std	Y+27, r24	; 0x1b
    54dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    54de:	88 8d       	ldd	r24, Y+24	; 0x18
    54e0:	98 17       	cp	r25, r24
    54e2:	08 f4       	brcc	.+2      	; 0x54e6 <check_receiving_new_data_from_server+0x28e>
    54e4:	88 cf       	rjmp	.-240    	; 0x53f6 <check_receiving_new_data_from_server+0x19e>
				}


			}

			if(topic3!="0000")
    54e6:	89 a1       	ldd	r24, Y+33	; 0x21
    54e8:	9a a1       	ldd	r25, Y+34	; 0x22
    54ea:	23 e0       	ldi	r18, 0x03	; 3
    54ec:	89 37       	cpi	r24, 0x79	; 121
    54ee:	92 07       	cpc	r25, r18
    54f0:	09 f4       	brne	.+2      	; 0x54f4 <check_receiving_new_data_from_server+0x29c>
    54f2:	7b c0       	rjmp	.+246    	; 0x55ea <check_receiving_new_data_from_server+0x392>
			{
				correct_charracters_3rd_topic=0;
    54f4:	1c 8a       	std	Y+20, r1	; 0x14
				for(j=0;j<topic_name_length3;j++)
    54f6:	1b 8e       	std	Y+27, r1	; 0x1b
    54f8:	73 c0       	rjmp	.+230    	; 0x55e0 <check_receiving_new_data_from_server+0x388>
				{

					if(Rec_Data[i+j]==topic3[j])
    54fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    54fc:	28 2f       	mov	r18, r24
    54fe:	30 e0       	ldi	r19, 0x00	; 0
    5500:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5502:	88 2f       	mov	r24, r24
    5504:	90 e0       	ldi	r25, 0x00	; 0
    5506:	82 0f       	add	r24, r18
    5508:	93 1f       	adc	r25, r19
    550a:	fc 01       	movw	r30, r24
    550c:	ed 5c       	subi	r30, 0xCD	; 205
    550e:	f9 4f       	sbci	r31, 0xF9	; 249
    5510:	40 81       	ld	r20, Z
    5512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5514:	28 2f       	mov	r18, r24
    5516:	30 e0       	ldi	r19, 0x00	; 0
    5518:	89 a1       	ldd	r24, Y+33	; 0x21
    551a:	9a a1       	ldd	r25, Y+34	; 0x22
    551c:	fc 01       	movw	r30, r24
    551e:	e2 0f       	add	r30, r18
    5520:	f3 1f       	adc	r31, r19
    5522:	80 81       	ld	r24, Z
    5524:	48 17       	cp	r20, r24
    5526:	09 f0       	breq	.+2      	; 0x552a <check_receiving_new_data_from_server+0x2d2>
    5528:	58 c0       	rjmp	.+176    	; 0x55da <check_receiving_new_data_from_server+0x382>
					{
						correct_charracters_3rd_topic++;
    552a:	8c 89       	ldd	r24, Y+20	; 0x14
    552c:	8f 5f       	subi	r24, 0xFF	; 255
    552e:	8c 8b       	std	Y+20, r24	; 0x14
						if(correct_charracters_3rd_topic==topic_name_length3)
    5530:	9c 89       	ldd	r25, Y+20	; 0x14
    5532:	8f 89       	ldd	r24, Y+23	; 0x17
    5534:	98 17       	cp	r25, r24
    5536:	09 f0       	breq	.+2      	; 0x553a <check_receiving_new_data_from_server+0x2e2>
    5538:	50 c0       	rjmp	.+160    	; 0x55da <check_receiving_new_data_from_server+0x382>
						{
							found_topic=TRUE;
    553a:	81 e0       	ldi	r24, 0x01	; 1
    553c:	8b 8b       	std	Y+19, r24	; 0x13
							k=0;
    553e:	1a 8e       	std	Y+26, r1	; 0x1a
    5540:	38 c0       	rjmp	.+112    	; 0x55b2 <check_receiving_new_data_from_server+0x35a>
							while((Rec_Data[i+j]!='\0')&&(k<topic_data_size))
							{
								j++;
    5542:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5544:	8f 5f       	subi	r24, 0xFF	; 255
    5546:	8b 8f       	std	Y+27, r24	; 0x1b
								if((Rec_Data[i+j]>=0x30)&&(Rec_Data[i+j]<=0x39))
    5548:	8c 8d       	ldd	r24, Y+28	; 0x1c
    554a:	28 2f       	mov	r18, r24
    554c:	30 e0       	ldi	r19, 0x00	; 0
    554e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5550:	88 2f       	mov	r24, r24
    5552:	90 e0       	ldi	r25, 0x00	; 0
    5554:	82 0f       	add	r24, r18
    5556:	93 1f       	adc	r25, r19
    5558:	fc 01       	movw	r30, r24
    555a:	ed 5c       	subi	r30, 0xCD	; 205
    555c:	f9 4f       	sbci	r31, 0xF9	; 249
    555e:	80 81       	ld	r24, Z
    5560:	80 33       	cpi	r24, 0x30	; 48
    5562:	38 f1       	brcs	.+78     	; 0x55b2 <check_receiving_new_data_from_server+0x35a>
    5564:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5566:	28 2f       	mov	r18, r24
    5568:	30 e0       	ldi	r19, 0x00	; 0
    556a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    556c:	88 2f       	mov	r24, r24
    556e:	90 e0       	ldi	r25, 0x00	; 0
    5570:	82 0f       	add	r24, r18
    5572:	93 1f       	adc	r25, r19
    5574:	fc 01       	movw	r30, r24
    5576:	ed 5c       	subi	r30, 0xCD	; 205
    5578:	f9 4f       	sbci	r31, 0xF9	; 249
    557a:	80 81       	ld	r24, Z
    557c:	8a 33       	cpi	r24, 0x3A	; 58
    557e:	c8 f4       	brcc	.+50     	; 0x55b2 <check_receiving_new_data_from_server+0x35a>
								topics->topic3_data[k++]=Rec_Data[i+j];
    5580:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5582:	48 2f       	mov	r20, r24
    5584:	50 e0       	ldi	r21, 0x00	; 0
    5586:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5588:	28 2f       	mov	r18, r24
    558a:	30 e0       	ldi	r19, 0x00	; 0
    558c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    558e:	88 2f       	mov	r24, r24
    5590:	90 e0       	ldi	r25, 0x00	; 0
    5592:	82 0f       	add	r24, r18
    5594:	93 1f       	adc	r25, r19
    5596:	fc 01       	movw	r30, r24
    5598:	ed 5c       	subi	r30, 0xCD	; 205
    559a:	f9 4f       	sbci	r31, 0xF9	; 249
    559c:	20 81       	ld	r18, Z
    559e:	8b a1       	ldd	r24, Y+35	; 0x23
    55a0:	9c a1       	ldd	r25, Y+36	; 0x24
    55a2:	84 0f       	add	r24, r20
    55a4:	95 1f       	adc	r25, r21
    55a6:	fc 01       	movw	r30, r24
    55a8:	3a 96       	adiw	r30, 0x0a	; 10
    55aa:	20 83       	st	Z, r18
    55ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    55ae:	8f 5f       	subi	r24, 0xFF	; 255
    55b0:	8a 8f       	std	Y+26, r24	; 0x1a
						correct_charracters_3rd_topic++;
						if(correct_charracters_3rd_topic==topic_name_length3)
						{
							found_topic=TRUE;
							k=0;
							while((Rec_Data[i+j]!='\0')&&(k<topic_data_size))
    55b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    55b4:	28 2f       	mov	r18, r24
    55b6:	30 e0       	ldi	r19, 0x00	; 0
    55b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55ba:	88 2f       	mov	r24, r24
    55bc:	90 e0       	ldi	r25, 0x00	; 0
    55be:	82 0f       	add	r24, r18
    55c0:	93 1f       	adc	r25, r19
    55c2:	fc 01       	movw	r30, r24
    55c4:	ed 5c       	subi	r30, 0xCD	; 205
    55c6:	f9 4f       	sbci	r31, 0xF9	; 249
    55c8:	80 81       	ld	r24, Z
    55ca:	88 23       	and	r24, r24
    55cc:	21 f0       	breq	.+8      	; 0x55d6 <check_receiving_new_data_from_server+0x37e>
    55ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    55d0:	85 30       	cpi	r24, 0x05	; 5
    55d2:	08 f4       	brcc	.+2      	; 0x55d6 <check_receiving_new_data_from_server+0x37e>
    55d4:	b6 cf       	rjmp	.-148    	; 0x5542 <check_receiving_new_data_from_server+0x2ea>
								j++;
								if((Rec_Data[i+j]>=0x30)&&(Rec_Data[i+j]<=0x39))
								topics->topic3_data[k++]=Rec_Data[i+j];
							}

							Clear_REC_Buffer();
    55d6:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
			}

			if(topic3!="0000")
			{
				correct_charracters_3rd_topic=0;
				for(j=0;j<topic_name_length3;j++)
    55da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55dc:	8f 5f       	subi	r24, 0xFF	; 255
    55de:	8b 8f       	std	Y+27, r24	; 0x1b
    55e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    55e2:	8f 89       	ldd	r24, Y+23	; 0x17
    55e4:	98 17       	cp	r25, r24
    55e6:	08 f4       	brcc	.+2      	; 0x55ea <check_receiving_new_data_from_server+0x392>
    55e8:	88 cf       	rjmp	.-240    	; 0x54fa <check_receiving_new_data_from_server+0x2a2>
						}
					}
				}
			}

			if(found_topic==TRUE)
    55ea:	8b 89       	ldd	r24, Y+19	; 0x13
    55ec:	88 23       	and	r24, r24
    55ee:	19 f0       	breq	.+6      	; 0x55f6 <check_receiving_new_data_from_server+0x39e>
			{
				return TRUE;
    55f0:	81 e0       	ldi	r24, 0x01	; 1
    55f2:	8d a3       	std	Y+37, r24	; 0x25
    55f4:	83 c0       	rjmp	.+262    	; 0x56fc <check_receiving_new_data_from_server+0x4a4>
	char *ptr_detect_new_data=strstr(Rec_Data,"\r\n+IPD");
	char *ptr_detect_lost_connection=strstr(Rec_Data,"CLOSED\r\n");
	if(ptr_detect_new_data!=0)
	{

		for(i=0;i<100;i++)
    55f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    55f8:	8f 5f       	subi	r24, 0xFF	; 255
    55fa:	8c 8f       	std	Y+28, r24	; 0x1c
    55fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    55fe:	84 36       	cpi	r24, 0x64	; 100
    5600:	08 f4       	brcc	.+2      	; 0x5604 <check_receiving_new_data_from_server+0x3ac>
    5602:	6e ce       	rjmp	.-804    	; 0x52e0 <check_receiving_new_data_from_server+0x88>
			}
		}

	}

	if(ptr_detect_lost_connection!=0)
    5604:	8f 85       	ldd	r24, Y+15	; 0x0f
    5606:	98 89       	ldd	r25, Y+16	; 0x10
    5608:	00 97       	sbiw	r24, 0x00	; 0
    560a:	09 f4       	brne	.+2      	; 0x560e <check_receiving_new_data_from_server+0x3b6>
    560c:	76 c0       	rjmp	.+236    	; 0x56fa <check_receiving_new_data_from_server+0x4a2>
    560e:	80 e0       	ldi	r24, 0x00	; 0
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	aa e7       	ldi	r26, 0x7A	; 122
    5614:	b5 e4       	ldi	r27, 0x45	; 69
    5616:	8b 87       	std	Y+11, r24	; 0x0b
    5618:	9c 87       	std	Y+12, r25	; 0x0c
    561a:	ad 87       	std	Y+13, r26	; 0x0d
    561c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    561e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5620:	7c 85       	ldd	r23, Y+12	; 0x0c
    5622:	8d 85       	ldd	r24, Y+13	; 0x0d
    5624:	9e 85       	ldd	r25, Y+14	; 0x0e
    5626:	20 e0       	ldi	r18, 0x00	; 0
    5628:	30 e0       	ldi	r19, 0x00	; 0
    562a:	4a ef       	ldi	r20, 0xFA	; 250
    562c:	54 e4       	ldi	r21, 0x44	; 68
    562e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5632:	dc 01       	movw	r26, r24
    5634:	cb 01       	movw	r24, r22
    5636:	8f 83       	std	Y+7, r24	; 0x07
    5638:	98 87       	std	Y+8, r25	; 0x08
    563a:	a9 87       	std	Y+9, r26	; 0x09
    563c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    563e:	6f 81       	ldd	r22, Y+7	; 0x07
    5640:	78 85       	ldd	r23, Y+8	; 0x08
    5642:	89 85       	ldd	r24, Y+9	; 0x09
    5644:	9a 85       	ldd	r25, Y+10	; 0x0a
    5646:	20 e0       	ldi	r18, 0x00	; 0
    5648:	30 e0       	ldi	r19, 0x00	; 0
    564a:	40 e8       	ldi	r20, 0x80	; 128
    564c:	5f e3       	ldi	r21, 0x3F	; 63
    564e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5652:	88 23       	and	r24, r24
    5654:	2c f4       	brge	.+10     	; 0x5660 <check_receiving_new_data_from_server+0x408>
		__ticks = 1;
    5656:	81 e0       	ldi	r24, 0x01	; 1
    5658:	90 e0       	ldi	r25, 0x00	; 0
    565a:	9e 83       	std	Y+6, r25	; 0x06
    565c:	8d 83       	std	Y+5, r24	; 0x05
    565e:	3f c0       	rjmp	.+126    	; 0x56de <check_receiving_new_data_from_server+0x486>
	else if (__tmp > 65535)
    5660:	6f 81       	ldd	r22, Y+7	; 0x07
    5662:	78 85       	ldd	r23, Y+8	; 0x08
    5664:	89 85       	ldd	r24, Y+9	; 0x09
    5666:	9a 85       	ldd	r25, Y+10	; 0x0a
    5668:	20 e0       	ldi	r18, 0x00	; 0
    566a:	3f ef       	ldi	r19, 0xFF	; 255
    566c:	4f e7       	ldi	r20, 0x7F	; 127
    566e:	57 e4       	ldi	r21, 0x47	; 71
    5670:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5674:	18 16       	cp	r1, r24
    5676:	4c f5       	brge	.+82     	; 0x56ca <check_receiving_new_data_from_server+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5678:	6b 85       	ldd	r22, Y+11	; 0x0b
    567a:	7c 85       	ldd	r23, Y+12	; 0x0c
    567c:	8d 85       	ldd	r24, Y+13	; 0x0d
    567e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5680:	20 e0       	ldi	r18, 0x00	; 0
    5682:	30 e0       	ldi	r19, 0x00	; 0
    5684:	40 e2       	ldi	r20, 0x20	; 32
    5686:	51 e4       	ldi	r21, 0x41	; 65
    5688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    568c:	dc 01       	movw	r26, r24
    568e:	cb 01       	movw	r24, r22
    5690:	bc 01       	movw	r22, r24
    5692:	cd 01       	movw	r24, r26
    5694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5698:	dc 01       	movw	r26, r24
    569a:	cb 01       	movw	r24, r22
    569c:	9e 83       	std	Y+6, r25	; 0x06
    569e:	8d 83       	std	Y+5, r24	; 0x05
    56a0:	0f c0       	rjmp	.+30     	; 0x56c0 <check_receiving_new_data_from_server+0x468>
    56a2:	88 ec       	ldi	r24, 0xC8	; 200
    56a4:	90 e0       	ldi	r25, 0x00	; 0
    56a6:	9c 83       	std	Y+4, r25	; 0x04
    56a8:	8b 83       	std	Y+3, r24	; 0x03
    56aa:	8b 81       	ldd	r24, Y+3	; 0x03
    56ac:	9c 81       	ldd	r25, Y+4	; 0x04
    56ae:	01 97       	sbiw	r24, 0x01	; 1
    56b0:	f1 f7       	brne	.-4      	; 0x56ae <check_receiving_new_data_from_server+0x456>
    56b2:	9c 83       	std	Y+4, r25	; 0x04
    56b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56b6:	8d 81       	ldd	r24, Y+5	; 0x05
    56b8:	9e 81       	ldd	r25, Y+6	; 0x06
    56ba:	01 97       	sbiw	r24, 0x01	; 1
    56bc:	9e 83       	std	Y+6, r25	; 0x06
    56be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56c0:	8d 81       	ldd	r24, Y+5	; 0x05
    56c2:	9e 81       	ldd	r25, Y+6	; 0x06
    56c4:	00 97       	sbiw	r24, 0x00	; 0
    56c6:	69 f7       	brne	.-38     	; 0x56a2 <check_receiving_new_data_from_server+0x44a>
    56c8:	14 c0       	rjmp	.+40     	; 0x56f2 <check_receiving_new_data_from_server+0x49a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56ca:	6f 81       	ldd	r22, Y+7	; 0x07
    56cc:	78 85       	ldd	r23, Y+8	; 0x08
    56ce:	89 85       	ldd	r24, Y+9	; 0x09
    56d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    56d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56d6:	dc 01       	movw	r26, r24
    56d8:	cb 01       	movw	r24, r22
    56da:	9e 83       	std	Y+6, r25	; 0x06
    56dc:	8d 83       	std	Y+5, r24	; 0x05
    56de:	8d 81       	ldd	r24, Y+5	; 0x05
    56e0:	9e 81       	ldd	r25, Y+6	; 0x06
    56e2:	9a 83       	std	Y+2, r25	; 0x02
    56e4:	89 83       	std	Y+1, r24	; 0x01
    56e6:	89 81       	ldd	r24, Y+1	; 0x01
    56e8:	9a 81       	ldd	r25, Y+2	; 0x02
    56ea:	01 97       	sbiw	r24, 0x01	; 1
    56ec:	f1 f7       	brne	.-4      	; 0x56ea <check_receiving_new_data_from_server+0x492>
    56ee:	9a 83       	std	Y+2, r25	; 0x02
    56f0:	89 83       	std	Y+1, r24	; 0x01
	{

		_delay_ms(4000);
		Clear_REC_Buffer();
    56f2:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
		ESP_error_handler();
    56f6:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <ESP_error_handler>


	}

	return FALSE;
    56fa:	1d a2       	std	Y+37, r1	; 0x25
    56fc:	8d a1       	ldd	r24, Y+37	; 0x25

}
    56fe:	a5 96       	adiw	r28, 0x25	; 37
    5700:	0f b6       	in	r0, 0x3f	; 63
    5702:	f8 94       	cli
    5704:	de bf       	out	0x3e, r29	; 62
    5706:	0f be       	out	0x3f, r0	; 63
    5708:	cd bf       	out	0x3d, r28	; 61
    570a:	cf 91       	pop	r28
    570c:	df 91       	pop	r29
    570e:	08 95       	ret

00005710 <main>:
#include "HAL/EF_LCD.h"



int main()
{
    5710:	df 93       	push	r29
    5712:	cf 93       	push	r28
    5714:	cd b7       	in	r28, 0x3d	; 61
    5716:	de b7       	in	r29, 0x3e	; 62
    5718:	a1 97       	sbiw	r28, 0x21	; 33
    571a:	0f b6       	in	r0, 0x3f	; 63
    571c:	f8 94       	cli
    571e:	de bf       	out	0x3e, r29	; 62
    5720:	0f be       	out	0x3f, r0	; 63
    5722:	cd bf       	out	0x3d, r28	; 61
	unsigned int i=0;
    5724:	1a 8a       	std	Y+18, r1	; 0x12
    5726:	19 8a       	std	Y+17, r1	; 0x11
	char temp_value=22,k=0;
    5728:	86 e1       	ldi	r24, 0x16	; 22
    572a:	88 8b       	std	Y+16, r24	; 0x10
    572c:	1f 86       	std	Y+15, r1	; 0x0f
	data_from_server topics_data;

	ADC_init();
    572e:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>
	DDRD |=(1<<PD5)|(1<<PD4)|(1<<PD7)|(1<<PD6);
    5732:	a1 e3       	ldi	r26, 0x31	; 49
    5734:	b0 e0       	ldi	r27, 0x00	; 0
    5736:	e1 e3       	ldi	r30, 0x31	; 49
    5738:	f0 e0       	ldi	r31, 0x00	; 0
    573a:	80 81       	ld	r24, Z
    573c:	80 6f       	ori	r24, 0xF0	; 240
    573e:	8c 93       	st	X, r24
	PORTD |=(1<<PD4);
    5740:	a2 e3       	ldi	r26, 0x32	; 50
    5742:	b0 e0       	ldi	r27, 0x00	; 0
    5744:	e2 e3       	ldi	r30, 0x32	; 50
    5746:	f0 e0       	ldi	r31, 0x00	; 0
    5748:	80 81       	ld	r24, Z
    574a:	80 61       	ori	r24, 0x10	; 16
    574c:	8c 93       	st	X, r24
	PORTD |=(1<<PD5);
    574e:	a2 e3       	ldi	r26, 0x32	; 50
    5750:	b0 e0       	ldi	r27, 0x00	; 0
    5752:	e2 e3       	ldi	r30, 0x32	; 50
    5754:	f0 e0       	ldi	r31, 0x00	; 0
    5756:	80 81       	ld	r24, Z
    5758:	80 62       	ori	r24, 0x20	; 32
    575a:	8c 93       	st	X, r24

	sei();
    575c:	78 94       	sei

	EF_void_LCD_init();
    575e:	0e 94 1a 08 	call	0x1034	; 0x1034 <EF_void_LCD_init>
	EF_void_LCD_Clear_then_print("start");
    5762:	8e e7       	ldi	r24, 0x7E	; 126
    5764:	93 e0       	ldi	r25, 0x03	; 3
    5766:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>

	ESP_init();
    576a:	0e 94 94 17 	call	0x2f28	; 0x2f28 <ESP_init>
    576e:	06 c0       	rjmp	.+12     	; 0x577c <main+0x6c>

	while(!ESP_connect_to_AP(WIFI_USER_NAME,WIFI_PASSWORD))
	{
		EF_void_LCD_Clear_then_print("ESP Not Connected to AP");
    5770:	84 e8       	ldi	r24, 0x84	; 132
    5772:	93 e0       	ldi	r25, 0x03	; 3
    5774:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
		Clear_REC_Buffer();
    5778:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
	EF_void_LCD_init();
	EF_void_LCD_Clear_then_print("start");

	ESP_init();

	while(!ESP_connect_to_AP(WIFI_USER_NAME,WIFI_PASSWORD))
    577c:	8c e9       	ldi	r24, 0x9C	; 156
    577e:	93 e0       	ldi	r25, 0x03	; 3
    5780:	26 ea       	ldi	r18, 0xA6	; 166
    5782:	33 e0       	ldi	r19, 0x03	; 3
    5784:	b9 01       	movw	r22, r18
    5786:	0e 94 2e 1c 	call	0x385c	; 0x385c <ESP_connect_to_AP>
    578a:	98 2f       	mov	r25, r24
    578c:	81 e0       	ldi	r24, 0x01	; 1
    578e:	89 27       	eor	r24, r25
    5790:	88 23       	and	r24, r24
    5792:	71 f7       	brne	.-36     	; 0x5770 <main+0x60>
	{
		EF_void_LCD_Clear_then_print("ESP Not Connected to AP");
		Clear_REC_Buffer();
	};
	EF_void_LCD_Clear_then_print("ESP Connected to AP");
    5794:	8f ea       	ldi	r24, 0xAF	; 175
    5796:	93 e0       	ldi	r25, 0x03	; 3
    5798:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
    579c:	06 c0       	rjmp	.+12     	; 0x57aa <main+0x9a>

	while(!ESP_open_socket(CONNECTION_TYPE,SERVER_IP, SERVER_PORT))
	{
		EF_void_LCD_Clear_then_print("MQTT couldn't Open Socket");
    579e:	83 ec       	ldi	r24, 0xC3	; 195
    57a0:	93 e0       	ldi	r25, 0x03	; 3
    57a2:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
		Clear_REC_Buffer();
    57a6:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
		EF_void_LCD_Clear_then_print("ESP Not Connected to AP");
		Clear_REC_Buffer();
	};
	EF_void_LCD_Clear_then_print("ESP Connected to AP");

	while(!ESP_open_socket(CONNECTION_TYPE,SERVER_IP, SERVER_PORT))
    57aa:	8d ed       	ldi	r24, 0xDD	; 221
    57ac:	93 e0       	ldi	r25, 0x03	; 3
    57ae:	21 ee       	ldi	r18, 0xE1	; 225
    57b0:	33 e0       	ldi	r19, 0x03	; 3
    57b2:	4c ef       	ldi	r20, 0xFC	; 252
    57b4:	53 e0       	ldi	r21, 0x03	; 3
    57b6:	b9 01       	movw	r22, r18
    57b8:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <ESP_open_socket>
    57bc:	98 2f       	mov	r25, r24
    57be:	81 e0       	ldi	r24, 0x01	; 1
    57c0:	89 27       	eor	r24, r25
    57c2:	88 23       	and	r24, r24
    57c4:	61 f7       	brne	.-40     	; 0x579e <main+0x8e>
	{
		EF_void_LCD_Clear_then_print("MQTT couldn't Open Socket");
		Clear_REC_Buffer();
	};
	EF_void_LCD_Clear_then_print("MQTT Opened Socket");
    57c6:	81 e0       	ldi	r24, 0x01	; 1
    57c8:	94 e0       	ldi	r25, 0x04	; 4
    57ca:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
    57ce:	06 c0       	rjmp	.+12     	; 0x57dc <main+0xcc>

	while(!ESP_MQTT_connect(Client_ID,User_Name,Password))
	{
		EF_void_LCD_Clear_then_print("MQTT couldn't connect to broker");
    57d0:	84 e1       	ldi	r24, 0x14	; 20
    57d2:	94 e0       	ldi	r25, 0x04	; 4
    57d4:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
		Clear_REC_Buffer();
    57d8:	0e 94 83 17 	call	0x2f06	; 0x2f06 <Clear_REC_Buffer>
		EF_void_LCD_Clear_then_print("MQTT couldn't Open Socket");
		Clear_REC_Buffer();
	};
	EF_void_LCD_Clear_then_print("MQTT Opened Socket");

	while(!ESP_MQTT_connect(Client_ID,User_Name,Password))
    57dc:	84 e3       	ldi	r24, 0x34	; 52
    57de:	94 e0       	ldi	r25, 0x04	; 4
    57e0:	25 e4       	ldi	r18, 0x45	; 69
    57e2:	34 e0       	ldi	r19, 0x04	; 4
    57e4:	49 e6       	ldi	r20, 0x69	; 105
    57e6:	54 e0       	ldi	r21, 0x04	; 4
    57e8:	b9 01       	movw	r22, r18
    57ea:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <ESP_MQTT_connect>
    57ee:	98 2f       	mov	r25, r24
    57f0:	81 e0       	ldi	r24, 0x01	; 1
    57f2:	89 27       	eor	r24, r25
    57f4:	88 23       	and	r24, r24
    57f6:	61 f7       	brne	.-40     	; 0x57d0 <main+0xc0>
	{
		EF_void_LCD_Clear_then_print("MQTT couldn't connect to broker");
		Clear_REC_Buffer();
	};
	EF_void_LCD_Clear_then_print("MQTT connected to broker");
    57f8:	8b e6       	ldi	r24, 0x6B	; 107
    57fa:	94 e0       	ldi	r25, 0x04	; 4
    57fc:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>

	ESP_MQTT_subscribe_to_topics(subscribe_TOPIC1_NAME,subscribe_TOPIC2_NAME,subscribe_TOPIC3_NAME);
    5800:	84 e8       	ldi	r24, 0x84	; 132
    5802:	94 e0       	ldi	r25, 0x04	; 4
    5804:	2f e9       	ldi	r18, 0x9F	; 159
    5806:	34 e0       	ldi	r19, 0x04	; 4
    5808:	4a eb       	ldi	r20, 0xBA	; 186
    580a:	54 e0       	ldi	r21, 0x04	; 4
    580c:	b9 01       	movw	r22, r18
    580e:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <ESP_MQTT_subscribe_to_topics>


	memset(topics_data.topic1_data,'\0',topic_data_size);
    5812:	ce 01       	movw	r24, r28
    5814:	43 96       	adiw	r24, 0x13	; 19
    5816:	60 e0       	ldi	r22, 0x00	; 0
    5818:	70 e0       	ldi	r23, 0x00	; 0
    581a:	45 e0       	ldi	r20, 0x05	; 5
    581c:	50 e0       	ldi	r21, 0x00	; 0
    581e:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <memset>
	memset(topics_data.topic2_data,'\0',topic_data_size);
    5822:	ce 01       	movw	r24, r28
    5824:	43 96       	adiw	r24, 0x13	; 19
    5826:	05 96       	adiw	r24, 0x05	; 5
    5828:	60 e0       	ldi	r22, 0x00	; 0
    582a:	70 e0       	ldi	r23, 0x00	; 0
    582c:	45 e0       	ldi	r20, 0x05	; 5
    582e:	50 e0       	ldi	r21, 0x00	; 0
    5830:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <memset>
	memset(topics_data.topic3_data,'\0',topic_data_size);
    5834:	ce 01       	movw	r24, r28
    5836:	43 96       	adiw	r24, 0x13	; 19
    5838:	0a 96       	adiw	r24, 0x0a	; 10
    583a:	60 e0       	ldi	r22, 0x00	; 0
    583c:	70 e0       	ldi	r23, 0x00	; 0
    583e:	45 e0       	ldi	r20, 0x05	; 5
    5840:	50 e0       	ldi	r21, 0x00	; 0
    5842:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <memset>
	EF_void_LCD_Clear_then_print("System is Ready");
    5846:	89 ed       	ldi	r24, 0xD9	; 217
    5848:	94 e0       	ldi	r25, 0x04	; 4
    584a:	0e 94 26 13 	call	0x264c	; 0x264c <EF_void_LCD_Clear_then_print>
	while(1)
	{

		i++;
    584e:	89 89       	ldd	r24, Y+17	; 0x11
    5850:	9a 89       	ldd	r25, Y+18	; 0x12
    5852:	01 96       	adiw	r24, 0x01	; 1
    5854:	9a 8b       	std	Y+18, r25	; 0x12
    5856:	89 8b       	std	Y+17, r24	; 0x11
    5858:	80 e0       	ldi	r24, 0x00	; 0
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	a0 e8       	ldi	r26, 0x80	; 128
    585e:	bf e3       	ldi	r27, 0x3F	; 63
    5860:	8b 87       	std	Y+11, r24	; 0x0b
    5862:	9c 87       	std	Y+12, r25	; 0x0c
    5864:	ad 87       	std	Y+13, r26	; 0x0d
    5866:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5868:	6b 85       	ldd	r22, Y+11	; 0x0b
    586a:	7c 85       	ldd	r23, Y+12	; 0x0c
    586c:	8d 85       	ldd	r24, Y+13	; 0x0d
    586e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5870:	20 e0       	ldi	r18, 0x00	; 0
    5872:	30 e0       	ldi	r19, 0x00	; 0
    5874:	4a ef       	ldi	r20, 0xFA	; 250
    5876:	54 e4       	ldi	r21, 0x44	; 68
    5878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    587c:	dc 01       	movw	r26, r24
    587e:	cb 01       	movw	r24, r22
    5880:	8f 83       	std	Y+7, r24	; 0x07
    5882:	98 87       	std	Y+8, r25	; 0x08
    5884:	a9 87       	std	Y+9, r26	; 0x09
    5886:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5888:	6f 81       	ldd	r22, Y+7	; 0x07
    588a:	78 85       	ldd	r23, Y+8	; 0x08
    588c:	89 85       	ldd	r24, Y+9	; 0x09
    588e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5890:	20 e0       	ldi	r18, 0x00	; 0
    5892:	30 e0       	ldi	r19, 0x00	; 0
    5894:	40 e8       	ldi	r20, 0x80	; 128
    5896:	5f e3       	ldi	r21, 0x3F	; 63
    5898:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    589c:	88 23       	and	r24, r24
    589e:	2c f4       	brge	.+10     	; 0x58aa <main+0x19a>
		__ticks = 1;
    58a0:	81 e0       	ldi	r24, 0x01	; 1
    58a2:	90 e0       	ldi	r25, 0x00	; 0
    58a4:	9e 83       	std	Y+6, r25	; 0x06
    58a6:	8d 83       	std	Y+5, r24	; 0x05
    58a8:	3f c0       	rjmp	.+126    	; 0x5928 <main+0x218>
	else if (__tmp > 65535)
    58aa:	6f 81       	ldd	r22, Y+7	; 0x07
    58ac:	78 85       	ldd	r23, Y+8	; 0x08
    58ae:	89 85       	ldd	r24, Y+9	; 0x09
    58b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    58b2:	20 e0       	ldi	r18, 0x00	; 0
    58b4:	3f ef       	ldi	r19, 0xFF	; 255
    58b6:	4f e7       	ldi	r20, 0x7F	; 127
    58b8:	57 e4       	ldi	r21, 0x47	; 71
    58ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58be:	18 16       	cp	r1, r24
    58c0:	4c f5       	brge	.+82     	; 0x5914 <main+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    58c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    58c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    58c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    58ca:	20 e0       	ldi	r18, 0x00	; 0
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	40 e2       	ldi	r20, 0x20	; 32
    58d0:	51 e4       	ldi	r21, 0x41	; 65
    58d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58d6:	dc 01       	movw	r26, r24
    58d8:	cb 01       	movw	r24, r22
    58da:	bc 01       	movw	r22, r24
    58dc:	cd 01       	movw	r24, r26
    58de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58e2:	dc 01       	movw	r26, r24
    58e4:	cb 01       	movw	r24, r22
    58e6:	9e 83       	std	Y+6, r25	; 0x06
    58e8:	8d 83       	std	Y+5, r24	; 0x05
    58ea:	0f c0       	rjmp	.+30     	; 0x590a <main+0x1fa>
    58ec:	88 ec       	ldi	r24, 0xC8	; 200
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	9c 83       	std	Y+4, r25	; 0x04
    58f2:	8b 83       	std	Y+3, r24	; 0x03
    58f4:	8b 81       	ldd	r24, Y+3	; 0x03
    58f6:	9c 81       	ldd	r25, Y+4	; 0x04
    58f8:	01 97       	sbiw	r24, 0x01	; 1
    58fa:	f1 f7       	brne	.-4      	; 0x58f8 <main+0x1e8>
    58fc:	9c 83       	std	Y+4, r25	; 0x04
    58fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5900:	8d 81       	ldd	r24, Y+5	; 0x05
    5902:	9e 81       	ldd	r25, Y+6	; 0x06
    5904:	01 97       	sbiw	r24, 0x01	; 1
    5906:	9e 83       	std	Y+6, r25	; 0x06
    5908:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    590a:	8d 81       	ldd	r24, Y+5	; 0x05
    590c:	9e 81       	ldd	r25, Y+6	; 0x06
    590e:	00 97       	sbiw	r24, 0x00	; 0
    5910:	69 f7       	brne	.-38     	; 0x58ec <main+0x1dc>
    5912:	14 c0       	rjmp	.+40     	; 0x593c <main+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5914:	6f 81       	ldd	r22, Y+7	; 0x07
    5916:	78 85       	ldd	r23, Y+8	; 0x08
    5918:	89 85       	ldd	r24, Y+9	; 0x09
    591a:	9a 85       	ldd	r25, Y+10	; 0x0a
    591c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5920:	dc 01       	movw	r26, r24
    5922:	cb 01       	movw	r24, r22
    5924:	9e 83       	std	Y+6, r25	; 0x06
    5926:	8d 83       	std	Y+5, r24	; 0x05
    5928:	8d 81       	ldd	r24, Y+5	; 0x05
    592a:	9e 81       	ldd	r25, Y+6	; 0x06
    592c:	9a 83       	std	Y+2, r25	; 0x02
    592e:	89 83       	std	Y+1, r24	; 0x01
    5930:	89 81       	ldd	r24, Y+1	; 0x01
    5932:	9a 81       	ldd	r25, Y+2	; 0x02
    5934:	01 97       	sbiw	r24, 0x01	; 1
    5936:	f1 f7       	brne	.-4      	; 0x5934 <main+0x224>
    5938:	9a 83       	std	Y+2, r25	; 0x02
    593a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		if(i>=60000)
    593c:	89 89       	ldd	r24, Y+17	; 0x11
    593e:	9a 89       	ldd	r25, Y+18	; 0x12
    5940:	2a ee       	ldi	r18, 0xEA	; 234
    5942:	80 36       	cpi	r24, 0x60	; 96
    5944:	92 07       	cpc	r25, r18
    5946:	70 f0       	brcs	.+28     	; 0x5964 <main+0x254>
		{
			i=0;
    5948:	1a 8a       	std	Y+18, r1	; 0x12
    594a:	19 8a       	std	Y+17, r1	; 0x11
			k++;
    594c:	8f 85       	ldd	r24, Y+15	; 0x0f
    594e:	8f 5f       	subi	r24, 0xFF	; 255
    5950:	8f 87       	std	Y+15, r24	; 0x0f
			if(!ESP_MQTT_ping())          ESP_error_handler();
    5952:	0e 94 dd 22 	call	0x45ba	; 0x45ba <ESP_MQTT_ping>
    5956:	98 2f       	mov	r25, r24
    5958:	81 e0       	ldi	r24, 0x01	; 1
    595a:	89 27       	eor	r24, r25
    595c:	88 23       	and	r24, r24
    595e:	11 f0       	breq	.+4      	; 0x5964 <main+0x254>
    5960:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <ESP_error_handler>

		}

		if(k==4)
    5964:	8f 85       	ldd	r24, Y+15	; 0x0f
    5966:	84 30       	cpi	r24, 0x04	; 4
    5968:	61 f5       	brne	.+88     	; 0x59c2 <main+0x2b2>
		{
			k=0;
    596a:	1f 86       	std	Y+15, r1	; 0x0f
			temp_value=ADC_Get_Temp_reading(1);
    596c:	81 e0       	ldi	r24, 0x01	; 1
    596e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <ADC_Get_Temp_reading>
    5972:	88 8b       	std	Y+16, r24	; 0x10

			if(!ESP_MQTT_publish(PUBLISH_TOPIC1_NAME,PUBLISH_sub1_TOPIC,(unsigned int)temp_value))		ESP_error_handler();
    5974:	88 89       	ldd	r24, Y+16	; 0x10
    5976:	48 2f       	mov	r20, r24
    5978:	50 e0       	ldi	r21, 0x00	; 0
    597a:	89 ee       	ldi	r24, 0xE9	; 233
    597c:	94 e0       	ldi	r25, 0x04	; 4
    597e:	2c ef       	ldi	r18, 0xFC	; 252
    5980:	34 e0       	ldi	r19, 0x04	; 4
    5982:	b9 01       	movw	r22, r18
    5984:	0e 94 85 24 	call	0x490a	; 0x490a <ESP_MQTT_publish>
    5988:	98 2f       	mov	r25, r24
    598a:	81 e0       	ldi	r24, 0x01	; 1
    598c:	89 27       	eor	r24, r25
    598e:	88 23       	and	r24, r24
    5990:	11 f0       	breq	.+4      	; 0x5996 <main+0x286>
    5992:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <ESP_error_handler>

			if(temp_value>30)
    5996:	88 89       	ldd	r24, Y+16	; 0x10
    5998:	8f 31       	cpi	r24, 0x1F	; 31
    599a:	50 f0       	brcs	.+20     	; 0x59b0 <main+0x2a0>
			{
				ESP_MQTT_publish(PUBLISH_TOPIC1_NAME,PUBLISH_sub2_TOPIC,ALARM_ON);
    599c:	89 ee       	ldi	r24, 0xE9	; 233
    599e:	94 e0       	ldi	r25, 0x04	; 4
    59a0:	25 e0       	ldi	r18, 0x05	; 5
    59a2:	35 e0       	ldi	r19, 0x05	; 5
    59a4:	b9 01       	movw	r22, r18
    59a6:	41 e0       	ldi	r20, 0x01	; 1
    59a8:	50 e0       	ldi	r21, 0x00	; 0
    59aa:	0e 94 85 24 	call	0x490a	; 0x490a <ESP_MQTT_publish>
    59ae:	09 c0       	rjmp	.+18     	; 0x59c2 <main+0x2b2>
			}
			else
			{
				ESP_MQTT_publish(PUBLISH_TOPIC1_NAME,PUBLISH_sub2_TOPIC,ALARM_OFF);
    59b0:	89 ee       	ldi	r24, 0xE9	; 233
    59b2:	94 e0       	ldi	r25, 0x04	; 4
    59b4:	25 e0       	ldi	r18, 0x05	; 5
    59b6:	35 e0       	ldi	r19, 0x05	; 5
    59b8:	b9 01       	movw	r22, r18
    59ba:	40 e0       	ldi	r20, 0x00	; 0
    59bc:	50 e0       	ldi	r21, 0x00	; 0
    59be:	0e 94 85 24 	call	0x490a	; 0x490a <ESP_MQTT_publish>



		}

		if(check_receiving_new_data_from_server(subscribe_TOPIC1_NAME,subscribe_TOPIC2_NAME,subscribe_TOPIC3_NAME,&topics_data))
    59c2:	84 e8       	ldi	r24, 0x84	; 132
    59c4:	94 e0       	ldi	r25, 0x04	; 4
    59c6:	2f e9       	ldi	r18, 0x9F	; 159
    59c8:	34 e0       	ldi	r19, 0x04	; 4
    59ca:	4a eb       	ldi	r20, 0xBA	; 186
    59cc:	54 e0       	ldi	r21, 0x04	; 4
    59ce:	fe 01       	movw	r30, r28
    59d0:	73 96       	adiw	r30, 0x13	; 19
    59d2:	b9 01       	movw	r22, r18
    59d4:	9f 01       	movw	r18, r30
    59d6:	0e 94 2c 29 	call	0x5258	; 0x5258 <check_receiving_new_data_from_server>
    59da:	88 23       	and	r24, r24
    59dc:	09 f4       	brne	.+2      	; 0x59e0 <main+0x2d0>
    59de:	37 cf       	rjmp	.-402    	; 0x584e <main+0x13e>
		{


			EF_void_LCD_Clear_Screen();
    59e0:	0e 94 75 13 	call	0x26ea	; 0x26ea <EF_void_LCD_Clear_Screen>
			EF_void_LCD_print("LED7 LED6 angle");
    59e4:	8e e0       	ldi	r24, 0x0E	; 14
    59e6:	95 e0       	ldi	r25, 0x05	; 5
    59e8:	0e 94 fd 12 	call	0x25fa	; 0x25fa <EF_void_LCD_print>
			EF_void_LCD_goto(2,1);
    59ec:	82 e0       	ldi	r24, 0x02	; 2
    59ee:	61 e0       	ldi	r22, 0x01	; 1
    59f0:	0e 94 12 12 	call	0x2424	; 0x2424 <EF_void_LCD_goto>
			if(!strncmp(topics_data.topic1_data,"1",strlen("1")))       EF_void_LCD_print("ON");
    59f4:	fe 01       	movw	r30, r28
    59f6:	73 96       	adiw	r30, 0x13	; 19
    59f8:	90 81       	ld	r25, Z
    59fa:	ee e1       	ldi	r30, 0x1E	; 30
    59fc:	f5 e0       	ldi	r31, 0x05	; 5
    59fe:	80 81       	ld	r24, Z
    5a00:	98 17       	cp	r25, r24
    5a02:	29 f4       	brne	.+10     	; 0x5a0e <main+0x2fe>
    5a04:	80 e2       	ldi	r24, 0x20	; 32
    5a06:	95 e0       	ldi	r25, 0x05	; 5
    5a08:	0e 94 fd 12 	call	0x25fa	; 0x25fa <EF_void_LCD_print>
    5a0c:	0c c0       	rjmp	.+24     	; 0x5a26 <main+0x316>
			else if(!strncmp(topics_data.topic1_data,"0",strlen("0")))  EF_void_LCD_print("OFF");
    5a0e:	fe 01       	movw	r30, r28
    5a10:	73 96       	adiw	r30, 0x13	; 19
    5a12:	90 81       	ld	r25, Z
    5a14:	e3 e2       	ldi	r30, 0x23	; 35
    5a16:	f5 e0       	ldi	r31, 0x05	; 5
    5a18:	80 81       	ld	r24, Z
    5a1a:	98 17       	cp	r25, r24
    5a1c:	21 f4       	brne	.+8      	; 0x5a26 <main+0x316>
    5a1e:	85 e2       	ldi	r24, 0x25	; 37
    5a20:	95 e0       	ldi	r25, 0x05	; 5
    5a22:	0e 94 fd 12 	call	0x25fa	; 0x25fa <EF_void_LCD_print>
			EF_void_LCD_goto(2,6);
    5a26:	82 e0       	ldi	r24, 0x02	; 2
    5a28:	66 e0       	ldi	r22, 0x06	; 6
    5a2a:	0e 94 12 12 	call	0x2424	; 0x2424 <EF_void_LCD_goto>
			if(!strncmp(topics_data.topic2_data,"1",strlen("1")))        EF_void_LCD_print("ON");
    5a2e:	ce 01       	movw	r24, r28
    5a30:	43 96       	adiw	r24, 0x13	; 19
    5a32:	fc 01       	movw	r30, r24
    5a34:	35 96       	adiw	r30, 0x05	; 5
    5a36:	90 81       	ld	r25, Z
    5a38:	ee e1       	ldi	r30, 0x1E	; 30
    5a3a:	f5 e0       	ldi	r31, 0x05	; 5
    5a3c:	80 81       	ld	r24, Z
    5a3e:	98 17       	cp	r25, r24
    5a40:	29 f4       	brne	.+10     	; 0x5a4c <main+0x33c>
    5a42:	80 e2       	ldi	r24, 0x20	; 32
    5a44:	95 e0       	ldi	r25, 0x05	; 5
    5a46:	0e 94 fd 12 	call	0x25fa	; 0x25fa <EF_void_LCD_print>
    5a4a:	0e c0       	rjmp	.+28     	; 0x5a68 <main+0x358>
			else if(!strncmp(topics_data.topic2_data,"0",strlen("0")))   EF_void_LCD_print("OFF");
    5a4c:	ce 01       	movw	r24, r28
    5a4e:	43 96       	adiw	r24, 0x13	; 19
    5a50:	fc 01       	movw	r30, r24
    5a52:	35 96       	adiw	r30, 0x05	; 5
    5a54:	90 81       	ld	r25, Z
    5a56:	e3 e2       	ldi	r30, 0x23	; 35
    5a58:	f5 e0       	ldi	r31, 0x05	; 5
    5a5a:	80 81       	ld	r24, Z
    5a5c:	98 17       	cp	r25, r24
    5a5e:	21 f4       	brne	.+8      	; 0x5a68 <main+0x358>
    5a60:	85 e2       	ldi	r24, 0x25	; 37
    5a62:	95 e0       	ldi	r25, 0x05	; 5
    5a64:	0e 94 fd 12 	call	0x25fa	; 0x25fa <EF_void_LCD_print>
			EF_void_LCD_goto(2,11);
    5a68:	82 e0       	ldi	r24, 0x02	; 2
    5a6a:	6b e0       	ldi	r22, 0x0B	; 11
    5a6c:	0e 94 12 12 	call	0x2424	; 0x2424 <EF_void_LCD_goto>
			EF_void_LCD_print(topics_data.topic3_data);
    5a70:	ce 01       	movw	r24, r28
    5a72:	43 96       	adiw	r24, 0x13	; 19
    5a74:	0a 96       	adiw	r24, 0x0a	; 10
    5a76:	0e 94 fd 12 	call	0x25fa	; 0x25fa <EF_void_LCD_print>
    5a7a:	e9 ce       	rjmp	.-558    	; 0x584e <main+0x13e>

00005a7c <__udivmodhi4>:
    5a7c:	aa 1b       	sub	r26, r26
    5a7e:	bb 1b       	sub	r27, r27
    5a80:	51 e1       	ldi	r21, 0x11	; 17
    5a82:	07 c0       	rjmp	.+14     	; 0x5a92 <__udivmodhi4_ep>

00005a84 <__udivmodhi4_loop>:
    5a84:	aa 1f       	adc	r26, r26
    5a86:	bb 1f       	adc	r27, r27
    5a88:	a6 17       	cp	r26, r22
    5a8a:	b7 07       	cpc	r27, r23
    5a8c:	10 f0       	brcs	.+4      	; 0x5a92 <__udivmodhi4_ep>
    5a8e:	a6 1b       	sub	r26, r22
    5a90:	b7 0b       	sbc	r27, r23

00005a92 <__udivmodhi4_ep>:
    5a92:	88 1f       	adc	r24, r24
    5a94:	99 1f       	adc	r25, r25
    5a96:	5a 95       	dec	r21
    5a98:	a9 f7       	brne	.-22     	; 0x5a84 <__udivmodhi4_loop>
    5a9a:	80 95       	com	r24
    5a9c:	90 95       	com	r25
    5a9e:	bc 01       	movw	r22, r24
    5aa0:	cd 01       	movw	r24, r26
    5aa2:	08 95       	ret

00005aa4 <__prologue_saves__>:
    5aa4:	2f 92       	push	r2
    5aa6:	3f 92       	push	r3
    5aa8:	4f 92       	push	r4
    5aaa:	5f 92       	push	r5
    5aac:	6f 92       	push	r6
    5aae:	7f 92       	push	r7
    5ab0:	8f 92       	push	r8
    5ab2:	9f 92       	push	r9
    5ab4:	af 92       	push	r10
    5ab6:	bf 92       	push	r11
    5ab8:	cf 92       	push	r12
    5aba:	df 92       	push	r13
    5abc:	ef 92       	push	r14
    5abe:	ff 92       	push	r15
    5ac0:	0f 93       	push	r16
    5ac2:	1f 93       	push	r17
    5ac4:	cf 93       	push	r28
    5ac6:	df 93       	push	r29
    5ac8:	cd b7       	in	r28, 0x3d	; 61
    5aca:	de b7       	in	r29, 0x3e	; 62
    5acc:	ca 1b       	sub	r28, r26
    5ace:	db 0b       	sbc	r29, r27
    5ad0:	0f b6       	in	r0, 0x3f	; 63
    5ad2:	f8 94       	cli
    5ad4:	de bf       	out	0x3e, r29	; 62
    5ad6:	0f be       	out	0x3f, r0	; 63
    5ad8:	cd bf       	out	0x3d, r28	; 61
    5ada:	09 94       	ijmp

00005adc <__epilogue_restores__>:
    5adc:	2a 88       	ldd	r2, Y+18	; 0x12
    5ade:	39 88       	ldd	r3, Y+17	; 0x11
    5ae0:	48 88       	ldd	r4, Y+16	; 0x10
    5ae2:	5f 84       	ldd	r5, Y+15	; 0x0f
    5ae4:	6e 84       	ldd	r6, Y+14	; 0x0e
    5ae6:	7d 84       	ldd	r7, Y+13	; 0x0d
    5ae8:	8c 84       	ldd	r8, Y+12	; 0x0c
    5aea:	9b 84       	ldd	r9, Y+11	; 0x0b
    5aec:	aa 84       	ldd	r10, Y+10	; 0x0a
    5aee:	b9 84       	ldd	r11, Y+9	; 0x09
    5af0:	c8 84       	ldd	r12, Y+8	; 0x08
    5af2:	df 80       	ldd	r13, Y+7	; 0x07
    5af4:	ee 80       	ldd	r14, Y+6	; 0x06
    5af6:	fd 80       	ldd	r15, Y+5	; 0x05
    5af8:	0c 81       	ldd	r16, Y+4	; 0x04
    5afa:	1b 81       	ldd	r17, Y+3	; 0x03
    5afc:	aa 81       	ldd	r26, Y+2	; 0x02
    5afe:	b9 81       	ldd	r27, Y+1	; 0x01
    5b00:	ce 0f       	add	r28, r30
    5b02:	d1 1d       	adc	r29, r1
    5b04:	0f b6       	in	r0, 0x3f	; 63
    5b06:	f8 94       	cli
    5b08:	de bf       	out	0x3e, r29	; 62
    5b0a:	0f be       	out	0x3f, r0	; 63
    5b0c:	cd bf       	out	0x3d, r28	; 61
    5b0e:	ed 01       	movw	r28, r26
    5b10:	08 95       	ret

00005b12 <memset>:
    5b12:	dc 01       	movw	r26, r24
    5b14:	01 c0       	rjmp	.+2      	; 0x5b18 <memset+0x6>
    5b16:	6d 93       	st	X+, r22
    5b18:	41 50       	subi	r20, 0x01	; 1
    5b1a:	50 40       	sbci	r21, 0x00	; 0
    5b1c:	e0 f7       	brcc	.-8      	; 0x5b16 <memset+0x4>
    5b1e:	08 95       	ret

00005b20 <strlen>:
    5b20:	fc 01       	movw	r30, r24
    5b22:	01 90       	ld	r0, Z+
    5b24:	00 20       	and	r0, r0
    5b26:	e9 f7       	brne	.-6      	; 0x5b22 <strlen+0x2>
    5b28:	80 95       	com	r24
    5b2a:	90 95       	com	r25
    5b2c:	8e 0f       	add	r24, r30
    5b2e:	9f 1f       	adc	r25, r31
    5b30:	08 95       	ret

00005b32 <strncmp>:
    5b32:	fb 01       	movw	r30, r22
    5b34:	dc 01       	movw	r26, r24
    5b36:	41 50       	subi	r20, 0x01	; 1
    5b38:	50 40       	sbci	r21, 0x00	; 0
    5b3a:	30 f0       	brcs	.+12     	; 0x5b48 <strncmp+0x16>
    5b3c:	8d 91       	ld	r24, X+
    5b3e:	01 90       	ld	r0, Z+
    5b40:	80 19       	sub	r24, r0
    5b42:	19 f4       	brne	.+6      	; 0x5b4a <strncmp+0x18>
    5b44:	00 20       	and	r0, r0
    5b46:	b9 f7       	brne	.-18     	; 0x5b36 <strncmp+0x4>
    5b48:	88 1b       	sub	r24, r24
    5b4a:	99 0b       	sbc	r25, r25
    5b4c:	08 95       	ret

00005b4e <strstr>:
    5b4e:	fb 01       	movw	r30, r22
    5b50:	51 91       	ld	r21, Z+
    5b52:	55 23       	and	r21, r21
    5b54:	a9 f0       	breq	.+42     	; 0x5b80 <strstr+0x32>
    5b56:	bf 01       	movw	r22, r30
    5b58:	dc 01       	movw	r26, r24
    5b5a:	4d 91       	ld	r20, X+
    5b5c:	45 17       	cp	r20, r21
    5b5e:	41 11       	cpse	r20, r1
    5b60:	e1 f7       	brne	.-8      	; 0x5b5a <strstr+0xc>
    5b62:	59 f4       	brne	.+22     	; 0x5b7a <strstr+0x2c>
    5b64:	cd 01       	movw	r24, r26
    5b66:	01 90       	ld	r0, Z+
    5b68:	00 20       	and	r0, r0
    5b6a:	49 f0       	breq	.+18     	; 0x5b7e <strstr+0x30>
    5b6c:	4d 91       	ld	r20, X+
    5b6e:	40 15       	cp	r20, r0
    5b70:	41 11       	cpse	r20, r1
    5b72:	c9 f3       	breq	.-14     	; 0x5b66 <strstr+0x18>
    5b74:	fb 01       	movw	r30, r22
    5b76:	41 11       	cpse	r20, r1
    5b78:	ef cf       	rjmp	.-34     	; 0x5b58 <strstr+0xa>
    5b7a:	81 e0       	ldi	r24, 0x01	; 1
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	01 97       	sbiw	r24, 0x01	; 1
    5b80:	08 95       	ret

00005b82 <itoa>:
    5b82:	fb 01       	movw	r30, r22
    5b84:	9f 01       	movw	r18, r30
    5b86:	e8 94       	clt
    5b88:	42 30       	cpi	r20, 0x02	; 2
    5b8a:	c4 f0       	brlt	.+48     	; 0x5bbc <itoa+0x3a>
    5b8c:	45 32       	cpi	r20, 0x25	; 37
    5b8e:	b4 f4       	brge	.+44     	; 0x5bbc <itoa+0x3a>
    5b90:	4a 30       	cpi	r20, 0x0A	; 10
    5b92:	29 f4       	brne	.+10     	; 0x5b9e <itoa+0x1c>
    5b94:	97 fb       	bst	r25, 7
    5b96:	1e f4       	brtc	.+6      	; 0x5b9e <itoa+0x1c>
    5b98:	90 95       	com	r25
    5b9a:	81 95       	neg	r24
    5b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b9e:	64 2f       	mov	r22, r20
    5ba0:	77 27       	eor	r23, r23
    5ba2:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__udivmodhi4>
    5ba6:	80 5d       	subi	r24, 0xD0	; 208
    5ba8:	8a 33       	cpi	r24, 0x3A	; 58
    5baa:	0c f0       	brlt	.+2      	; 0x5bae <itoa+0x2c>
    5bac:	89 5d       	subi	r24, 0xD9	; 217
    5bae:	81 93       	st	Z+, r24
    5bb0:	cb 01       	movw	r24, r22
    5bb2:	00 97       	sbiw	r24, 0x00	; 0
    5bb4:	a1 f7       	brne	.-24     	; 0x5b9e <itoa+0x1c>
    5bb6:	16 f4       	brtc	.+4      	; 0x5bbc <itoa+0x3a>
    5bb8:	5d e2       	ldi	r21, 0x2D	; 45
    5bba:	51 93       	st	Z+, r21
    5bbc:	10 82       	st	Z, r1
    5bbe:	c9 01       	movw	r24, r18
    5bc0:	0c 94 e2 2d 	jmp	0x5bc4	; 0x5bc4 <strrev>

00005bc4 <strrev>:
    5bc4:	dc 01       	movw	r26, r24
    5bc6:	fc 01       	movw	r30, r24
    5bc8:	67 2f       	mov	r22, r23
    5bca:	71 91       	ld	r23, Z+
    5bcc:	77 23       	and	r23, r23
    5bce:	e1 f7       	brne	.-8      	; 0x5bc8 <strrev+0x4>
    5bd0:	32 97       	sbiw	r30, 0x02	; 2
    5bd2:	04 c0       	rjmp	.+8      	; 0x5bdc <strrev+0x18>
    5bd4:	7c 91       	ld	r23, X
    5bd6:	6d 93       	st	X+, r22
    5bd8:	70 83       	st	Z, r23
    5bda:	62 91       	ld	r22, -Z
    5bdc:	ae 17       	cp	r26, r30
    5bde:	bf 07       	cpc	r27, r31
    5be0:	c8 f3       	brcs	.-14     	; 0x5bd4 <strrev+0x10>
    5be2:	08 95       	ret

00005be4 <_exit>:
    5be4:	f8 94       	cli

00005be6 <__stop_program>:
    5be6:	ff cf       	rjmp	.-2      	; 0x5be6 <__stop_program>
